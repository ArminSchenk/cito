% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cnn.R
\name{predict.citocnn}
\alias{predict.citocnn}
\title{Predict from a fitted cnn model}
\usage{
\method{predict}{citocnn}(
  object,
  newdata = NULL,
  type = c("link", "response", "class"),
  device = c("cpu", "cuda", "mps"),
  batchsize = 32L,
  ...
)
}
\arguments{
\item{object}{a model created by \code{\link{cnn}}}

\item{newdata}{new data for predictions}

\item{type}{which value should be calculated, either raw response, output of link function or predicted class (in case of classification)}

\item{device}{device on which network should be trained on.}

\item{batchsize}{number of samples that are predicted at the same time}

\item{...}{additional arguments}
}
\value{
prediction matrix
}
\description{
Predict from a fitted cnn model
}
\examples{
\donttest{
if(torch::torch_is_installed()){
library(cito)

set.seed(222)

## Data
shapes <- cito:::simulate_shapes(320, 28)
X <- shapes$data
Y <- shapes$labels

## Architecture
architecture <- create_architecture(conv(5), maxPool(), conv(5), maxPool(), linear(10))

## Build and train network
cnn.fit <- cnn(X, Y, architecture, loss = "softmax", epochs = 50, validation = 0.1, lr = 0.05)

## Get predictions of the validation set
valid <- cnn.fit$data$validation
predictions <- predict(cnn.fit, newdata = X[valid,,,,drop=FALSE], type="class")

## Classification accuracy
accuracy <- sum(predictions == Y[valid])/length(valid)

}
}
}
