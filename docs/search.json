[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/A-Introduction_to_cito.html","id":"setup---installing-torch","dir":"Articles","previous_headings":"","what":"Setup - Installing torch","title":"Introduction to cito","text":"using ‘cito’ make sure current version ‘torch’ installed running. problems installing Torch, check installation help torch developer.","code":"if(!require(torch)) install.packages(\"torch\") library(torch) if(!torch_is_installed()) install_torch()  library (cito)"},{"path":[]},{"path":"/articles/A-Introduction_to_cito.html","id":"internal-data-representation","dir":"Articles","previous_headings":"Details about the internal implementation of ‘cito’","what":"Internal Data Representation","title":"Introduction to cito","text":"Tabular data typically supplied cito data.frame usual encoding via data argument. Categorical data processed internally using model.matrix functions R ‘stats’ package. Categorical features automatically one-hot encoded (reference level). data split feature matrix (variables) response matrix. training neural networks based stochastic gradient descent, involves sampling random batches data optimization step. optimize sampling subsetting data, ‘torch’ provides optimized data loader objects create data iterators (objects iterate data set corresponding epoch). feature response matrices passed ‘torch’ data loaders reside CPU (avoid memory overflows GPU, available).","code":""},{"path":"/articles/A-Introduction_to_cito.html","id":"construction-of-the-neural-networks","dir":"Articles","previous_headings":"Details about the internal implementation of ‘cito’","what":"Construction of the neural networks","title":"Introduction to cito","text":"Neural networks (NN) built using ‘nn_sequential’ object ‘torch’ package. nn_sequential’ expects list layers returns fully functional neural network object. also initializes weights layers. list layers built based user input, particular hidden argument number size hidden layers, activation argument corresponding activation layers.","code":""},{"path":"/articles/A-Introduction_to_cito.html","id":"training-and-evaluation","dir":"Articles","previous_headings":"Details about the internal implementation of ‘cito’","what":"Training and Evaluation","title":"Introduction to cito","text":"NN structure data prepared, actual training starts (baseline loss also calculated training starts). training consists two loops. outer loop number epochs (one epoch means data used update weights). inner loop stochastic gradient descent, .e. n = 100 observations batch size = 20, takes 5 batches data traverse dataset . step inner loop, optimizer reset, batch data returned data iterator (initialized epoch data loader), split feature response tensors, pushed GPU (one available), feature matrix passed NN prediction, average loss computed based response tensor predictions, average loss backpropagated, weights updated optimizer based back-propagated errors. inner loop repeated dataset used , completing epoch. process repeated n epochs. validation turned , epoch model evaluated validation holdout (separated data beginning).","code":""},{"path":"/articles/A-Introduction_to_cito.html","id":"transferability","dir":"Articles","previous_headings":"Details about the internal implementation of ‘cito’","what":"Transferability","title":"Introduction to cito","text":"make model portable (e.g. save reload model), weights stored R matrices final object ‘dnn’ function. necessary ‘torch’ objects just pointers corresponding data structures. Naively, storing pointers pointless, R session ends, memory freed pointers meaningless.","code":""},{"path":[]},{"path":"/articles/A-Introduction_to_cito.html","id":"loss-functions-likelihoods","dir":"Articles","previous_headings":"Introduction to models and model structures","what":"Loss functions / Likelihoods","title":"Introduction to cito","text":"Cito can handle many different response types. Common loss functions ML also likelihoods statistical models supported: Moreover, non multilabel losses (except softmax cross-entropy) can modeled multilabel using cbind syntax dnn(cbind(Sepal.Length, Sepal.Width)~., …, loss = \"mse\") likelihoods (Gaussian, Binomial, Poisson) can also passed stats equivalents: dnn(Sepal.Length~., ..., loss = stats::gaussian)","code":""},{"path":"/articles/A-Introduction_to_cito.html","id":"data","dir":"Articles","previous_headings":"Introduction to models and model structures","what":"Data","title":"Introduction to cito","text":"vignette, work irirs dataset build regression model.","code":"data <- datasets::iris head(data) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa  #scale dataset data <- data.frame(scale(data[,-5]),Species = data[,5])"},{"path":"/articles/A-Introduction_to_cito.html","id":"fitting-a-simple-model","dir":"Articles","previous_headings":"Introduction to models and model structures","what":"Fitting a simple model","title":"Introduction to cito","text":"‘cito’, neural networks specified fitted dnn() function. Models can also trained GPU setting device = \"cuda\"(installed CUDA dependencies). suggested working large data sets networks. can plot network structure give visual feedback created object. e aware may take time large networks.  neural network 5 input nodes (3 continuoues features, Sepal.Width, Petal.Length, Petal.Width contrasts Species variable (n_classes - 1)) 1 output node response (Sepal.Length).","code":"library(cito)  #fitting a regression model to predict Sepal.Length nn.fit <- dnn(Sepal.Length~. , data = data, epochs = 12, loss = \"mse\", verbose=FALSE) plot(nn.fit)"},{"path":"/articles/A-Introduction_to_cito.html","id":"baseline-loss","dir":"Articles","previous_headings":"Introduction to models and model structures","what":"Baseline loss","title":"Introduction to cito","text":"start training calculate baseline loss intercept model. allows us control training goal beat baseline loss. don’t, need adjust optimization parameters (epochs lr (learning rate)): vs  See vignette(\"B-Training_neural_networks\") details adjust optimization procedure increase probability convergence.","code":"nn.fit <- dnn(Sepal.Length~. , data = data, epochs = 50, lr = 0.6, loss = \"mse\", verbose = FALSE) # lr too high nn.fit <- dnn(Sepal.Length~. , data = data, epochs = 50, lr = 0.01, loss = \"mse\", verbose = FALSE)"},{"path":"/articles/A-Introduction_to_cito.html","id":"adding-a-validation-set-to-the-training-process","dir":"Articles","previous_headings":"Introduction to models and model structures","what":"Adding a validation set to the training process","title":"Introduction to cito","text":"order see model might suffer overfitting addition validation set can useful. dnn() can put validation = 0.x define percentage used training validation epoch. training, loss plot show two losses behave (see vignette(\"B-Training_neural_networks\") details training NN guaranteeing convergence). Weights oft last epoch lowest validation loss saved: default use weights last epoch. can also tell model use weights lowest validation loss:","code":"#20% of data set is used as validation set nn.fit <- dnn(Sepal.Length~., data = data, epochs = 32,               loss= \"mse\", validation = 0.2) length(nn.fit$weights) #> [1] 2 nn.fit$use_model_epoch = 1 # Default, use last epoch nn.fit$use_model_epoch = 2 # Use weights from epoch with lowest validation loss"},{"path":"/articles/A-Introduction_to_cito.html","id":"methods","dir":"Articles","previous_headings":"Introduction to models and model structures","what":"Methods","title":"Introduction to cito","text":"cito supports many well-known methods statistical packages:","code":"predict(nn.fit) coef(nn.fit) print(nn.fit)"},{"path":"/articles/A-Introduction_to_cito.html","id":"explainable-ai---understanding-your-model","dir":"Articles","previous_headings":"","what":"Explainable AI - Understanding your model","title":"Introduction to cito","text":"xAI can produce outputs similar known outputs statistical models: summary() returns feature importance, ACE SDCE:","code":"# Calculate and return feature importance summary(nn.fit) #> Summary of Deep Neural Network Model #>  #> Feature Importance: #>       variable importance_1 #> 1  Sepal.Width     2.244377 #> 2 Petal.Length    12.032426 #> 3  Petal.Width     1.097159 #> 4      Species     1.032927 #>  #> Average Conditional Effects: #>               Response_1 #> Sepal.Width  0.370464792 #> Petal.Length 0.912100988 #> Petal.Width  0.002742112 #>  #> Standard Deviation of Conditional Effects: #>              Response_1 #> Sepal.Width  0.04870084 #> Petal.Length 0.09186123 #> Petal.Width  0.04183386 #returns weights of neural network coef(nn.fit)"},{"path":"/articles/A-Introduction_to_cito.html","id":"uncertaintiesp-values","dir":"Articles","previous_headings":"Explainable AI - Understanding your model","what":"Uncertainties/p-Values","title":"Introduction to cito","text":"can use bootstrapping obtain uncertainties xAI metrics (also predictions). retrain model enabled bootstrapping: find Petal.Length Sepal.Width significant (categorical features supported yet average conditional effects). Let’s compare output statistical outputs: Feature importance anova report Petal.Length important feature. Visualization effects:   differences statistical model NN - expected NN can fit data flexible. time differences large confidence intervals (e.g. effect Petal.Width)","code":"df = data df[,2:4] = scale(df[,2:4]) # scaling can help the NN to convergence faster nn.fit <- dnn(Sepal.Length~., data = df,               epochs = 100,               verbose = FALSE,               loss= \"mse\",               bootstrap = 30L               ) summary(nn.fit) #> Summary of Deep Neural Network Model #>  #> ── Feature Importance #>                 Importance Std.Err Z value Pr(>|z|)     #> Sepal.Width →        1.589   0.581    2.74   0.0062 **  #> Petal.Length →      42.668  10.377    4.11  3.9e-05 *** #> Petal.Width →        1.756   1.454    1.21   0.2274     #> Species →            2.199   1.843    1.19   0.2327     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ── Average Conditional Effects #>                     ACE Std.Err Z value Pr(>|z|)     #> Sepal.Width →    0.2885  0.0518    5.56  2.6e-08 *** #> Petal.Length →   1.6155  0.1605   10.07  < 2e-16 *** #> Petal.Width →   -0.3189  0.1546   -2.06    0.039 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ── Standard Deviation of Conditional Effects #>                    ACE Std.Err Z value Pr(>|z|)     #> Sepal.Width →   0.1024  0.0268    3.82  0.00013 *** #> Petal.Length →  0.2145  0.0496    4.32  1.6e-05 *** #> Petal.Width →   0.0768  0.0172    4.46  8.1e-06 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 anova(lm(Sepal.Length~., data = df)) #> Analysis of Variance Table #>  #> Response: Sepal.Length #>               Df  Sum Sq Mean Sq  F value    Pr(>F)     #> Sepal.Width    1   2.060   2.060  15.0011 0.0001625 *** #> Petal.Length   1 123.127 123.127 896.8059 < 2.2e-16 *** #> Petal.Width    1   2.747   2.747  20.0055 1.556e-05 *** #> Species        2   1.296   0.648   4.7212 0.0103288 *   #> Residuals    144  19.770   0.137                        #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 PDP(nn.fit) library(effects) plot(allEffects(lm(Sepal.Length~., data = df)))"},{"path":"/articles/A-Introduction_to_cito.html","id":"architecture","dir":"Articles","previous_headings":"","what":"Architecture","title":"Introduction to cito","text":"architecture NN usually refers width depth hidden layers (layers input output layer) activation functions. can increase complexity NN adding layers /making wider:   definitive guide choosing right architecture right task. However, general rules/recommendations: general, wider, deeper neural networks can improve generalization - double-edged sword also increases risk overfitting. , increase width depth network, also add regularization (e.g., increasing lambda parameter, corresponds regularization strength). Furthermore, Pichler & Hartig, 2023, investigated effects hyperparameters prediction performance function data size. example, found selu activation function outperforms relu small data sizes (<100 observations). recommend starting moderate sizes (like defaults), model doesn’t generalize/converge, try larger networks along regularization helps minimize risk overfitting (see vignette(\"B-Training_neural_networks\") ).","code":"# \"simple NN\" - low complexity nn.fit <- dnn(Sepal.Length~., data = data, epochs = 100,               loss= \"mse\", validation = 0.2,               hidden = c(5L), verbose=FALSE) # \"large NN\" - high complexity nn.fit <- dnn(Sepal.Length~., data = data, epochs = 100,               loss= \"mse\", validation = 0.2,               hidden = c(100L, 100), verbose=FALSE)"},{"path":"/articles/A-Introduction_to_cito.html","id":"activation-functions","dir":"Articles","previous_headings":"Architecture","what":"Activation functions","title":"Introduction to cito","text":"default, layers fitted SeLU activation function. \\[ relu(x) = max (0,x) \\]can also adjust activation function layer individually build exactly network want. case provide vector length hidden layers. activation function output layer chosen loss argument provided. Note: default activation function adequate tasks. don’t recommend tuning .","code":"#selu as activation function for all layers: nn.fit <- dnn(Sepal.Length~., data = data, hidden = c(10,10,10,10), activation= \"relu\") #layer specific activation functions: nn.fit <- dnn(Sepal.Length~., data = data,               hidden = c(10,10,10,10), activation= c(\"relu\",\"selu\",\"tanh\",\"sigmoid\"))"},{"path":[]},{"path":[]},{"path":"/articles/A-Introduction_to_cito.html","id":"elastic-net-regularization","dir":"Articles","previous_headings":"Tuning hyperparameters > Regularization","what":"Elastic net regularization","title":"Introduction to cito","text":"elastic net used, ‘cito’ produce sparse, generalized neural network. L1/L2 loss can controlled arguments alpha lambda. \\[ loss = \\lambda * [ (1 - \\alpha) * |weights| + \\alpha |weights|^2 ] \\]","code":"#elastic net penalty in all layers: nn.fit <- dnn(Species~., data = data, alpha = 0.5, lambda = 0.01, verbose=FALSE, loss = \"softmax\")"},{"path":"/articles/A-Introduction_to_cito.html","id":"dropout-regularization","dir":"Articles","previous_headings":"Tuning hyperparameters > Regularization","what":"Dropout Regularization","title":"Introduction to cito","text":"Dropout regularization proposed Srivastava et al. can controlled similar elastic net regularization. approach, percentage different nodes gets left epoch.","code":"#dropout of 35% on all layers: nn.fit <- dnn(Species~., data = data, loss = \"softmax\", dropout = 0.35, verbose=FALSE)"},{"path":[]},{"path":"/articles/A-Introduction_to_cito.html","id":"learning-rate-scheduler","dir":"Articles","previous_headings":"Tuning hyperparameters","what":"Learning rate scheduler","title":"Introduction to cito","text":"Learning rate scheduler allow start high learning rate decrease training process. leads overall faster training. can choose different types schedulers. Namely, lambda, multiplicative, one_cycle step. function config_lr_scheduler() helps setup scheduler. See ?config_lr_scheduler() information","code":"# Step Learning rate scheduler that reduces learning rate every 16 steps by a factor of 0.5 scheduler <- config_lr_scheduler(type = \"step\",                                  step_size = 16,                                  gamma = 0.5)  nn.fit <- dnn(Sepal.Length~., data = data,lr = 0.01, lr_scheduler= scheduler, verbose = FALSE)"},{"path":"/articles/A-Introduction_to_cito.html","id":"optimizer","dir":"Articles","previous_headings":"Tuning hyperparameters","what":"Optimizer","title":"Introduction to cito","text":"Optimizer responsible fitting neural network. optimizer tries minimize loss function. default stochastic gradient descent used. Custom optimizers can used config_optimizer(). See ?config_optimizer() information.","code":"# adam optimizer with learning rate 0.002, betas to 0.95, 0.999 and eps to 1.5e-08 opt <- config_optimizer(   type = \"sgd\")  nn.fit <- dnn(Species~., data = data,  optimizer = opt, lr=0.002, verbose=FALSE, loss = \"softmax\")"},{"path":"/articles/A-Introduction_to_cito.html","id":"early-stopping","dir":"Articles","previous_headings":"Tuning hyperparameters","what":"Early Stopping","title":"Introduction to cito","text":"Adding early stopping criteria helps save time stopping training process early, validation loss current epoch bigger validation loss n epochs early. n can defined early_stopping argument. required set validation > 0.","code":"# Stops training if validation loss at current epoch is bigger than that 15 epochs earlier nn.fit <- dnn(Sepal.Length~., data = data, epochs = 1000,               validation = 0.2, early_stopping = 15, verbose=FALSE)"},{"path":"/articles/A-Introduction_to_cito.html","id":"automatic-hyperparameter-tuning-experimental","dir":"Articles","previous_headings":"","what":"Automatic hyperparameter tuning (experimental)","title":"Introduction to cito","text":"started support automatic hyperparameter tuning Cross Validation. tuning strategy random search, .e. potential hyperparameter values sampled uniform distributions, boundaries can specified user. can mark hyperparameters tuned cito setting values tune(), example dnn (..., lr = tune(). tune() function creates range random values given hyperparameter. can also change maximum minimum range values. following table lists hyperparameters can currently tuned: hyperparameters tuned random search (.e., random values hyperparameters within specified range) cross-validation. exact tuning regime can specified [config_tuning]. Note hyperparameter tuning can expensive. implemented option parallelize hyperparameter tuning, including parallelization one GPUs (hyperparameter evaluation parallelized, CV). can especially useful small models. example, 4 GPUs, 20 CPU cores, 20 steps (random samples random search), run dnn(..., device=\"cuda\",lr = tune(), batchsize=tune(), tuning=config_tuning(parallel=20, NGPU=4), distribute 20 model fits across 4 GPUs, GPU process 5 models (parallel). Tune learning rate one important hyperparameters: tuning, final model trained best set hyperparameters returned.","code":"nn.fit_tuned = dnn(Species~.,                    data = iris,                    lr = tune(0.0001, 0.1),                    loss = \"softmax\",                    tuning = config_tuning(steps = 3L, CV = 3L)) #> Starting hyperparameter tuning... #> Fitting final model..."},{"path":"/articles/A-Introduction_to_cito.html","id":"continue-training-process","dir":"Articles","previous_headings":"","what":"Continue training process","title":"Introduction to cito","text":"can continue training process existing model continue_training(). also allows change training parameters, example learning rate. can analyze training process analyze_training().","code":"# simple example, simply adding another 12 epochs to the training process nn.fit <- continue_training(nn.fit, epochs = 12, verbose=FALSE) head(predict(nn.fit)) #>            [,1] #> [1,] -0.9705824 #> [2,] -1.4218482 #> [3,] -1.3220458 #> [4,] -1.2434552 #> [5,] -0.8870381 #> [6,] -0.4845728 # picking the model with the smalles validation loss # with changed parameters, in this case a smaller learning rate and a smaller batchsize nn.fit <- continue_training(nn.fit,                             epochs = 32,                             changed_params = list(lr = 0.001, batchsize = 16),                             verbose = FALSE)"},{"path":"/articles/A-Introduction_to_cito.html","id":"the-best-of-both-worlds---combining-statistical-models-and-deep-learning","dir":"Articles","previous_headings":"","what":"The best of both worlds - combining statistical models and deep learning","title":"Introduction to cito","text":"addition common loss functions, also provide option using actual likelihoods - , assume DNN approximates underlying data generating model. important consequence - also ensure effects extracted xAI correct - check model assumptions, whether residuals distributed expect given likelihood/probability distribution. Example: Simulate negative binomial distribution fit poisson-DNN Fit model poisson likelihood:  use DHARMa package check residuals. DHARMa support cito, general interface residual checks. simulate model :   Overdispersion (biased effect estimates inflated error rates consequence overdispersion) ! One solution (one implemented cito) switch negative binomial distribution fits variable dispersion parameter:  custom implementation negative binomial distribution (similar “nbinom1” glmmTMB (nbinom converges poisson dispersion parameters approaches infinity)) provide simulate function:   Better!","code":"X = matrix(runif(500*3,-1,1), 500, 3) Y = rnbinom(500, mu = exp(2.5*X[,1]), size = 0.3) df = data.frame(Y = Y, X) m1 = dnn(Y~., data = df, loss = \"poisson\", lr = 0.005, epochs = 300L, verbose = FALSE) library(DHARMa) pred = predict(m1, type = \"response\") sims = sapply(1:100, function(i) rpois(length(pred), pred))  res = createDHARMa(sims, Y, pred[,1], integerResponse = TRUE) plot(res) testOverdispersion(res) #> testOverdispersion is deprecated, switch your code to using the testDispersion function #>  #>  DHARMa nonparametric dispersion test via sd of residuals fitted vs. simulated #>  #> data:  simulationOutput #> dispersion = 29.052, p-value < 2.2e-16 #> alternative hypothesis: two.sided m2 = dnn(Y~., data = df, loss = \"nbinom\", lr = 0.005, epochs = 300L, verbose = FALSE) # Dispersion parameter: m2$loss$parameter_link() #> [1] 0.5389512 pred = predict(m2, type = \"response\") sims = sapply(1:100, function(i) m2$loss$simulate(pred))  res = createDHARMa(sims, Y, pred[,1], integerResponse = TRUE) plot(res) testOverdispersion(res) #> testOverdispersion is deprecated, switch your code to using the testDispersion function #>  #>  DHARMa nonparametric dispersion test via sd of residuals fitted vs. simulated #>  #> data:  simulationOutput #> dispersion = 2.571, p-value < 2.2e-16 #> alternative hypothesis: two.sided"},{"path":"/articles/B-Training_neural_networks.html","id":"possible-issues","dir":"Articles","previous_headings":"","what":"Possible issues","title":"Training neural networks","text":"Convergence issues, (often learning rate), training loss baseline loss:  looks like , go adjusting learning rate section Overfitting, difference training testing/holdout/new data error high, validation loss first decreases increases :  loos like , go overfitting section","code":""},{"path":"/articles/B-Training_neural_networks.html","id":"lr","dir":"Articles","previous_headings":"","what":"Convergence issues","title":"Training neural networks","text":"Ensuring convergence can tricky training neural networks. training sensitive combination learning rate (much weights updated optimization step), batch size (random subset data used optimization step), number epochs (number optimization steps).","code":""},{"path":"/articles/B-Training_neural_networks.html","id":"epochs","dir":"Articles","previous_headings":"Convergence issues","what":"Epochs","title":"Training neural networks","text":"Give neural network enough time learn. epochs high enough training loss “stabilizes”:  10 epochs loss still decreasing, train model longer (increase epochs):  , takes around 190-200 epochs loss doesn’t decrease anymore. “speed” learning depends also learning rate. Higher rates means larger steps direction local minima loss function:  Now takes 100 epochs, also see training loss becomes wobbly. Larger learning rates increase probability local minima skipped optimizer problems hit minima. Note: learning rate high, high, loss get “jumpy”, risk optimizer jumping local minima increases (see next section).","code":"m = dnn(Species~., data = iris, epochs = 10L, loss = \"softmax\", verbose=FALSE) m = dnn(Species~., data = iris, epochs = 200L, loss = \"softmax\", verbose=FALSE) m = dnn(Species~., data = iris, epochs = 200L, loss = \"softmax\", lr = 0.05, verbose=FALSE)"},{"path":"/articles/B-Training_neural_networks.html","id":"learning-rate","dir":"Articles","previous_headings":"Convergence issues","what":"Learning rate","title":"Training neural networks","text":"Typically, learning rate decreased size neural networks (depth network width hidden layers). provide baseline loss (intercept model) can give hints appropriate learning rate.  training loss model doesn’t fall baseline loss, learning rate either high low. happens, try higher lower learning rates. common strategy try (manually) different learning rates see learning rate right scale.","code":"nn.fit_good<- dnn(Species~., data = datasets::iris, lr = 0.09, epochs = 20L, loss = \"softmax\", verbose = FALSE, plot = FALSE) nn.fit_high<- dnn(Species~., data = datasets::iris, lr = 2.09, epochs = 20L, loss = \"softmax\", verbose = FALSE, plot = FALSE) nn.fit_low<- dnn(Species~., data = datasets::iris, lr = 0.00000001, epochs = 20L, loss = \"softmax\", verbose = FALSE, plot = FALSE)  par(mfrow = c(1, 3), mar = c(4, 3, 2, 2)) cito:::visualize.training(nn.fit_good$losses,main=\"Training loss\", epoch = 20, new = TRUE, baseline = nn.fit_good$base_loss) cito:::visualize.training(nn.fit_high$losses,main=\"Training loss\", epoch = 20, new = TRUE, baseline = nn.fit_good$base_loss) cito:::visualize.training(nn.fit_low$losses,main=\"Training loss\", epoch = 20, new = TRUE, baseline = nn.fit_good$base_loss)"},{"path":"/articles/B-Training_neural_networks.html","id":"solution-learning-rate-scheduler","dir":"Articles","previous_headings":"Convergence issues","what":"Solution: learning rate scheduler","title":"Training neural networks","text":"common strategy deal learning rate problem start high learning rate, loss decrease, learning rate reduced according specific plan. favor “reduce learning rate plateau” scheduler. loss plateau isn’t resolved certain number epochs (patience), learning rate reduced (\\(lr_{new} = factor * lr_{old}\\)):  end training, learning rate 0.025 Note: learning rate scheduler powerful approach improve likeliness convergence, help much high learning rates!  Although learning rate ended 0.01562, loss never outperformed baseline loss. optimizer jumped right beginning completely unrealistic solution space parameters NN, recover.","code":"nn.fit_high<- dnn(Species~., data = datasets::iris,                   lr = 0.2,                   epochs = 60L,                   loss = \"softmax\",                   lr_scheduler = config_lr_scheduler(\"reduce_on_plateau\", patience = 5, factor = 0.5),                   verbose = TRUE,                   plot = TRUE) #> Loss at epoch 1: 0.868813, lr: 0.20000 #> Loss at epoch 2: 0.607227, lr: 0.20000 #> Loss at epoch 3: 1.129801, lr: 0.20000 #> Loss at epoch 4: 0.498109, lr: 0.20000 #> Loss at epoch 5: 0.427480, lr: 0.20000 #> Loss at epoch 6: 0.505962, lr: 0.20000 #> Loss at epoch 7: 0.423542, lr: 0.20000 #> Loss at epoch 8: 0.398008, lr: 0.20000 #> Loss at epoch 9: 0.415886, lr: 0.20000 #> Loss at epoch 10: 0.310365, lr: 0.20000 #> Loss at epoch 11: 0.364727, lr: 0.20000 #> Loss at epoch 12: 0.405762, lr: 0.20000 #> Loss at epoch 13: 0.371685, lr: 0.20000 #> Loss at epoch 14: 0.606758, lr: 0.20000 #> Loss at epoch 15: 0.494564, lr: 0.20000 #> Loss at epoch 16: 0.386717, lr: 0.10000 #> Loss at epoch 17: 0.247253, lr: 0.10000 #> Loss at epoch 18: 0.196016, lr: 0.10000 #> Loss at epoch 19: 0.216442, lr: 0.10000 #> Loss at epoch 20: 0.229231, lr: 0.10000 #> Loss at epoch 21: 0.147426, lr: 0.10000 #> Loss at epoch 22: 0.168880, lr: 0.10000 #> Loss at epoch 23: 0.290900, lr: 0.10000 #> Loss at epoch 24: 0.279733, lr: 0.10000 #> Loss at epoch 25: 0.181382, lr: 0.10000 #> Loss at epoch 26: 0.274826, lr: 0.10000 #> Loss at epoch 27: 0.122269, lr: 0.10000 #> Loss at epoch 28: 0.278979, lr: 0.10000 #> Loss at epoch 29: 0.145546, lr: 0.10000 #> Loss at epoch 30: 0.232280, lr: 0.10000 #> Loss at epoch 31: 0.360600, lr: 0.10000 #> Loss at epoch 32: 0.133818, lr: 0.10000 #> Loss at epoch 33: 0.133925, lr: 0.05000 #> Loss at epoch 34: 0.117416, lr: 0.05000 #> Loss at epoch 35: 0.097019, lr: 0.05000 #> Loss at epoch 36: 0.095766, lr: 0.05000 #> Loss at epoch 37: 0.085271, lr: 0.05000 #> Loss at epoch 38: 0.081865, lr: 0.05000 #> Loss at epoch 39: 0.087199, lr: 0.05000 #> Loss at epoch 40: 0.086238, lr: 0.05000 #> Loss at epoch 41: 0.115600, lr: 0.05000 #> Loss at epoch 42: 0.101273, lr: 0.05000 #> Loss at epoch 43: 0.081162, lr: 0.05000 #> Loss at epoch 44: 0.093478, lr: 0.05000 #> Loss at epoch 45: 0.078520, lr: 0.05000 #> Loss at epoch 46: 0.112726, lr: 0.05000 #> Loss at epoch 47: 0.112692, lr: 0.05000 #> Loss at epoch 48: 0.093684, lr: 0.05000 #> Loss at epoch 49: 0.100669, lr: 0.05000 #> Loss at epoch 50: 0.081393, lr: 0.05000 #> Loss at epoch 51: 0.110707, lr: 0.02500 #> Loss at epoch 52: 0.079502, lr: 0.02500 #> Loss at epoch 53: 0.074759, lr: 0.02500 #> Loss at epoch 54: 0.071895, lr: 0.02500 #> Loss at epoch 55: 0.071452, lr: 0.02500 #> Loss at epoch 56: 0.072424, lr: 0.02500 #> Loss at epoch 57: 0.073547, lr: 0.02500 #> Loss at epoch 58: 0.073571, lr: 0.02500 #> Loss at epoch 59: 0.075333, lr: 0.02500 #> Loss at epoch 60: 0.071900, lr: 0.02500 nn.fit_high<- dnn(Species~., data = datasets::iris,                   lr = 2,                   epochs = 60L,                   loss = \"softmax\",                   lr_scheduler = config_lr_scheduler(\"reduce_on_plateau\", patience = 5, factor = 0.5),                   verbose = TRUE,                   plot = TRUE) #> Loss at epoch 1: 782.251417, lr: 2.00000 #> Loss at epoch 2: 3298.952477, lr: 2.00000 #> Loss at epoch 3: 258.680795, lr: 2.00000 #> Loss at epoch 4: 90.482500, lr: 2.00000 #> Loss at epoch 5: 25.033280, lr: 2.00000 #> Loss at epoch 6: 14.902886, lr: 2.00000 #> Loss at epoch 7: 14.502181, lr: 2.00000 #> Loss at epoch 8: 11.076120, lr: 2.00000 #> Loss at epoch 9: 12.562866, lr: 2.00000 #> Loss at epoch 10: 11.093193, lr: 2.00000 #> Loss at epoch 11: 9.510224, lr: 2.00000 #> Loss at epoch 12: 12.989465, lr: 2.00000 #> Loss at epoch 13: 13.282229, lr: 2.00000 #> Loss at epoch 14: 9.262714, lr: 2.00000 #> Loss at epoch 15: 9.705650, lr: 2.00000 #> Loss at epoch 16: 14.090702, lr: 2.00000 #> Loss at epoch 17: 12.523569, lr: 2.00000 #> Loss at epoch 18: 12.015066, lr: 2.00000 #> Loss at epoch 19: 14.319363, lr: 2.00000 #> Loss at epoch 20: 9.328203, lr: 1.00000 #> Loss at epoch 21: 7.450138, lr: 1.00000 #> Loss at epoch 22: 5.726156, lr: 1.00000 #> Loss at epoch 23: 5.152872, lr: 1.00000 #> Loss at epoch 24: 6.538125, lr: 1.00000 #> Loss at epoch 25: 4.690747, lr: 1.00000 #> Loss at epoch 26: 4.736277, lr: 1.00000 #> Loss at epoch 27: 6.920749, lr: 1.00000 #> Loss at epoch 28: 6.986071, lr: 1.00000 #> Loss at epoch 29: 4.831617, lr: 1.00000 #> Cancel training because loss is still above baseline, please hyperparameters. See vignette('B-Training_neural_networks') for help."},{"path":"/articles/B-Training_neural_networks.html","id":"overfitting","dir":"Articles","previous_headings":"","what":"Overfitting","title":"Training neural networks","text":"Overfitting means model fits training data well, generalizes poorly new observations. can use validation argument detect overfitting. validation loss starts increase certain point, often means models starting overfit training data:  Solutions: Re-train epochs = point model started overfit Early stopping, stop training model starts overfit, can specified using ⁠early_stopping=…⁠ argument Use regularization (dropout elastic-net, see next section)","code":"library(EcoData) # can be install from github using devtools::install_github(repo = \"TheoreticalEcology/EcoData\", dependencies = FALSE, build_vignettes = FALSE) df = elephant$occurenceData m = dnn(Presence~., data = df, lr = 0.03, epochs = 600L, loss = \"binomial\", validation = 0.2,  hidden = c(350L, 350L, 350L), activation = \"relu\", batchsize = 150L, verbose = FALSE, plot = TRUE)"},{"path":"/articles/B-Training_neural_networks.html","id":"early-stopping-and-regularization","dir":"Articles","previous_headings":"Overfitting","what":"Early stopping and regularization","title":"Training neural networks","text":"Early stopping = stop training validation loss improved x epochs (validation split, training loss used). lambda = 0.001 regularization strength alpha = 0.2 means 20% L1 80% L2 weighting.  training aborted!","code":"m = dnn(Presence~., data = df, lr = 0.03, epochs = 600L, loss = \"binomial\", validation = 0.2,  hidden = c(350L, 350L, 350L), activation = \"relu\", batchsize = 150L, verbose = FALSE, plot = TRUE, early_stopping = 10, lambda = 0.001, alpha = 0.2)"},{"path":"/articles/C-Example_Species_distribution_modeling.html","id":"species-distribution-model---african-elephant","dir":"Articles","previous_headings":"","what":"Species distribution model - African elephant","title":"Example: (Multi-) Species distribution models with cito","text":"goal build SDM African elephant. pre-processed dataset Angelov, 2020 can found EcoData package available github: Presence response variable 19 bioclim variables features/predictors. Let’s split part data away can use end evaluate model:","code":"set.seed(1337) if(!require(EcoData)) devtools::install_github(repo = \"TheoreticalEcology/EcoData\",                          dependencies = FALSE, build_vignettes = FALSE)  library(EcoData) df = EcoData::elephant$occurenceData head(df) #>       Presence       bio1       bio2       bio3       bio4        bio5       bio6       bio7       bio8       bio9       bio10       bio11      bio12 #> 3364         0 -0.4981747 -0.2738045  0.5368968 -0.5409999 -0.36843571  0.2947850 -0.5260099 -1.2253960  0.2494100 -0.64527314 -0.06267842  0.6285371 #> 6268         0  0.6085908 -0.5568352  1.0340686 -1.2492050 -0.11835651  0.8221087 -0.8938475  0.4233787  0.7746249  0.09168503  0.94419518  1.1121516 #> 10285        0 -0.7973005  1.4648130 -1.0540532  2.0759423  0.07614953 -1.5860029  1.6284678  0.2768209 -1.5153122 -0.03648161 -1.44165748 -1.2351482 #> 2247         0  0.6385034  1.3435141 -0.1591439 -0.5107148  1.10425291 -0.1622288  0.8577603  0.4600181  0.5855475  0.54026827  0.68153250  0.5951165 #> 9821         0  0.6684160 -0.6781341  0.6363311 -0.9906170  0.15950927  0.9099960 -0.8062671  0.3867393  0.8586593  0.31597665  0.94419518  1.1003561 #> 1351         0  0.9675418 -0.6781341 -0.3580126 -0.3748202  0.77081398  0.8748411 -0.3858812  0.3134604  1.0477367  0.98885151  0.94419518  0.7287986 #>            bio13       bio14        bio15      bio16      bio17       bio18       bio19 #> 3364   0.6807958 -0.29703736 -0.008455252  0.7124535 -0.2949994 -1.06812752  1.96201807 #> 6268   0.5918442  0.01619202 -0.884507980  0.5607328  0.3506918  1.22589281 -0.36205814 #> 10285 -1.3396742 -0.50585695  0.201797403 -1.3499999 -0.5616980 -0.42763181 -0.62895735 #> 2247   0.8714061 -0.55806185  0.236839512  1.1012378 -0.5616980 -0.20541902 -0.58378979 #> 9821   0.5537222  0.59044589 -1.024676416  0.6413344  0.7437213  0.06254347 -0.05409751 #> 1351   1.1255533 -0.50585695  0.236839512  1.2956300 -0.4494038 -0.90473576  2.47939193 indices = sample.int(nrow(df), 300) test = df[indices,] df = df[-indices,]"},{"path":"/articles/C-Example_Species_distribution_modeling.html","id":"adjusting-optimization-parameters---convergence","dir":"Articles","previous_headings":"Species distribution model - African elephant","what":"Adjusting optimization parameters - Convergence","title":"Example: (Multi-) Species distribution models with cito","text":"first try simple DNN default values binomial likelihood. use 30% data validation holdout check overfitting:  see training test losses still decreasing means didn’t train model long enough. now either increase number epochs increase learning rate model trains faster:  Much better! still now enough epochs. Also, let’s see can decrease loss using wider deeper neural network:  end training, losses start get jumpy, can sign potential overfitting. can control adding weak regularization (want L2 regularization, set alpha 1.0):  turn now advanced features help convergence reduce overfitting: learning rate scheduler - reduces learning rate training early stopping - stop training validation loss starts increase  Great! found now model architecture training procedure fits trains well. Let’s proceed final model","code":"library(cito) model = dnn(Presence~., data = df,             batchsize = 100L,             validation = 0.3, loss = \"binomial\",             verbose = FALSE) model = dnn(Presence~., data = df,             batchsize = 100L,             lr = 0.05,             validation = 0.3, loss = \"binomial\",             verbose = FALSE) model = dnn(Presence~., data = df,             batchsize = 100L,             hidden = c(100L, 100L, 100L),             lr = 0.05,             validation = 0.3, loss = \"binomial\",             verbose = FALSE) model = dnn(Presence~., data = df,             batchsize = 100L,             epochs = 150L,             hidden = c(100L, 100L, 100L),             lr = 0.05,             lambda = 0.001,             alpha = 1.0,             validation = 0.3, loss = \"binomial\",             verbose = FALSE) model = dnn(Presence~., data = df,             batchsize = 100L,             epochs = 150L,             hidden = c(100L, 100L, 100L),             lr = 0.05,             lambda = 0.001,             alpha = 1.0,             validation = 0.3, loss = \"binomial\",             verbose = FALSE,             lr_scheduler = config_lr_scheduler(\"reduce_on_plateau\", patience = 7), # reduce learning rate each 7 epochs if the validation loss didn't decrease,             early_stopping = 14 # stop training when validation loss didn't decrease for 10 epochs             )"},{"path":"/articles/C-Example_Species_distribution_modeling.html","id":"train-final-model-with-bootstrapping-to-obtain-uncertainties","dir":"Articles","previous_headings":"Species distribution model - African elephant","what":"Train final model with bootstrapping to obtain uncertainties","title":"Example: (Multi-) Species distribution models with cito","text":"haven’t directly started bootstrapping complicates adjustment training procedure. Uncertainties can obtained using bootstrapping. aware can computational expensive:","code":"model_boot = dnn(Presence~., data = df,                  batchsize = 100L,                  epochs = 150L,                  hidden = c(100L, 100L, 100L),                  lr = 0.05,                  lambda = 0.001,                  alpha = 1.0,                  validation = 0.3, loss = \"binomial\",                  verbose = FALSE,                  lr_scheduler = config_lr_scheduler(\"reduce_on_plateau\", patience = 7), # reduce learning rate each 7 epochs if the validation loss didn't decrease,                  early_stopping = 14, # stop training when validation loss didn't decrease for 10 epochs                  bootstrap = 20L,                  bootstrap_parallel = 5L             )"},{"path":"/articles/C-Example_Species_distribution_modeling.html","id":"predictions","dir":"Articles","previous_headings":"Species distribution model - African elephant","what":"Predictions","title":"Example: (Multi-) Species distribution models with cito","text":"can use model now predictions: predictions 2/3 dimensional bootstrapping. Calculate AUC interval:  can now predict habitat suitability elephant (Note spatial dependencies required):  Moreover, can visualize uncertainty model, instead calculating average occurrence probability, calculate prediction standard deviation visualize :","code":"predictions = predict(model_boot, newdata = test, reduce = \"none\") dim(predictions) #> [1]  20 300   1 hist(sapply(1:20, function(i) Metrics::auc(test$Presence, predictions[i,,])),      xlim = c(0, 1), main = \"AUC of ensemble model\", xlab = \"AUC\") library(raster) library(sp) library(rsample) library(latticeExtra) library(sp) library(ggplot2) library(maptools) customPredictFun = function(model, data) {   return(apply(predict(model, data, reduce = \"none\"), 2:3, mean)[,1]) }  normalized_raster = EcoData::elephant$predictionData  predictions =   raster::predict(normalized_raster,                   model_boot,                   fun = customPredictFun)  habitat_plot =   spplot(predictions, colorkey = list(space = \"left\") ) habitat_plot customPredictFun_sd = function(model, data) {   return(apply(predict(model, data, reduce=\"none\"), 2:3, sd)[,1]) } predictions =   raster::predict(normalized_raster,                   model_boot,                   fun = customPredictFun_sd)  uncertain_plot =   spplot(predictions, colorkey = list(space = \"left\") ) uncertain_plot"},{"path":"/articles/C-Example_Species_distribution_modeling.html","id":"inference","dir":"Articles","previous_headings":"Species distribution model - African elephant","what":"Inference","title":"Example: (Multi-) Species distribution models with cito","text":"Neural networks often called black-box models tools explainable AI (xAI) allows us understand - actually infer properties similar linear regression model can provide (calculation can take time…): Bioclim9, 12, 14, 16 large significant average conditional effects ($\\approx$ linear effects). can visualize using accumulated local effect plots:","code":"results = summary(model_boot) results #> Summary of Deep Neural Network Model #>  #> ── Feature Importance #>          Importance Std.Err Z value Pr(>|z|)    #> bio1 →        0.519   0.340    1.52   0.1276    #> bio2 →        0.481   0.202    2.38   0.0171 *  #> bio3 →        0.775   0.442    1.75   0.0793 .  #> bio4 →        0.839   0.507    1.66   0.0979 .  #> bio5 →        0.549   0.341    1.61   0.1073    #> bio6 →        0.582   0.342    1.70   0.0882 .  #> bio7 →        0.484   0.347    1.39   0.1637    #> bio8 →        0.625   0.273    2.29   0.0221 *  #> bio9 →        1.716   1.081    1.59   0.1123    #> bio10 →       0.390   0.179    2.18   0.0293 *  #> bio11 →       0.507   0.183    2.77   0.0056 ** #> bio12 →       1.068   0.456    2.34   0.0192 *  #> bio13 →       0.352   0.183    1.92   0.0548 .  #> bio14 →       0.693   0.524    1.32   0.1864    #> bio15 →       0.870   0.380    2.29   0.0219 *  #> bio16 →       1.924   1.333    1.44   0.1489    #> bio17 →       0.243   0.105    2.33   0.0200 *  #> bio18 →       1.056   0.434    2.44   0.0148 *  #> bio19 →       0.333   0.151    2.20   0.0275 *  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ── Average Conditional Effects #>               ACE  Std.Err Z value Pr(>|z|)    #> bio1 →    0.03563  0.03647    0.98   0.3286    #> bio2 →   -0.04601  0.02054   -2.24   0.0251 *  #> bio3 →   -0.04048  0.02259   -1.79   0.0732 .  #> bio4 →    0.02863  0.03175    0.90   0.3672    #> bio5 →    0.04327  0.02822    1.53   0.1252    #> bio6 →    0.04528  0.03452    1.31   0.1896    #> bio7 →   -0.01664  0.02889   -0.58   0.5647    #> bio8 →   -0.00863  0.02716   -0.32   0.7508    #> bio9 →   -0.10926  0.04079   -2.68   0.0074 ** #> bio10 →   0.01877  0.03082    0.61   0.5425    #> bio11 →   0.00514  0.03220    0.16   0.8731    #> bio12 →  -0.07351  0.03605   -2.04   0.0414 *  #> bio13 →   0.02796  0.02282    1.23   0.2204    #> bio14 →   0.09733  0.03970    2.45   0.0142 *  #> bio15 →  -0.02168  0.02395   -0.91   0.3654    #> bio16 →  -0.10478  0.03290   -3.18   0.0014 ** #> bio17 →   0.02834  0.02008    1.41   0.1583    #> bio18 →   0.03677  0.02043    1.80   0.0720 .  #> bio19 →  -0.02506  0.02161   -1.16   0.2462    #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ── Standard Deviation of Conditional Effects #>             ACE Std.Err Z value Pr(>|z|)     #> bio1 →   0.1040  0.0284    3.66  0.00025 *** #> bio2 →   0.1059  0.0251    4.22  2.5e-05 *** #> bio3 →   0.1095  0.0272    4.03  5.5e-05 *** #> bio4 →   0.1136  0.0331    3.43  0.00060 *** #> bio5 →   0.1047  0.0320    3.28  0.00105 **  #> bio6 →   0.0964  0.0331    2.91  0.00362 **  #> bio7 →   0.0770  0.0246    3.13  0.00175 **  #> bio8 →   0.1147  0.0210    5.46  4.8e-08 *** #> bio9 →   0.1606  0.0482    3.33  0.00086 *** #> bio10 →  0.0885  0.0244    3.63  0.00029 *** #> bio11 →  0.1071  0.0213    5.04  4.7e-07 *** #> bio12 →  0.1360  0.0302    4.50  6.9e-06 *** #> bio13 →  0.0855  0.0244    3.50  0.00046 *** #> bio14 →  0.1611  0.0577    2.79  0.00520 **  #> bio15 →  0.0978  0.0186    5.26  1.4e-07 *** #> bio16 →  0.1732  0.0427    4.05  5.1e-05 *** #> bio17 →  0.0852  0.0196    4.36  1.3e-05 *** #> bio18 →  0.1951  0.0324    6.02  1.7e-09 *** #> bio19 →  0.0838  0.0172    4.86  1.2e-06 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 par(mfrow = c(1, 4)) ALE(model_boot, variable = \"bio9\") ALE(model_boot, variable = \"bio12\") ALE(model_boot, variable = \"bio14\") ALE(model_boot, variable = \"bio16\")"},{"path":"/articles/C-Example_Species_distribution_modeling.html","id":"multi-species-distribution-model","dir":"Articles","previous_headings":"","what":"Multi-species distribution model","title":"Example: (Multi-) Species distribution models with cito","text":"Cito supports many different loss functions can use build multi-species distribution models (MSDM). MSDM multi-label, .e. model predict simultaneously many responses. use eucalypts data Pollock et al., 2014. dataset occurrence 12 species 458 sites. Bring data format usable cito: use binomial likelihood - species occurrence data modelled binomial likelihood. Build simple model:  Plot model:  NN now 12 output nodes, one species.","code":"load(url(\"https://github.com/TheoreticalEcology/s-jSDM/raw/master/sjSDM/data/eucalypts.rda\")) # Environment head(eucalypts$env) #>   Rockiness Sandiness VallyBotFlat PPTann Loaminess cvTemp      T0 #> 1        60         1            0    785         0    142 6124.01 #> 2        75         1            0    785         0    142 6124.01 #> 3        70         1            0    780         0    142 3252.96 #> 4        40         1            0    778         0    142 1636.63 #> 5        15         1            0    772         0    142 1352.08 #> 6        80         1            0    841         0    142 5018.48  # PA head(eucalypts$PA) #>      ALA ARE BAX CAM GON MEL OBL OVA WIL ALP VIM ARO.SAB #> [1,]   0   0   0   0   0   0   0   0   1   1   0       0 #> [2,]   0   0   0   0   0   0   1   0   1   1   0       0 #> [3,]   0   0   1   0   0   0   0   0   1   1   0       0 #> [4,]   0   0   1   0   0   0   0   0   1   0   0       0 #> [5,]   0   0   1   0   0   0   1   0   0   0   0       0 #> [6,]   0   0   0   0   0   0   0   0   1   1   0       0 df = cbind(eucalypts$PA, scale(eucalypts$env)) head(df) #>      ALA ARE BAX CAM GON MEL OBL OVA WIL ALP VIM ARO.SAB  Rockiness Sandiness VallyBotFlat       PPTann  Loaminess    cvTemp         T0 #> [1,]   0   0   0   0   0   0   0   0   1   1   0       0  1.0315338 0.5716827   -0.5939667 -0.005981517 -0.2134535 -1.056073  0.5378148 #> [2,]   0   0   0   0   0   0   1   0   1   1   0       0  1.4558834 0.5716827   -0.5939667 -0.005981517 -0.2134535 -1.056073  0.5378148 #> [3,]   0   0   1   0   0   0   0   0   1   1   0       0  1.3144335 0.5716827   -0.5939667 -0.045456081 -0.2134535 -1.056073 -0.3404551 #> [4,]   0   0   1   0   0   0   0   0   1   0   0       0  0.4657344 0.5716827   -0.5939667 -0.061245907 -0.2134535 -1.056073 -0.8348993 #> [5,]   0   0   1   0   0   0   1   0   0   0   0       0 -0.2415148 0.5716827   -0.5939667 -0.108615385 -0.2134535 -1.056073 -0.9219447 #> [6,]   0   0   0   0   0   0   0   0   1   1   0       0  1.5973333 0.5716827   -0.5939667  0.436133605 -0.2134535 -1.056073  0.1996271 model = dnn(cbind(ALA, ARE, BAX, CAM, GON, MEL, OBL, OVA, WIL, ALP, VIM, ARO.SAB)~.,             data = df,             lr = 0.1,             verbose = FALSE,             loss = \"binomial\") plot(model) head(predict(model)) #>           [,1]      [,2]        [,3]      [,4]      [,5]      [,6]        [,7]      [,8]       [,9]      [,10]     [,11]     [,12] #> [1,] -1.946043 -3.670648  0.37782085 -4.861333 -4.125144 -2.968839 -0.94163764 -4.436732 -0.7886785 -0.9779580 -3.598855 -2.911928 #> [2,] -1.628756 -3.361437  0.07032853 -5.203188 -3.702430 -3.160629 -1.26876736 -4.794323 -1.1171856 -0.3598964 -3.970761 -3.538618 #> [3,] -1.955254 -3.792130  0.20341921 -5.260411 -4.135300 -3.265577 -1.14787960 -4.860140 -0.9366873 -0.7705419 -3.988610 -3.320937 #> [4,] -2.757299 -4.635928  0.75516909 -4.703501 -5.214269 -3.009679 -0.52837741 -4.233300 -0.3579682 -2.2619901 -3.367687 -2.144249 #> [5,] -3.451557 -5.391349  1.07802486 -4.150752 -6.336981 -2.739220 -0.07294691 -3.689935  0.0051063 -3.5920491 -2.808322 -1.043708 #> [6,] -1.622271 -3.574191 -0.11181535 -5.837625 -3.900543 -3.567721 -1.51196790 -5.443764 -1.3404803  0.0549444 -4.501054 -4.139803"},{"path":"/articles/C-Example_Species_distribution_modeling.html","id":"train-model-with-bootstrapping","dir":"Articles","previous_headings":"Multi-species distribution model","what":"Train model with bootstrapping","title":"Example: (Multi-) Species distribution models with cito","text":"haven’t really adjusted training procedure, let’s check convergence first:","code":"model_boot = dnn(cbind(ALA, ARE, BAX, CAM, GON, MEL, OBL, OVA, WIL, ALP, VIM, ARO.SAB)~.,                  data = df,                  loss = \"binomial\",                                   epochs = 200L,                  hidden = c(50L, 50L),                  batchsize = 50L,                  lr = 0.1,                  lambda = 0.001,                  alpha = 1.0,                  validation = 0.2,                  verbose = FALSE,                  lr_scheduler = config_lr_scheduler(\"reduce_on_plateau\", patience = 7), # reduce learning rate each 7 epochs if the validation loss didn't decrease,                  early_stopping = 14, # stop training when validation loss didn't decrease for 10 epochs                  bootstrap = 20L,                  bootstrap_parallel = 5L) analyze_training(model_boot)"},{"path":"/articles/C-Example_Species_distribution_modeling.html","id":"inference-1","dir":"Articles","previous_headings":"Multi-species distribution model","what":"Inference","title":"Example: (Multi-) Species distribution models with cito","text":"cvTemp significant many species. Visualization effect:","code":"results = summary(model_boot) results #> Summary of Deep Neural Network Model #>  #> ── Feature Importance #>                        Importance Std.Err Z value Pr(>|z|)     #> Rockiness → ALA           0.11286 0.06659    1.69  0.09013 .   #> Sandiness → ALA           0.01438 0.01642    0.88  0.38102     #> VallyBotFlat → ALA        0.07613 0.03573    2.13  0.03312 *   #> PPTann → ALA              0.04908 0.01883    2.61  0.00913 **  #> Loaminess → ALA           0.01571 0.00779    2.02  0.04380 *   #> cvTemp → ALA              0.06628 0.03240    2.05  0.04081 *   #> T0 → ALA                  0.03603 0.03359    1.07  0.28345     #>                                                                #> Rockiness → ARE           0.08656 0.04479    1.93  0.05330 .   #> Sandiness → ARE           0.03791 0.02584    1.47  0.14229     #> VallyBotFlat → ARE        0.07793 0.04800    1.62  0.10446     #> PPTann → ARE              0.10784 0.08581    1.26  0.20882     #> Loaminess → ARE           0.03539 0.02141    1.65  0.09836 .   #> cvTemp → ARE              1.12350 0.32904    3.41  0.00064 *** #> T0 → ARE                  0.07027 0.04535    1.55  0.12129     #>                                                                #> Rockiness → BAX           0.08236 0.03388    2.43  0.01506 *   #> Sandiness → BAX           0.09753 0.03944    2.47  0.01340 *   #> VallyBotFlat → BAX        0.16518 0.04125    4.00  6.2e-05 *** #> PPTann → BAX              0.04089 0.01457    2.81  0.00500 **  #> Loaminess → BAX           0.00900 0.00635    1.42  0.15605     #> cvTemp → BAX              0.22186 0.07316    3.03  0.00243 **  #> T0 → BAX                  0.01278 0.00781    1.64  0.10173     #>                                                                #> Rockiness → CAM           0.06070 0.04026    1.51  0.13160     #> Sandiness → CAM           0.21651 0.07923    2.73  0.00628 **  #> VallyBotFlat → CAM        0.32253 0.14807    2.18  0.02939 *   #> PPTann → CAM              0.05370 0.02569    2.09  0.03662 *   #> Loaminess → CAM           0.03572 0.02543    1.40  0.16009     #> cvTemp → CAM              0.05964 0.01467    4.06  4.8e-05 *** #> T0 → CAM                  0.02342 0.02281    1.03  0.30441     #>                                                                #> Rockiness → GON           0.38192 0.15210    2.51  0.01204 *   #> Sandiness → GON           0.03712 0.03254    1.14  0.25400     #> VallyBotFlat → GON        0.12841 0.06226    2.06  0.03918 *   #> PPTann → GON              0.29667 0.18920    1.57  0.11687     #> Loaminess → GON           0.05948 0.03880    1.53  0.12524     #> cvTemp → GON              2.40360 1.02325    2.35  0.01882 *   #> T0 → GON                  0.09493 0.06313    1.50  0.13268     #>                                                                #> Rockiness → MEL           0.13064 0.05805    2.25  0.02442 *   #> Sandiness → MEL           0.02030 0.01802    1.13  0.26006     #> VallyBotFlat → MEL        0.03257 0.01348    2.42  0.01564 *   #> PPTann → MEL              0.07856 0.02778    2.83  0.00468 **  #> Loaminess → MEL           0.02654 0.01433    1.85  0.06403 .   #> cvTemp → MEL              0.06843 0.02920    2.34  0.01911 *   #> T0 → MEL                  0.01325 0.01654    0.80  0.42327     #>                                                                #> Rockiness → OBL           0.11849 0.05061    2.34  0.01921 *   #> Sandiness → OBL           0.02803 0.01357    2.06  0.03893 *   #> VallyBotFlat → OBL        0.08064 0.04413    1.83  0.06765 .   #> PPTann → OBL              0.03564 0.01963    1.82  0.06938 .   #> Loaminess → OBL           0.04208 0.02873    1.46  0.14308     #> cvTemp → OBL              0.23240 0.10248    2.27  0.02335 *   #> T0 → OBL                  0.01138 0.01070    1.06  0.28742     #>                                                                #> Rockiness → OVA           0.08659 0.03503    2.47  0.01344 *   #> Sandiness → OVA           0.13489 0.05371    2.51  0.01202 *   #> VallyBotFlat → OVA        0.13749 0.04899    2.81  0.00501 **  #> PPTann → OVA              0.04782 0.02411    1.98  0.04734 *   #> Loaminess → OVA           0.03219 0.02400    1.34  0.17985     #> cvTemp → OVA              0.03461 0.03626    0.95  0.33983     #> T0 → OVA                  0.01781 0.01241    1.43  0.15134     #>                                                                #> Rockiness → WIL           0.03851 0.02624    1.47  0.14228     #> Sandiness → WIL           0.03260 0.02736    1.19  0.23343     #> VallyBotFlat → WIL        0.07455 0.03421    2.18  0.02934 *   #> PPTann → WIL              0.04327 0.02261    1.91  0.05566 .   #> Loaminess → WIL           0.03116 0.04275    0.73  0.46615     #> cvTemp → WIL              0.57470 0.13153    4.37  1.2e-05 *** #> T0 → WIL                  0.01031 0.01028    1.00  0.31598     #>                                                                #> Rockiness → ALP           1.38556 0.52119    2.66  0.00785 **  #> Sandiness → ALP           0.04548 0.04099    1.11  0.26724     #> VallyBotFlat → ALP        0.10718 0.06870    1.56  0.11872     #> PPTann → ALP              0.62295 0.21141    2.95  0.00321 **  #> Loaminess → ALP           0.01321 0.01419    0.93  0.35185     #> cvTemp → ALP              0.08627 0.07230    1.19  0.23277     #> T0 → ALP                  0.04823 0.02955    1.63  0.10265     #>                                                                #> Rockiness → VIM           0.08630 0.02745    3.14  0.00167 **  #> Sandiness → VIM           0.09089 0.05758    1.58  0.11444     #> VallyBotFlat → VIM        0.05370 0.02842    1.89  0.05880 .   #> PPTann → VIM              0.04705 0.02021    2.33  0.01989 *   #> Loaminess → VIM           0.03529 0.01409    2.50  0.01227 *   #> cvTemp → VIM              0.03978 0.01194    3.33  0.00087 *** #> T0 → VIM                  0.02674 0.02657    1.01  0.31419     #>                                                                #> Rockiness → ARO.SAB       0.23736 0.06424    3.69  0.00022 *** #> Sandiness → ARO.SAB       0.02608 0.01403    1.86  0.06303 .   #> VallyBotFlat → ARO.SAB    0.14835 0.06571    2.26  0.02396 *   #> PPTann → ARO.SAB          0.10365 0.05115    2.03  0.04274 *   #> Loaminess → ARO.SAB       0.00712 0.00814    0.87  0.38173     #> cvTemp → ARO.SAB          0.19058 0.07141    2.67  0.00761 **  #> T0 → ARO.SAB              0.01767 0.00984    1.80  0.07249 .   #>                                                                #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ── Average Conditional Effects #>                              ACE   Std.Err Z value Pr(>|z|)     #> Rockiness → ALA         3.17e-02  9.45e-03    3.35  0.00081 *** #> Sandiness → ALA        -6.10e-03  8.21e-03   -0.74  0.45780     #> VallyBotFlat → ALA     -1.38e-02  9.18e-03   -1.51  0.13199     #> PPTann → ALA            1.50e-02  8.58e-03    1.75  0.07953 .   #> Loaminess → ALA         3.09e-03  7.39e-03    0.42  0.67561     #> cvTemp → ALA            1.96e-02  8.19e-03    2.40  0.01657 *   #> T0 → ALA                1.62e-02  8.17e-03    1.99  0.04664 *   #>                                                                 #> Rockiness → ARE         2.10e-02  8.14e-03    2.58  0.00993 **  #> Sandiness → ARE        -4.76e-03  6.86e-03   -0.69  0.48770     #> VallyBotFlat → ARE     -5.79e-03  1.09e-02   -0.53  0.59637     #> PPTann → ARE           -8.09e-03  8.16e-03   -0.99  0.32136     #> Loaminess → ARE        -2.99e-03  8.03e-03   -0.37  0.70979     #> cvTemp → ARE            6.59e-02  1.19e-02    5.56  2.7e-08 *** #> T0 → ARE                4.65e-03  6.39e-03    0.73  0.46650     #>                                                                 #> Rockiness → BAX        -4.08e-02  2.25e-02   -1.81  0.06970 .   #> Sandiness → BAX         6.28e-02  1.82e-02    3.45  0.00056 *** #> VallyBotFlat → BAX     -7.87e-02  1.36e-02   -5.78  7.6e-09 *** #> PPTann → BAX            1.13e-02  2.19e-02    0.51  0.60682     #> Loaminess → BAX         5.42e-03  2.72e-02    0.20  0.84216     #> cvTemp → BAX           -1.25e-01  2.03e-02   -6.17  6.6e-10 *** #> T0 → BAX                2.77e-03  1.62e-02    0.17  0.86434     #>                                                                 #> Rockiness → CAM        -7.60e-03  8.14e-03   -0.93  0.35062     #> Sandiness → CAM        -3.03e-02  6.06e-03   -5.00  5.8e-07 *** #> VallyBotFlat → CAM      3.95e-02  8.35e-03    4.72  2.3e-06 *** #> PPTann → CAM           -1.13e-02  8.21e-03   -1.38  0.16717     #> Loaminess → CAM         3.56e-03  8.81e-03    0.40  0.68623     #> cvTemp → CAM            7.39e-03  9.20e-03    0.80  0.42171     #> T0 → CAM                1.05e-03  6.36e-03    0.17  0.86820     #>                                                                 #> Rockiness → GON         3.12e-02  8.11e-03    3.85  0.00012 *** #> Sandiness → GON        -4.98e-03  7.76e-03   -0.64  0.52152     #> VallyBotFlat → GON     -6.10e-03  1.18e-02   -0.52  0.60587     #> PPTann → GON           -1.21e-02  7.45e-03   -1.62  0.10541     #> Loaminess → GON        -4.21e-03  8.66e-03   -0.49  0.62698     #> cvTemp → GON            6.88e-02  1.04e-02    6.63  3.3e-11 *** #> T0 → GON               -7.75e-04  6.82e-03   -0.11  0.90950     #>                                                                 #> Rockiness → MEL        -2.49e-02  1.12e-02   -2.22  0.02670 *   #> Sandiness → MEL        -8.12e-03  7.99e-03   -1.02  0.30902     #> VallyBotFlat → MEL      1.38e-02  9.14e-03    1.51  0.13043     #> PPTann → MEL           -2.08e-02  8.30e-03   -2.51  0.01207 *   #> Loaminess → MEL         2.45e-03  9.68e-03    0.25  0.80037     #> cvTemp → MEL            1.55e-02  1.27e-02    1.22  0.22140     #> T0 → MEL                1.27e-02  7.99e-03    1.59  0.11241     #>                                                                 #> Rockiness → OBL        -6.22e-02  2.39e-02   -2.61  0.00918 **  #> Sandiness → OBL        -1.65e-02  1.44e-02   -1.14  0.25306     #> VallyBotFlat → OBL     -2.04e-02  1.96e-02   -1.04  0.29878     #> PPTann → OBL           -1.32e-02  1.68e-02   -0.79  0.43052     #> Loaminess → OBL         4.48e-02  1.89e-02    2.37  0.01761 *   #> cvTemp → OBL           -1.18e-01  2.90e-02   -4.07  4.7e-05 *** #> T0 → OBL                2.69e-03  1.37e-02    0.20  0.84448     #>                                                                 #> Rockiness → OVA        -9.60e-03  7.45e-03   -1.29  0.19780     #> Sandiness → OVA        -2.44e-02  6.39e-03   -3.82  0.00013 *** #> VallyBotFlat → OVA      2.78e-02  7.64e-03    3.64  0.00027 *** #> PPTann → OVA           -1.04e-02  7.54e-03   -1.38  0.16876     #> Loaminess → OVA         1.75e-03  7.79e-03    0.23  0.82195     #> cvTemp → OVA            9.18e-03  1.02e-02    0.90  0.36878     #> T0 → OVA                6.18e-03  5.15e-03    1.20  0.23006     #>                                                                 #> Rockiness → WIL        -1.27e-02  1.66e-02   -0.77  0.44336     #> Sandiness → WIL         5.71e-03  1.30e-02    0.44  0.66109     #> VallyBotFlat → WIL     -1.40e-02  1.22e-02   -1.15  0.25079     #> PPTann → WIL           -1.62e-03  1.17e-02   -0.14  0.88995     #> Loaminess → WIL         2.66e-02  1.79e-02    1.49  0.13631     #> cvTemp → WIL           -1.20e-01  2.19e-02   -5.50  3.9e-08 *** #> T0 → WIL                1.98e-05  1.22e-02    0.00  0.99870     #>                                                                 #> Rockiness → ALP         6.28e-02  6.81e-03    9.22  < 2e-16 *** #> Sandiness → ALP         2.39e-03  7.32e-03    0.33  0.74417     #> VallyBotFlat → ALP     -1.39e-02  1.32e-02   -1.05  0.29437     #> PPTann → ALP            4.79e-02  7.63e-03    6.28  3.4e-10 *** #> Loaminess → ALP         5.30e-03  8.39e-03    0.63  0.52751     #> cvTemp → ALP           -8.16e-03  1.20e-02   -0.68  0.49541     #> T0 → ALP                2.40e-03  6.42e-03    0.37  0.70832     #>                                                                 #> Rockiness → VIM        -1.54e-02  8.72e-03   -1.77  0.07685 .   #> Sandiness → VIM        -2.56e-02  7.31e-03   -3.50  0.00047 *** #> VallyBotFlat → VIM      2.44e-02  6.86e-03    3.55  0.00039 *** #> PPTann → VIM           -1.12e-02  6.61e-03   -1.70  0.08979 .   #> Loaminess → VIM         2.19e-03  6.36e-03    0.34  0.73084     #> cvTemp → VIM           -5.03e-03  7.77e-03   -0.65  0.51749     #> T0 → VIM                7.72e-03  7.77e-03    0.99  0.32020     #>                                                                 #> Rockiness → ARO.SAB    -8.58e-02  2.15e-02   -3.99  6.5e-05 *** #> Sandiness → ARO.SAB    -2.07e-02  1.54e-02   -1.34  0.17872     #> VallyBotFlat → ARO.SAB  7.57e-02  1.52e-02    4.97  6.5e-07 *** #> PPTann → ARO.SAB       -4.94e-02  2.15e-02   -2.30  0.02131 *   #> Loaminess → ARO.SAB     1.34e-02  1.20e-02    1.12  0.26268     #> cvTemp → ARO.SAB       -8.22e-02  2.39e-02   -3.44  0.00057 *** #> T0 → ARO.SAB           -1.02e-02  1.24e-02   -0.82  0.41123     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ── Standard Deviation of Conditional Effects #>                            ACE Std.Err Z value Pr(>|z|)     #> Rockiness → ALA        0.02885 0.00673    4.29  1.8e-05 *** #> Sandiness → ALA        0.01701 0.00494    3.44  0.00058 *** #> VallyBotFlat → ALA     0.01607 0.00436    3.69  0.00023 *** #> PPTann → ALA           0.01990 0.00456    4.36  1.3e-05 *** #> Loaminess → ALA        0.00991 0.00315    3.15  0.00164 **  #> cvTemp → ALA           0.02611 0.00648    4.03  5.5e-05 *** #> T0 → ALA               0.01668 0.00546    3.06  0.00224 **  #>                                                             #> Rockiness → ARE        0.04648 0.00685    6.79  1.1e-11 *** #> Sandiness → ARE        0.02550 0.00445    5.73  1.0e-08 *** #> VallyBotFlat → ARE     0.02713 0.00745    3.64  0.00027 *** #> PPTann → ARE           0.03211 0.00711    4.52  6.2e-06 *** #> Loaminess → ARE        0.01604 0.00418    3.83  0.00013 *** #> cvTemp → ARE           0.06891 0.01222    5.64  1.7e-08 *** #> T0 → ARE               0.02014 0.00449    4.49  7.2e-06 *** #>                                                             #> Rockiness → BAX        0.04944 0.01052    4.70  2.6e-06 *** #> Sandiness → BAX        0.04284 0.00974    4.40  1.1e-05 *** #> VallyBotFlat → BAX     0.05593 0.00631    8.87  < 2e-16 *** #> PPTann → BAX           0.04379 0.01294    3.39  0.00071 *** #> Loaminess → BAX        0.02237 0.00648    3.45  0.00056 *** #> cvTemp → BAX           0.07349 0.01293    5.68  1.3e-08 *** #> T0 → BAX               0.02440 0.00506    4.82  1.4e-06 *** #>                                                             #> Rockiness → CAM        0.01952 0.00518    3.77  0.00016 *** #> Sandiness → CAM        0.03523 0.00591    5.96  2.5e-09 *** #> VallyBotFlat → CAM     0.04022 0.00960    4.19  2.8e-05 *** #> PPTann → CAM           0.01865 0.00649    2.87  0.00406 **  #> Loaminess → CAM        0.01661 0.00504    3.29  0.00099 *** #> cvTemp → CAM           0.02847 0.00701    4.06  4.8e-05 *** #> T0 → CAM               0.02156 0.00519    4.15  3.3e-05 *** #>                                                             #> Rockiness → GON        0.06172 0.01062    5.81  6.2e-09 *** #> Sandiness → GON        0.02732 0.00557    4.91  9.2e-07 *** #> VallyBotFlat → GON     0.03065 0.00707    4.33  1.5e-05 *** #> PPTann → GON           0.03392 0.00696    4.87  1.1e-06 *** #> Loaminess → GON        0.01788 0.00568    3.15  0.00165 **  #> cvTemp → GON           0.08644 0.01398    6.18  6.2e-10 *** #> T0 → GON               0.02224 0.00449    4.96  7.2e-07 *** #>                                                             #> Rockiness → MEL        0.02617 0.00748    3.50  0.00047 *** #> Sandiness → MEL        0.02582 0.00602    4.29  1.8e-05 *** #> VallyBotFlat → MEL     0.03015 0.00648    4.66  3.2e-06 *** #> PPTann → MEL           0.02313 0.00613    3.77  0.00016 *** #> Loaminess → MEL        0.01222 0.00341    3.59  0.00033 *** #> cvTemp → MEL           0.02928 0.00687    4.26  2.0e-05 *** #> T0 → MEL               0.01805 0.00673    2.68  0.00732 **  #>                                                             #> Rockiness → OBL        0.04990 0.01462    3.41  0.00064 *** #> Sandiness → OBL        0.03619 0.00990    3.65  0.00026 *** #> VallyBotFlat → OBL     0.05168 0.01119    4.62  3.8e-06 *** #> PPTann → OBL           0.03973 0.01126    3.53  0.00042 *** #> Loaminess → OBL        0.02951 0.01098    2.69  0.00721 **  #> cvTemp → OBL           0.07360 0.02228    3.30  0.00095 *** #> T0 → OBL               0.02441 0.00691    3.53  0.00041 *** #>                                                             #> Rockiness → OVA        0.01750 0.00419    4.17  3.0e-05 *** #> Sandiness → OVA        0.02538 0.00682    3.72  0.00020 *** #> VallyBotFlat → OVA     0.02739 0.00641    4.27  1.9e-05 *** #> PPTann → OVA           0.01602 0.00578    2.77  0.00562 **  #> Loaminess → OVA        0.01290 0.00340    3.80  0.00015 *** #> cvTemp → OVA           0.02467 0.01040    2.37  0.01773 *   #> T0 → OVA               0.01875 0.00568    3.30  0.00096 *** #>                                                             #> Rockiness → WIL        0.04211 0.00677    6.22  4.9e-10 *** #> Sandiness → WIL        0.03298 0.00738    4.47  8.0e-06 *** #> VallyBotFlat → WIL     0.04274 0.00736    5.81  6.4e-09 *** #> PPTann → WIL           0.03817 0.00986    3.87  0.00011 *** #> Loaminess → WIL        0.02753 0.01079    2.55  0.01075 *   #> cvTemp → WIL           0.09439 0.02176    4.34  1.4e-05 *** #> T0 → WIL               0.02853 0.00707    4.04  5.4e-05 *** #>                                                             #> Rockiness → ALP        0.08221 0.01477    5.57  2.6e-08 *** #> Sandiness → ALP        0.01849 0.00635    2.91  0.00360 **  #> VallyBotFlat → ALP     0.02773 0.01176    2.36  0.01831 *   #> PPTann → ALP           0.06677 0.01232    5.42  6.0e-08 *** #> Loaminess → ALP        0.01923 0.00732    2.63  0.00858 **  #> cvTemp → ALP           0.04764 0.01188    4.01  6.1e-05 *** #> T0 → ALP               0.02659 0.00785    3.39  0.00070 *** #>                                                             #> Rockiness → VIM        0.01982 0.00573    3.46  0.00053 *** #> Sandiness → VIM        0.02533 0.00584    4.34  1.4e-05 *** #> VallyBotFlat → VIM     0.02822 0.00652    4.33  1.5e-05 *** #> PPTann → VIM           0.01756 0.00496    3.54  0.00040 *** #> Loaminess → VIM        0.01190 0.00300    3.96  7.5e-05 *** #> cvTemp → VIM           0.02317 0.00510    4.54  5.6e-06 *** #> T0 → VIM               0.01986 0.00739    2.69  0.00718 **  #>                                                             #> Rockiness → ARO.SAB    0.06740 0.01771    3.81  0.00014 *** #> Sandiness → ARO.SAB    0.04663 0.00973    4.79  1.6e-06 *** #> VallyBotFlat → ARO.SAB 0.07017 0.01579    4.44  8.9e-06 *** #> PPTann → ARO.SAB       0.04950 0.01731    2.86  0.00425 **  #> Loaminess → ARO.SAB    0.02600 0.00684    3.80  0.00014 *** #> cvTemp → ARO.SAB       0.07078 0.01832    3.86  0.00011 *** #> T0 → ARO.SAB           0.03094 0.00745    4.15  3.3e-05 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ale_plots = ALE(model_boot, variable = \"cvTemp\", plot = FALSE) do.call(gridExtra::grid.arrange, ale_plots)"},{"path":"/articles/C-Example_Species_distribution_modeling.html","id":"advanced-joint-species-distribution-model","dir":"Articles","previous_headings":"","what":"Advanced: Joint species distribution model","title":"Example: (Multi-) Species distribution models with cito","text":"recent years, joint species distribution models (JSDM) emerged new class models capable jointly modeling species. JSDM account co-occurrences species explained environment alone biotic associations Pollock et al., 2014. Technically, biotic associations coded covariance matrix absorbs species co-occurrences “left ” residuals. Two common models JSDMs latent variable model Warton et al., 2015 multivariate probit model (MVP) (Pollock et al., 2014). ‘cito’ provide experimental likelihood multivariate probit model based Monte-Carlo approximation (Chen et al., 2018). However, ‘cito’ JSDM-focused package means many interesting features JSDMs community assembly analyses available ‘cito’. want perform -depth analysis JSDM reveal internal metacommunity structure recommend, example, sjSDM package:  Building covariance matrix corresponds biotic associations:  information community analyses JSDMs see vignette sjSDM package","code":"jsdm = dnn(cbind(ALA, ARE, BAX, CAM, GON, MEL, OBL, OVA, WIL, ALP, VIM, ARO.SAB)~.,             data = df,             lr = 0.1,             epochs = 200L,             verbose = FALSE,             loss = \"mvp\") L = jsdm$parameter$paramter biotic_association = cov2cor(L%*%t(L) + diag(1, 12)) fields::image.plot(biotic_association)"},{"path":"/articles/D-Advanced_custom_loss_functions.html","id":"custom-loss-functions","dir":"Articles","previous_headings":"","what":"Custom loss functions","title":"Advanced: Custom loss functions and prediction intervals","text":"can pass custom loss functions cito. R variables/values used within loss function additionally optimized must passed cito via custom_parameters argument dnn(...custom_parameters = list(name_of_parameter=...)) Examples: (Complex) likelihood functions Advanced: Quantile regression Requirements: - Complex calculations written torch - functions/calls must derivatives.","code":""},{"path":"/articles/D-Advanced_custom_loss_functions.html","id":"example-1-custom-likelihoodloss-functions","dir":"Articles","previous_headings":"Custom loss functions","what":"Example 1: Custom (likelihood/loss) functions","title":"Advanced: Custom loss functions and prediction intervals","text":"Gaussian likelihood (already implemented, still nice example). Custom parameters must passed list custom_parameters function. names must match names parameters custom loss function. values named custom parameters initial values. Cito automatically convert torch tensors:  optimized parameters saved parameter field:","code":"library(cito) library(torch) gaussian_ll = function(pred, true, ...) {   loss = -torch::distr_normal(pred, scale = torch::torch_exp(scale_par))$log_prob(true)   return(loss$mean()) }  # Simulate some data X = runif(200) Y = 2*X + rnorm(200, sd = 0.4) df = data.frame(X = X, Y = Y)  m = dnn(Y~X, data = df,         loss = gaussian_ll, # custom function         custom_parameters = list(scale_par = 0.0) # custom parameter that should be addtionally optimized         ) #> Loss at epoch 1: 1.334335, lr: 0.01000 #> Loss at epoch 2: 1.154231, lr: 0.01000 #> Loss at epoch 3: 1.068738, lr: 0.01000 #> Loss at epoch 4: 1.016910, lr: 0.01000 #> Loss at epoch 5: 0.976305, lr: 0.01000 #> Loss at epoch 6: 0.937856, lr: 0.01000 #> Loss at epoch 7: 0.899509, lr: 0.01000 #> Loss at epoch 8: 0.863034, lr: 0.01000 #> Loss at epoch 9: 0.824331, lr: 0.01000 #> Loss at epoch 10: 0.786820, lr: 0.01000 #> Loss at epoch 11: 0.749023, lr: 0.01000 #> Loss at epoch 12: 0.716187, lr: 0.01000 #> Loss at epoch 13: 0.684993, lr: 0.01000 #> Loss at epoch 14: 0.651024, lr: 0.01000 #> Loss at epoch 15: 0.630259, lr: 0.01000 #> Loss at epoch 16: 0.602878, lr: 0.01000 #> Loss at epoch 17: 0.594161, lr: 0.01000 #> Loss at epoch 18: 0.585590, lr: 0.01000 #> Loss at epoch 19: 0.572606, lr: 0.01000 #> Loss at epoch 20: 0.596161, lr: 0.01000 #> Loss at epoch 21: 0.560749, lr: 0.01000 #> Loss at epoch 22: 0.569604, lr: 0.01000 #> Loss at epoch 23: 0.557299, lr: 0.01000 #> Loss at epoch 24: 0.562676, lr: 0.01000 #> Loss at epoch 25: 0.566415, lr: 0.01000 #> Loss at epoch 26: 0.545704, lr: 0.01000 #> Loss at epoch 27: 0.563066, lr: 0.01000 #> Loss at epoch 28: 0.579306, lr: 0.01000 #> Loss at epoch 29: 0.548550, lr: 0.01000 #> Loss at epoch 30: 0.566733, lr: 0.01000 #> Loss at epoch 31: 0.602605, lr: 0.01000 #> Loss at epoch 32: 0.566520, lr: 0.01000 #> Loss at epoch 33: 0.555276, lr: 0.01000 #> Loss at epoch 34: 0.573158, lr: 0.01000 #> Loss at epoch 35: 0.553411, lr: 0.01000 #> Loss at epoch 36: 0.562307, lr: 0.01000 #> Loss at epoch 37: 0.553605, lr: 0.01000 #> Loss at epoch 38: 0.561382, lr: 0.01000 #> Loss at epoch 39: 0.542558, lr: 0.01000 #> Loss at epoch 40: 0.555270, lr: 0.01000 #> Loss at epoch 41: 0.569742, lr: 0.01000 #> Loss at epoch 42: 0.559802, lr: 0.01000 #> Loss at epoch 43: 0.561651, lr: 0.01000 #> Loss at epoch 44: 0.550025, lr: 0.01000 #> Loss at epoch 45: 0.551257, lr: 0.01000 #> Loss at epoch 46: 0.553354, lr: 0.01000 #> Loss at epoch 47: 0.548418, lr: 0.01000 #> Loss at epoch 48: 0.572100, lr: 0.01000 #> Loss at epoch 49: 0.566985, lr: 0.01000 #> Loss at epoch 50: 0.563628, lr: 0.01000 #> Loss at epoch 51: 0.565352, lr: 0.01000 #> Loss at epoch 52: 0.557491, lr: 0.01000 #> Loss at epoch 53: 0.553377, lr: 0.01000 #> Loss at epoch 54: 0.543934, lr: 0.01000 #> Loss at epoch 55: 0.591781, lr: 0.01000 #> Loss at epoch 56: 0.551933, lr: 0.01000 #> Loss at epoch 57: 0.556685, lr: 0.01000 #> Loss at epoch 58: 0.557246, lr: 0.01000 #> Loss at epoch 59: 0.550845, lr: 0.01000 #> Loss at epoch 60: 0.568086, lr: 0.01000 #> Loss at epoch 61: 0.547975, lr: 0.01000 #> Loss at epoch 62: 0.553804, lr: 0.01000 #> Loss at epoch 63: 0.550696, lr: 0.01000 #> Loss at epoch 64: 0.553359, lr: 0.01000 #> Loss at epoch 65: 0.555588, lr: 0.01000 #> Loss at epoch 66: 0.556177, lr: 0.01000 #> Loss at epoch 67: 0.548261, lr: 0.01000 #> Loss at epoch 68: 0.575579, lr: 0.01000 #> Loss at epoch 69: 0.555330, lr: 0.01000 #> Loss at epoch 70: 0.567671, lr: 0.01000 #> Loss at epoch 71: 0.550055, lr: 0.01000 #> Loss at epoch 72: 0.542451, lr: 0.01000 #> Loss at epoch 73: 0.563940, lr: 0.01000 #> Loss at epoch 74: 0.550842, lr: 0.01000 #> Loss at epoch 75: 0.562200, lr: 0.01000 #> Loss at epoch 76: 0.557705, lr: 0.01000 #> Loss at epoch 77: 0.557986, lr: 0.01000 #> Loss at epoch 78: 0.556814, lr: 0.01000 #> Loss at epoch 79: 0.560184, lr: 0.01000 #> Loss at epoch 80: 0.548673, lr: 0.01000 #> Loss at epoch 81: 0.591368, lr: 0.01000 #> Loss at epoch 82: 0.556005, lr: 0.01000 #> Loss at epoch 83: 0.544128, lr: 0.01000 #> Loss at epoch 84: 0.585111, lr: 0.01000 #> Loss at epoch 85: 0.565595, lr: 0.01000 #> Loss at epoch 86: 0.555380, lr: 0.01000 #> Loss at epoch 87: 0.553692, lr: 0.01000 #> Loss at epoch 88: 0.554190, lr: 0.01000 #> Loss at epoch 89: 0.550925, lr: 0.01000 #> Loss at epoch 90: 0.546147, lr: 0.01000 #> Loss at epoch 91: 0.550892, lr: 0.01000 #> Loss at epoch 92: 0.560193, lr: 0.01000 #> Loss at epoch 93: 0.570056, lr: 0.01000 #> Loss at epoch 94: 0.553779, lr: 0.01000 #> Loss at epoch 95: 0.558661, lr: 0.01000 #> Loss at epoch 96: 0.546044, lr: 0.01000 #> Loss at epoch 97: 0.549163, lr: 0.01000 #> Loss at epoch 98: 0.550264, lr: 0.01000 #> Loss at epoch 99: 0.549252, lr: 0.01000 #> Loss at epoch 100: 0.562601, lr: 0.01000 exp(m$parameter$scale_par) # true scale parameter: 0.4! #> [1] 0.4217262"},{"path":"/articles/D-Advanced_custom_loss_functions.html","id":"example-2-quantile-regression","dir":"Articles","previous_headings":"Custom loss functions","what":"Example 2: Quantile regression","title":"Advanced: Custom loss functions and prediction intervals","text":"bootstrapping approach provides confidence intervals, prediction intervals. use likelihoods, Gaussian likelihood, fit constant prediction interval. However, often use loss functions, mean squared error ML/DL, don’t intrinsic parametrization prediction intervals. can approximate prediction intervals quantile regression, advantage providing non-constant prediction intervals (example heteroscedasticity): Simulate data:  variance increases higher feature values Quantile Regression:","code":"sim_in = function(n = 5) {   S = diag(1., 3)   S[1,2]=S[2,1]=0.0   X = mvtnorm::rmvnorm(n, sigma = S)   X1 = X[,1]   C = X[,2]   X2 = X[,3]   Y = 1*X1 + 0.1*X2 + 0.0*C + rnorm(n, sd = 0.3+2*1.8^(X1+1))   return(data.frame(Y = Y, X1 = X1, X2 = X2, C = C)) }  data = sim_in(500L) plot(data$X1, data$Y) library(torch)  q1 = torch_tensor(0.05) q2 = torch_tensor(0.5) q3 = torch_tensor(0.95) loss_func = function(pred, true,...) {   l1 = torch_max(q1*(true[,1,drop=FALSE]-pred[,1,drop=FALSE]), other = (1.0-q1)*(pred[,1,drop=FALSE]-true[,1,drop=FALSE]))   l2 = torch_max(q2*(true[,2,drop=FALSE]-pred[,2,drop=FALSE]), other = (1.0-q2)*(pred[,2,drop=FALSE]-true[,2,drop=FALSE]))   l3 = torch_max(q3*(true[,3,drop=FALSE]-pred[,3,drop=FALSE]), other = (1.0-q3)*(pred[,3,drop=FALSE]-true[,3,drop=FALSE]))   return(l1+l2+l3) }   m = dnn(cbind(Y, Y, Y)~., data = data,         lr = 0.01,         loss = loss_func,         lambda = 0.000, alpha = 0.5,         epochs = 70L, hidden = c(30L, 30L),         activation = \"selu\", verbose = TRUE, plot = FALSE) #> Loss at epoch 1: 5.470749, lr: 0.01000 #> Loss at epoch 2: 5.268569, lr: 0.01000 #> Loss at epoch 3: 5.076637, lr: 0.01000 #> Loss at epoch 4: 4.884690, lr: 0.01000 #> Loss at epoch 5: 4.684872, lr: 0.01000 #> Loss at epoch 6: 4.477314, lr: 0.01000 #> Loss at epoch 7: 4.274307, lr: 0.01000 #> Loss at epoch 8: 4.078366, lr: 0.01000 #> Loss at epoch 9: 3.909358, lr: 0.01000 #> Loss at epoch 10: 3.758730, lr: 0.01000 #> Loss at epoch 11: 3.627732, lr: 0.01000 #> Loss at epoch 12: 3.520284, lr: 0.01000 #> Loss at epoch 13: 3.424504, lr: 0.01000 #> Loss at epoch 14: 3.341247, lr: 0.01000 #> Loss at epoch 15: 3.270656, lr: 0.01000 #> Loss at epoch 16: 3.210762, lr: 0.01000 #> Loss at epoch 17: 3.154351, lr: 0.01000 #> Loss at epoch 18: 3.105250, lr: 0.01000 #> Loss at epoch 19: 3.063805, lr: 0.01000 #> Loss at epoch 20: 3.032800, lr: 0.01000 #> Loss at epoch 21: 3.005759, lr: 0.01000 #> Loss at epoch 22: 2.983023, lr: 0.01000 #> Loss at epoch 23: 2.964745, lr: 0.01000 #> Loss at epoch 24: 2.950813, lr: 0.01000 #> Loss at epoch 25: 2.935929, lr: 0.01000 #> Loss at epoch 26: 2.922020, lr: 0.01000 #> Loss at epoch 27: 2.911182, lr: 0.01000 #> Loss at epoch 28: 2.903018, lr: 0.01000 #> Loss at epoch 29: 2.894961, lr: 0.01000 #> Loss at epoch 30: 2.888757, lr: 0.01000 #> Loss at epoch 31: 2.882994, lr: 0.01000 #> Loss at epoch 32: 2.878412, lr: 0.01000 #> Loss at epoch 33: 2.874529, lr: 0.01000 #> Loss at epoch 34: 2.871417, lr: 0.01000 #> Loss at epoch 35: 2.868292, lr: 0.01000 #> Loss at epoch 36: 2.867184, lr: 0.01000 #> Loss at epoch 37: 2.863862, lr: 0.01000 #> Loss at epoch 38: 2.861748, lr: 0.01000 #> Loss at epoch 39: 2.859973, lr: 0.01000 #> Loss at epoch 40: 2.858448, lr: 0.01000 #> Loss at epoch 41: 2.856646, lr: 0.01000 #> Loss at epoch 42: 2.854968, lr: 0.01000 #> Loss at epoch 43: 2.854192, lr: 0.01000 #> Loss at epoch 44: 2.852455, lr: 0.01000 #> Loss at epoch 45: 2.851032, lr: 0.01000 #> Loss at epoch 46: 2.850336, lr: 0.01000 #> Loss at epoch 47: 2.849624, lr: 0.01000 #> Loss at epoch 48: 2.848325, lr: 0.01000 #> Loss at epoch 49: 2.846308, lr: 0.01000 #> Loss at epoch 50: 2.845728, lr: 0.01000 #> Loss at epoch 51: 2.844210, lr: 0.01000 #> Loss at epoch 52: 2.844008, lr: 0.01000 #> Loss at epoch 53: 2.842485, lr: 0.01000 #> Loss at epoch 54: 2.841521, lr: 0.01000 #> Loss at epoch 55: 2.841301, lr: 0.01000 #> Loss at epoch 56: 2.839583, lr: 0.01000 #> Loss at epoch 57: 2.839782, lr: 0.01000 #> Loss at epoch 58: 2.837819, lr: 0.01000 #> Loss at epoch 59: 2.837510, lr: 0.01000 #> Loss at epoch 60: 2.836291, lr: 0.01000 #> Loss at epoch 61: 2.835764, lr: 0.01000 #> Loss at epoch 62: 2.835144, lr: 0.01000 #> Loss at epoch 63: 2.834413, lr: 0.01000 #> Loss at epoch 64: 2.834573, lr: 0.01000 #> Loss at epoch 65: 2.832787, lr: 0.01000 #> Loss at epoch 66: 2.831882, lr: 0.01000 #> Loss at epoch 67: 2.832079, lr: 0.01000 #> Loss at epoch 68: 2.831004, lr: 0.01000 #> Loss at epoch 69: 2.829836, lr: 0.01000 #> Loss at epoch 70: 2.829776, lr: 0.01000  plot(data$X1, data$Y) lines(smooth.spline(data$X1, predict(m)[,1], spar = 0.01), col = \"blue\") lines(smooth.spline(data$X1, predict(m)[,3], spar = 0.01), col = \"blue\") lines(smooth.spline(data$X1, predict(m)[,2], spar = 0.01), col = \"red\")"},{"path":"/articles/D-Advanced_custom_loss_functions.html","id":"example-3-using-cito-for-optimization-active-learning","dir":"Articles","previous_headings":"Custom loss functions","what":"Example 3: Using cito for optimization / active learning","title":"Advanced: Custom loss functions and prediction intervals","text":"Neural networks can used unconventional way optimize arbitrary functions (sometimes called active learning, related reinforcement learning) - prerequisite analytic derivative function using torch must available. provide function optimized series Torch operations. First, model predict parameters (based noise, inputs don’t matter) passed custom loss function use model function (optimize) compute loss return optimizer. way overfit noisy inputs DNN learn predict optimal set parameters - independent input.","code":"X = runif(200) Y = 2*X + rnorm(200, sd = 0.4) df = data.frame(X = X, Y = Y)  # Function we want to optimize (linear model) Xt = torch_tensor(matrix(X)) Yt = torch_tensor(matrix(Y))  model_lm = function(par) {   pred = Xt$matmul(par[,1,drop=FALSE])   loss = -torch::distr_normal(pred, scale = torch::torch_exp(par[,2,drop=FALSE]))$log_prob(Yt)   return(loss$mean()) }  custom_loss = function(pred, true, ...) {   if(nrow(pred) > 1) return(torch_zeros(1L)) # disable loss calculation   loss = model_lm(pred)   return(loss) }  # X and Y values don't matter, number of columns in Y has to match the number of parameters we want to optimize noise = matrix(runif(300*5), 300, 5) noise_y = matrix(runif(300*2), 300, 2) df = data.frame(y1 = noise_y[,1], y2 = noise_y[,2], noise)  m = dnn(cbind(y1, y2)~., data = df, loss = custom_loss, batchsize = 1L, epochs = 20L, verbose = FALSE) # Effect: mean(predict(m)[,1]) #> [1] 2.035041 # SD mean(exp(predict(m)[,2])) #> [1] 0.4103649"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christian Amesöder. Author. Maximilian Pichler. Author, maintainer. Florian Hartig. Contributor. Armin Schenk. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Amesoeder, C., Hartig, F., Pichler, M. (2023) cito: R package training neural networks using torch. arXiv preprint arXiv:2303.09599  doi:10.48550/arXiv.2303.09599.","code":"@Article{,   title = {cito: An R package for training neural networks using torch},   author = {Christian Amesoeder and Florian Hartig and Maximilian Pichler},   journal = {arXiv preprint arXiv:2303.09599},   year = {2023},   doi = {10.48550/arXiv.2303.09599}, }"},{"path":"/index.html","id":"cito","dir":"","previous_headings":"","what":"Building and Training Neural Networks","title":"Building and Training Neural Networks","text":"‘cito’ simplifies building training (deep) neural networks relying standard R syntax familiar methods statistical packages. Model creation training can done single line code. Furthermore, generic R methods print plot can used fitted model. time, ‘cito’ computationally efficient based deep learning framework ‘torch’ (optional GPU support). ‘torch’ package native R, Python installation API required package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Building and Training Neural Networks","text":"installing ‘cito’ make sure ‘torch’ installed. See code chunk unsure check trouble installing ‘torch’, please visit website ‘torch’ package create issue github website. happy help . stable version cito CRAN can installed : development version GitHub can installed :","code":"# check package  if(!require('torch',quietly = TRUE)) install.packages('torch') library('torch')   #install torch if(!torch_is_installed()) install_torch() install.packages(\"cito\") if(!require('devtools', quietly = TRUE)) install.packages('devtools') devtools::install_github('citoverse/cito')"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Building and Training Neural Networks","text":"installed, main function dnn() can used. See example . depth explanation can found vignettes articles. Fit model bootstrapping (obtain confidence intervals). methods work without bootstrapping Check models converged (compare training loss baseline loss (=intercept model)): Plot model architecture  ‘cito’ supports many advanced functionalities common explainable AI metrics can used inference (.e. interpret models). Variable importance (similar variation partitioning) linear effects directly returned summary function: Predict (confidence intervals):","code":"library(cito) nn.fit <- dnn(Sepal.Length~., data = datasets::iris, bootstrap = 30L) analyze_training(nn.fit) # At 1st glance, the networks converged since the loss is lower than the baseline loss and the training loss is on a plateau at the end of the training. plot(nn.fit) summary(nn.fit) ## Summary of Deep Neural Network Model ##  ## ── Feature Importance ##                 Importance Std.Err Z value Pr(>|z|)    ## Sepal.Width →        1.205   0.507    2.38   0.0175 *  ## Petal.Length →      27.720  10.575    2.62   0.0088 ** ## Petal.Width →        0.677   0.637    1.06   0.2876    ## Species →            1.270   1.096    1.16   0.2465    ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## ── Average Conditional Effects ##                     ACE Std.Err Z value Pr(>|z|)     ## Sepal.Width →    0.5283  0.0828    6.38  1.8e-10 *** ## Petal.Length →   0.7253  0.0649   11.18  < 2e-16 *** ## Petal.Width →   -0.1924  0.1396   -1.38     0.17     ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## ── Standard Deviation of Conditional Effects ##                    ACE Std.Err Z value Pr(>|z|)     ## Sepal.Width →   0.1495  0.0409    3.66  0.00026 *** ## Petal.Length →  0.1291  0.0396    3.26  0.00111 **  ## Petal.Width →   0.0529  0.0311    1.70  0.08878 .   ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 dim(predict(nn.fit, newdata = datasets::iris)) ## [1] 150   1"},{"path":"/index.html","id":"hyperparameter-tuning","dir":"","previous_headings":"Example","what":"Hyperparameter tuning","title":"Building and Training Neural Networks","text":"Certain arguments/parameters architecture, activation function, learning rate can automatically tuned crossvalidation (full list, see ?dnn). Parameters tuned, can flagged using function tune() instead hyperparameter value: tuning can configured tuning=config_tuning(). tuning, final model trained best hyperparameters returned. Hyperparameter combinations achieve loss baseline loss aborted early fully cross-validated. runs given test loss infinity.","code":"nn.fit <- dnn(Sepal.Length~., data = datasets::iris, lr = tune(0.0001, 0.1)) ## Starting hyperparameter tuning... ## Fitting final model... nn.fit$tuning ## # A tibble: 10 × 5 ##    steps    test train models          lr ##    <int>   <dbl> <dbl> <list>       <dbl> ##  1     1 Inf         0 <list [1]> 0.0887  ##  2     2 Inf         0 <list [1]> 0.0264  ##  3     3   1.13      0 <list [1]> 0.0416  ##  4     4   0.757     0 <list [1]> 0.0373  ##  5     5 Inf         0 <list [1]> 0.0175  ##  6     6 Inf         0 <list [1]> 0.0581  ##  7     7   0.526     0 <list [1]> 0.00348 ##  8     8 Inf         0 <list [1]> 0.0179  ##  9     9 Inf         0 <list [1]> 0.0687  ## 10    10 Inf         0 <list [1]> 0.0497"},{"path":"/index.html","id":"advanced","dir":"","previous_headings":"","what":"Advanced","title":"Building and Training Neural Networks","text":"can pass custom loss functions ‘cito’, optionally additional parameters fitted. requirement calculations must written using ‘torch’ package (cito automatically converts initial values custom parameters ‘torch’ objects). use multivariate normal distribution likelihood function want parameterize/fit covariance matrix multivariate normal distribution: need one helper function, create_cov() builds covariance matrix based lower triangular matrix diagonals (low-rank approximation covariance matrix) need custom likelihood function uses distr_multivariate_normal(…) function torch package: use “SigmaPar” “SigmaDiag” parameters want optimize along DNN. pass named list starting values ‘cito’ ‘cito’ infer automatically (based R shape) shape parameters: Estimated covariance matrix: Empirical covariance matrix:","code":"create_cov = function(L, Diag) {   return(torch::torch_matmul(L, L$t()) + torch::torch_diag(Diag$exp()+0.001)) }  custom_loss_MVN = function(true, pred) {   Sigma = create_cov(SigmaPar, SigmaDiag)   logLik = torch::distr_multivariate_normal(pred,                                             covariance_matrix = Sigma)$     log_prob(true)   return(-logLik$mean()) } nn.fit<- dnn(cbind(Sepal.Length, Sepal.Width, Petal.Length)~.,              data = datasets::iris,              lr = 0.01,              epochs = 200L,              loss = custom_loss_MVN,              verbose = FALSE,              plot = FALSE,              custom_parameters =                list(SigmaDiag =  rep(0, 3), # Our parameters with starting values                     SigmaPar = matrix(rnorm(6, sd = 0.001), 3, 2)) # Our parameters with starting values ) as.matrix(create_cov(nn.fit$loss$parameter$SigmaPar,                      nn.fit$loss$parameter$SigmaDiag)) ##            [,1]       [,2]       [,3] ## [1,] 0.29110381 0.06862528 0.13878071 ## [2,] 0.06862528 0.10975803 0.04459281 ## [3,] 0.13878071 0.04459281 0.16815922 cov(predict(nn.fit) - nn.fit$data$Y) ##            [,1]       [,2]       [,3] ## [1,] 0.22410463 0.06030019 0.12087770 ## [2,] 0.06030019 0.08968497 0.01781354 ## [3,] 0.12087770 0.01781354 0.13009877"},{"path":"/reference/ALE.html","id":null,"dir":"Reference","previous_headings":"","what":"Accumulated Local Effect Plot (ALE) — ALE","title":"Accumulated Local Effect Plot (ALE) — ALE","text":"Performs ALE one features.","code":""},{"path":"/reference/ALE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accumulated Local Effect Plot (ALE) — ALE","text":"","code":"ALE(   model,   variable = NULL,   data = NULL,   K = 10,   ALE_type = c(\"equidistant\", \"quantile\"),   plot = TRUE,   parallel = FALSE,   ... )  # S3 method for citodnn ALE(   model,   variable = NULL,   data = NULL,   K = 10,   ALE_type = c(\"equidistant\", \"quantile\"),   plot = TRUE,   parallel = FALSE,   ... )  # S3 method for citodnnBootstrap ALE(   model,   variable = NULL,   data = NULL,   K = 10,   ALE_type = c(\"equidistant\", \"quantile\"),   plot = TRUE,   parallel = FALSE,   ... )"},{"path":"/reference/ALE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accumulated Local Effect Plot (ALE) — ALE","text":"model model created dnn variable variable string PDP done data data ALE performed , NULL training data used. K number neighborhoods original feature space gets divided ALE_type method feature space divided neighborhoods. plot plot ALE parallel parallelize bootstrap models ... arguments passed predict","code":""},{"path":"/reference/ALE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accumulated Local Effect Plot (ALE) — ALE","text":"list plots made 'ggplot2' consisting individual plot defined variable.","code":""},{"path":"/reference/ALE.html","id":"explanation","dir":"Reference","previous_headings":"","what":"Explanation","title":"Accumulated Local Effect Plot (ALE) — ALE","text":"Accumulated Local Effect plots (ALE) quantify predictions change features change. similar partial dependency plots robust feature collinearity.","code":""},{"path":"/reference/ALE.html","id":"mathematical-details","dir":"Reference","previous_headings":"","what":"Mathematical details","title":"Accumulated Local Effect Plot (ALE) — ALE","text":"defined variable numeric feature, ALE performed. , non centered effect feature j k equally distant neighborhoods defined : \\( \\hat{\\tilde{f}}_{j,ALE}(x)=\\sum_{k=1}^{k_j(x)}\\frac{1}{n_j(k)}\\sum_{:x_{j}^{()}\\{}N_j(k)}\\left[\\hat{f}(z_{k,j},x^{()}_{\\setminus{}j})-\\hat{f}(z_{k-1,j},x^{()}_{\\setminus{}j})\\right]\\) \\(N_j(k)\\) k-th neighborhood \\(n_j(k)\\) number observations k-th neighborhood. last part equation, \\(\\left[\\hat{f}(z_{k,j},x^{()}_{\\setminus{}j})-\\hat{f}(z_{k-1,j},x^{()}_{\\setminus{}j})\\right]\\) represents difference model prediction value feature j exchanged upper lower border current neighborhood.","code":""},{"path":[]},{"path":"/reference/ALE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accumulated Local Effect Plot (ALE) — ALE","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  # Build and train  Network nn.fit<- dnn(Sepal.Length~., data = datasets::iris)  ALE(nn.fit, variable = \"Petal.Length\") } #> Loss at epoch 1: 6.293396, lr: 0.01000 #> Loss at epoch 2: 0.161493, lr: 0.01000 #> Loss at epoch 3: 0.244197, lr: 0.01000 #> Loss at epoch 4: 0.134832, lr: 0.01000 #> Loss at epoch 5: 0.151388, lr: 0.01000 #> Loss at epoch 6: 0.175489, lr: 0.01000 #> Loss at epoch 7: 0.271828, lr: 0.01000 #> Loss at epoch 8: 0.136464, lr: 0.01000 #> Loss at epoch 9: 0.137551, lr: 0.01000 #> Loss at epoch 10: 0.138729, lr: 0.01000 #> Loss at epoch 11: 0.154460, lr: 0.01000 #> Loss at epoch 12: 0.157719, lr: 0.01000 #> Loss at epoch 13: 0.200966, lr: 0.01000 #> Loss at epoch 14: 0.182768, lr: 0.01000 #> Loss at epoch 15: 0.179725, lr: 0.01000 #> Loss at epoch 16: 0.191095, lr: 0.01000 #> Loss at epoch 17: 0.154095, lr: 0.01000 #> Loss at epoch 18: 0.136583, lr: 0.01000 #> Loss at epoch 19: 0.159818, lr: 0.01000 #> Loss at epoch 20: 0.147998, lr: 0.01000 #> Loss at epoch 21: 0.175795, lr: 0.01000 #> Loss at epoch 22: 0.173879, lr: 0.01000 #> Loss at epoch 23: 0.135381, lr: 0.01000 #> Loss at epoch 24: 0.142697, lr: 0.01000 #> Loss at epoch 25: 0.145126, lr: 0.01000 #> Loss at epoch 26: 0.160286, lr: 0.01000 #> Loss at epoch 27: 0.360661, lr: 0.01000 #> Loss at epoch 28: 0.134197, lr: 0.01000 #> Loss at epoch 29: 0.249181, lr: 0.01000 #> Loss at epoch 30: 0.133843, lr: 0.01000 #> Loss at epoch 31: 0.138415, lr: 0.01000 #> Loss at epoch 32: 0.133855, lr: 0.01000 #> Loss at epoch 33: 0.172769, lr: 0.01000 #> Loss at epoch 34: 0.184991, lr: 0.01000 #> Loss at epoch 35: 0.125294, lr: 0.01000 #> Loss at epoch 36: 0.159473, lr: 0.01000 #> Loss at epoch 37: 0.127277, lr: 0.01000 #> Loss at epoch 38: 0.134601, lr: 0.01000 #> Loss at epoch 39: 0.114805, lr: 0.01000 #> Loss at epoch 40: 0.152752, lr: 0.01000 #> Loss at epoch 41: 0.138077, lr: 0.01000 #> Loss at epoch 42: 0.184128, lr: 0.01000 #> Loss at epoch 43: 0.175741, lr: 0.01000 #> Loss at epoch 44: 0.183065, lr: 0.01000 #> Loss at epoch 45: 0.145956, lr: 0.01000 #> Loss at epoch 46: 0.147367, lr: 0.01000 #> Loss at epoch 47: 0.151414, lr: 0.01000 #> Loss at epoch 48: 0.156762, lr: 0.01000 #> Loss at epoch 49: 0.243536, lr: 0.01000 #> Loss at epoch 50: 0.154930, lr: 0.01000 #> Loss at epoch 51: 0.125675, lr: 0.01000 #> Loss at epoch 52: 0.204507, lr: 0.01000 #> Loss at epoch 53: 0.149615, lr: 0.01000 #> Loss at epoch 54: 0.148925, lr: 0.01000 #> Loss at epoch 55: 0.156606, lr: 0.01000 #> Loss at epoch 56: 0.115225, lr: 0.01000 #> Loss at epoch 57: 0.108481, lr: 0.01000 #> Loss at epoch 58: 0.132298, lr: 0.01000 #> Loss at epoch 59: 0.114892, lr: 0.01000 #> Loss at epoch 60: 0.304909, lr: 0.01000 #> Loss at epoch 61: 0.379220, lr: 0.01000 #> Loss at epoch 62: 0.193691, lr: 0.01000 #> Loss at epoch 63: 0.107984, lr: 0.01000 #> Loss at epoch 64: 0.113269, lr: 0.01000 #> Loss at epoch 65: 0.119810, lr: 0.01000 #> Loss at epoch 66: 0.123750, lr: 0.01000 #> Loss at epoch 67: 0.131689, lr: 0.01000 #> Loss at epoch 68: 0.119115, lr: 0.01000 #> Loss at epoch 69: 0.115366, lr: 0.01000 #> Loss at epoch 70: 0.136887, lr: 0.01000 #> Loss at epoch 71: 0.156441, lr: 0.01000 #> Loss at epoch 72: 0.130546, lr: 0.01000 #> Loss at epoch 73: 0.124679, lr: 0.01000 #> Loss at epoch 74: 0.114836, lr: 0.01000 #> Loss at epoch 75: 0.107376, lr: 0.01000 #> Loss at epoch 76: 0.119086, lr: 0.01000 #> Loss at epoch 77: 0.138412, lr: 0.01000 #> Loss at epoch 78: 0.108015, lr: 0.01000 #> Loss at epoch 79: 0.123124, lr: 0.01000 #> Loss at epoch 80: 0.146716, lr: 0.01000 #> Loss at epoch 81: 0.156786, lr: 0.01000 #> Loss at epoch 82: 0.135799, lr: 0.01000 #> Loss at epoch 83: 0.312434, lr: 0.01000 #> Loss at epoch 84: 0.119454, lr: 0.01000 #> Loss at epoch 85: 0.160162, lr: 0.01000 #> Loss at epoch 86: 0.220527, lr: 0.01000 #> Loss at epoch 87: 0.193182, lr: 0.01000 #> Loss at epoch 88: 0.133227, lr: 0.01000 #> Loss at epoch 89: 0.115890, lr: 0.01000 #> Loss at epoch 90: 0.178977, lr: 0.01000 #> Loss at epoch 91: 0.136147, lr: 0.01000 #> Loss at epoch 92: 0.107755, lr: 0.01000 #> Loss at epoch 93: 0.103412, lr: 0.01000 #> Loss at epoch 94: 0.144434, lr: 0.01000 #> Loss at epoch 95: 0.128551, lr: 0.01000 #> Loss at epoch 96: 0.207566, lr: 0.01000 #> Loss at epoch 97: 0.135760, lr: 0.01000 #> Loss at epoch 98: 0.106572, lr: 0.01000 #> Loss at epoch 99: 0.121600, lr: 0.01000 #> Loss at epoch 100: 0.108890, lr: 0.01000 #> Number of Neighborhoods reduced to 8   # }"},{"path":"/reference/PDP.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial Dependence Plot (PDP) — PDP","title":"Partial Dependence Plot (PDP) — PDP","text":"Calculates Partial Dependency Plot one feature, either numeric categorical. Returns plot.","code":""},{"path":"/reference/PDP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial Dependence Plot (PDP) — PDP","text":"","code":"PDP(   model,   variable = NULL,   data = NULL,   ice = FALSE,   resolution.ice = 20,   plot = TRUE,   parallel = FALSE,   ... )  # S3 method for citodnn PDP(   model,   variable = NULL,   data = NULL,   ice = FALSE,   resolution.ice = 20,   plot = TRUE,   parallel = FALSE,   ... )  # S3 method for citodnnBootstrap PDP(   model,   variable = NULL,   data = NULL,   ice = FALSE,   resolution.ice = 20,   plot = TRUE,   parallel = FALSE,   ... )"},{"path":"/reference/PDP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial Dependence Plot (PDP) — PDP","text":"model model created dnn variable variable string PDP done. none supplied done variables. data specify new data PDP performed . NULL, PDP performed training data. ice Individual Conditional Dependence shown TRUE resolution.ice resolution ice computed plot plot PDP parallel parallelize bootstrap models ... arguments passed predict","code":""},{"path":"/reference/PDP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial Dependence Plot (PDP) — PDP","text":"list plots made 'ggplot2' consisting individual plot defined variable.","code":""},{"path":"/reference/PDP.html","id":"description","dir":"Reference","previous_headings":"","what":"Description","title":"Partial Dependence Plot (PDP) — PDP","text":"Performs Partial Dependency Plot (PDP) estimation analyze relationship selected feature target variable. PDP function estimates partial function \\(\\hat{f}_S\\): \\(\\hat{f}_S(x_S)=\\frac{1}{n}\\sum_{=1}^n\\hat{f}(x_S,x^{()}_{C})\\) Monte Carlo Estimation: \\(\\hat{f}_S(x_S)=\\frac{1}{n}\\sum_{=1}^n\\hat{f}(x_S,x^{()}_{C})\\) using Monte Carlo estimation method. calculates average prediction target variable different values selected feature keeping features constant. categorical features, data instances used, instance set one level categorical feature. average prediction per category calculated visualized bar plot. ice parameter set TRUE, Individual Conditional Expectation (ICE) curves also shown. curves illustrate individual data sample reacts changes feature value. Please note option available categorical features. Unlike PDP, ICE curves computed using value grid instead utilizing every value every data entry. Note: PDP analysis provides valuable insights relationship specific feature target variable, helping understand feature's impact model's predictions. categorical feature analyzed, data instances used set level. average calculated per category put bar plot. ice set true additional individual conditional dependence shown original PDP colored yellow. lines show, individual data sample reacts changes feature. option available categorical features. Unlike PDP ICE curves computed value grid instead utilizing every value every data entry.","code":""},{"path":[]},{"path":"/reference/PDP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial Dependence Plot (PDP) — PDP","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  # Build and train  Network nn.fit<- dnn(Sepal.Length~., data = datasets::iris)  PDP(nn.fit, variable = \"Petal.Length\") } #> Loss at epoch 1: 3.602875, lr: 0.01000  #> Loss at epoch 2: 0.420273, lr: 0.01000 #> Loss at epoch 3: 0.322538, lr: 0.01000 #> Loss at epoch 4: 0.379658, lr: 0.01000 #> Loss at epoch 5: 0.332624, lr: 0.01000 #> Loss at epoch 6: 0.143542, lr: 0.01000 #> Loss at epoch 7: 0.242490, lr: 0.01000 #> Loss at epoch 8: 0.136837, lr: 0.01000 #> Loss at epoch 9: 0.205949, lr: 0.01000 #> Loss at epoch 10: 0.130047, lr: 0.01000 #> Loss at epoch 11: 0.229411, lr: 0.01000 #> Loss at epoch 12: 0.264936, lr: 0.01000 #> Loss at epoch 13: 0.150828, lr: 0.01000 #> Loss at epoch 14: 0.122121, lr: 0.01000 #> Loss at epoch 15: 0.296807, lr: 0.01000 #> Loss at epoch 16: 0.140663, lr: 0.01000 #> Loss at epoch 17: 0.182314, lr: 0.01000 #> Loss at epoch 18: 0.128155, lr: 0.01000 #> Loss at epoch 19: 0.128048, lr: 0.01000 #> Loss at epoch 20: 0.205398, lr: 0.01000 #> Loss at epoch 21: 0.184247, lr: 0.01000 #> Loss at epoch 22: 0.226460, lr: 0.01000 #> Loss at epoch 23: 0.157912, lr: 0.01000 #> Loss at epoch 24: 0.145783, lr: 0.01000 #> Loss at epoch 25: 0.153565, lr: 0.01000 #> Loss at epoch 26: 0.170047, lr: 0.01000 #> Loss at epoch 27: 0.133663, lr: 0.01000 #> Loss at epoch 28: 0.279713, lr: 0.01000 #> Loss at epoch 29: 0.184481, lr: 0.01000 #> Loss at epoch 30: 0.151891, lr: 0.01000 #> Loss at epoch 31: 0.306019, lr: 0.01000 #> Loss at epoch 32: 0.232943, lr: 0.01000 #> Loss at epoch 33: 0.182638, lr: 0.01000 #> Loss at epoch 34: 0.119203, lr: 0.01000 #> Loss at epoch 35: 0.256994, lr: 0.01000 #> Loss at epoch 36: 0.190089, lr: 0.01000 #> Loss at epoch 37: 0.254701, lr: 0.01000 #> Loss at epoch 38: 0.158291, lr: 0.01000 #> Loss at epoch 39: 0.248594, lr: 0.01000 #> Loss at epoch 40: 0.147722, lr: 0.01000 #> Loss at epoch 41: 0.257403, lr: 0.01000 #> Loss at epoch 42: 0.305680, lr: 0.01000 #> Loss at epoch 43: 0.186075, lr: 0.01000 #> Loss at epoch 44: 0.114170, lr: 0.01000 #> Loss at epoch 45: 0.141673, lr: 0.01000 #> Loss at epoch 46: 0.113904, lr: 0.01000 #> Loss at epoch 47: 0.145225, lr: 0.01000 #> Loss at epoch 48: 0.120911, lr: 0.01000 #> Loss at epoch 49: 0.171545, lr: 0.01000 #> Loss at epoch 50: 0.120901, lr: 0.01000 #> Loss at epoch 51: 0.124117, lr: 0.01000 #> Loss at epoch 52: 0.142966, lr: 0.01000 #> Loss at epoch 53: 0.119669, lr: 0.01000 #> Loss at epoch 54: 0.105655, lr: 0.01000 #> Loss at epoch 55: 0.152023, lr: 0.01000 #> Loss at epoch 56: 0.172411, lr: 0.01000 #> Loss at epoch 57: 0.109436, lr: 0.01000 #> Loss at epoch 58: 0.232780, lr: 0.01000 #> Loss at epoch 59: 0.179147, lr: 0.01000 #> Loss at epoch 60: 0.131352, lr: 0.01000 #> Loss at epoch 61: 0.146730, lr: 0.01000 #> Loss at epoch 62: 0.180927, lr: 0.01000 #> Loss at epoch 63: 0.234465, lr: 0.01000 #> Loss at epoch 64: 0.181663, lr: 0.01000 #> Loss at epoch 65: 0.152198, lr: 0.01000 #> Loss at epoch 66: 0.213236, lr: 0.01000 #> Loss at epoch 67: 0.222522, lr: 0.01000 #> Loss at epoch 68: 0.176802, lr: 0.01000 #> Loss at epoch 69: 0.159409, lr: 0.01000 #> Loss at epoch 70: 0.123109, lr: 0.01000 #> Loss at epoch 71: 0.231722, lr: 0.01000 #> Loss at epoch 72: 0.139873, lr: 0.01000 #> Loss at epoch 73: 0.188975, lr: 0.01000 #> Loss at epoch 74: 0.106203, lr: 0.01000 #> Loss at epoch 75: 0.169787, lr: 0.01000 #> Loss at epoch 76: 0.105765, lr: 0.01000 #> Loss at epoch 77: 0.108295, lr: 0.01000 #> Loss at epoch 78: 0.136915, lr: 0.01000 #> Loss at epoch 79: 0.125169, lr: 0.01000 #> Loss at epoch 80: 0.289089, lr: 0.01000 #> Loss at epoch 81: 0.140788, lr: 0.01000 #> Loss at epoch 82: 0.111573, lr: 0.01000 #> Loss at epoch 83: 0.106647, lr: 0.01000 #> Loss at epoch 84: 0.101159, lr: 0.01000 #> Loss at epoch 85: 0.113564, lr: 0.01000 #> Loss at epoch 86: 0.143426, lr: 0.01000 #> Loss at epoch 87: 0.148255, lr: 0.01000 #> Loss at epoch 88: 0.122665, lr: 0.01000 #> Loss at epoch 89: 0.179318, lr: 0.01000 #> Loss at epoch 90: 0.195671, lr: 0.01000 #> Loss at epoch 91: 0.120371, lr: 0.01000 #> Loss at epoch 92: 0.125909, lr: 0.01000 #> Loss at epoch 93: 0.118425, lr: 0.01000 #> Loss at epoch 94: 0.130990, lr: 0.01000 #> Loss at epoch 95: 0.121667, lr: 0.01000 #> Loss at epoch 96: 0.113065, lr: 0.01000 #> Loss at epoch 97: 0.099322, lr: 0.01000 #> Loss at epoch 98: 0.117602, lr: 0.01000 #> Loss at epoch 99: 0.101332, lr: 0.01000 #> Loss at epoch 100: 0.152565, lr: 0.01000  # }"},{"path":"/reference/analyze_training.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize training of Neural Network — analyze_training","title":"Visualize training of Neural Network — analyze_training","text":"training model cito, function helps analyze training process decide best performing model. Creates 'plotly' figure allows zoom training graph","code":""},{"path":"/reference/analyze_training.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize training of Neural Network — analyze_training","text":"","code":"analyze_training(object)"},{"path":"/reference/analyze_training.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize training of Neural Network — analyze_training","text":"object model created dnn cnn","code":""},{"path":"/reference/analyze_training.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize training of Neural Network — analyze_training","text":"'plotly' figure","code":""},{"path":"/reference/analyze_training.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize training of Neural Network — analyze_training","text":"baseline loss important reference. model able achieve better (lower) loss baseline (loss intercept model), model probably converge. Possible reasons include improper learning rate, epochs, much regularization. See ?dnn help vignette(\"B-Training_neural_networks\").","code":""},{"path":"/reference/analyze_training.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize training of Neural Network — analyze_training","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito) set.seed(222) validation_set<- sample(c(1:nrow(datasets::iris)),25)  # Build and train  Network nn.fit<- dnn(Sepal.Length~., data = datasets::iris[-validation_set,],validation = 0.1)  # show zoomable plot of training and validation losses analyze_training(nn.fit)  # Use model on validation set predictions <- predict(nn.fit, iris[validation_set,])  # Scatterplot plot(iris[validation_set,]$Sepal.Length,predictions) } #> Loss at epoch 1: training: 3.512, validation: 0.732, lr: 0.01000  #> Loss at epoch 2: training: 0.239, validation: 0.499, lr: 0.01000 #> Loss at epoch 3: training: 0.212, validation: 0.143, lr: 0.01000 #> Loss at epoch 4: training: 0.291, validation: 0.311, lr: 0.01000 #> Loss at epoch 5: training: 0.235, validation: 1.602, lr: 0.01000 #> Loss at epoch 6: training: 0.535, validation: 0.253, lr: 0.01000 #> Loss at epoch 7: training: 0.170, validation: 0.212, lr: 0.01000 #> Loss at epoch 8: training: 0.210, validation: 0.169, lr: 0.01000 #> Loss at epoch 9: training: 0.203, validation: 0.132, lr: 0.01000 #> Loss at epoch 10: training: 0.156, validation: 0.657, lr: 0.01000 #> Loss at epoch 11: training: 0.195, validation: 0.155, lr: 0.01000 #> Loss at epoch 12: training: 0.173, validation: 0.155, lr: 0.01000 #> Loss at epoch 13: training: 0.188, validation: 0.544, lr: 0.01000 #> Loss at epoch 14: training: 0.245, validation: 0.141, lr: 0.01000 #> Loss at epoch 15: training: 0.139, validation: 0.160, lr: 0.01000 #> Loss at epoch 16: training: 0.151, validation: 0.529, lr: 0.01000 #> Loss at epoch 17: training: 0.199, validation: 0.116, lr: 0.01000 #> Loss at epoch 18: training: 0.162, validation: 0.144, lr: 0.01000 #> Loss at epoch 19: training: 0.167, validation: 0.216, lr: 0.01000 #> Loss at epoch 20: training: 0.179, validation: 0.452, lr: 0.01000 #> Loss at epoch 21: training: 0.199, validation: 0.173, lr: 0.01000 #> Loss at epoch 22: training: 0.179, validation: 0.142, lr: 0.01000 #> Loss at epoch 23: training: 0.140, validation: 0.374, lr: 0.01000 #> Loss at epoch 24: training: 0.298, validation: 0.108, lr: 0.01000 #> Loss at epoch 25: training: 0.160, validation: 0.207, lr: 0.01000 #> Loss at epoch 26: training: 0.187, validation: 0.110, lr: 0.01000 #> Loss at epoch 27: training: 0.201, validation: 0.402, lr: 0.01000 #> Loss at epoch 28: training: 0.169, validation: 0.269, lr: 0.01000 #> Loss at epoch 29: training: 0.140, validation: 0.173, lr: 0.01000 #> Loss at epoch 30: training: 0.121, validation: 0.123, lr: 0.01000 #> Loss at epoch 31: training: 0.186, validation: 0.720, lr: 0.01000 #> Loss at epoch 32: training: 0.205, validation: 0.136, lr: 0.01000 #> Loss at epoch 33: training: 0.175, validation: 0.124, lr: 0.01000 #> Loss at epoch 34: training: 0.128, validation: 0.284, lr: 0.01000 #> Loss at epoch 35: training: 0.197, validation: 0.190, lr: 0.01000 #> Loss at epoch 36: training: 0.141, validation: 0.173, lr: 0.01000 #> Loss at epoch 37: training: 0.155, validation: 0.151, lr: 0.01000 #> Loss at epoch 38: training: 0.153, validation: 0.101, lr: 0.01000 #> Loss at epoch 39: training: 0.231, validation: 0.144, lr: 0.01000 #> Loss at epoch 40: training: 0.161, validation: 0.204, lr: 0.01000 #> Loss at epoch 41: training: 0.282, validation: 0.096, lr: 0.01000 #> Loss at epoch 42: training: 0.139, validation: 0.454, lr: 0.01000 #> Loss at epoch 43: training: 0.146, validation: 0.092, lr: 0.01000 #> Loss at epoch 44: training: 0.122, validation: 0.111, lr: 0.01000 #> Loss at epoch 45: training: 0.141, validation: 0.101, lr: 0.01000 #> Loss at epoch 46: training: 0.197, validation: 0.099, lr: 0.01000 #> Loss at epoch 47: training: 0.133, validation: 0.222, lr: 0.01000 #> Loss at epoch 48: training: 0.116, validation: 0.198, lr: 0.01000 #> Loss at epoch 49: training: 0.386, validation: 0.241, lr: 0.01000 #> Loss at epoch 50: training: 0.167, validation: 0.217, lr: 0.01000 #> Loss at epoch 51: training: 0.136, validation: 0.152, lr: 0.01000 #> Loss at epoch 52: training: 0.139, validation: 0.293, lr: 0.01000 #> Loss at epoch 53: training: 0.180, validation: 0.138, lr: 0.01000 #> Loss at epoch 54: training: 0.261, validation: 0.120, lr: 0.01000 #> Loss at epoch 55: training: 0.231, validation: 0.346, lr: 0.01000 #> Loss at epoch 56: training: 0.160, validation: 0.269, lr: 0.01000 #> Loss at epoch 57: training: 0.151, validation: 0.088, lr: 0.01000 #> Loss at epoch 58: training: 0.139, validation: 0.324, lr: 0.01000 #> Loss at epoch 59: training: 0.114, validation: 0.325, lr: 0.01000 #> Loss at epoch 60: training: 0.180, validation: 0.106, lr: 0.01000 #> Loss at epoch 61: training: 0.194, validation: 0.744, lr: 0.01000 #> Loss at epoch 62: training: 0.166, validation: 0.248, lr: 0.01000 #> Loss at epoch 63: training: 0.183, validation: 0.498, lr: 0.01000 #> Loss at epoch 64: training: 0.153, validation: 0.285, lr: 0.01000 #> Loss at epoch 65: training: 0.196, validation: 0.141, lr: 0.01000 #> Loss at epoch 66: training: 0.128, validation: 0.085, lr: 0.01000 #> Loss at epoch 67: training: 0.167, validation: 0.111, lr: 0.01000 #> Loss at epoch 68: training: 0.156, validation: 0.605, lr: 0.01000 #> Loss at epoch 69: training: 0.226, validation: 0.193, lr: 0.01000 #> Loss at epoch 70: training: 0.143, validation: 0.220, lr: 0.01000 #> Loss at epoch 71: training: 0.159, validation: 0.081, lr: 0.01000 #> Loss at epoch 72: training: 0.147, validation: 0.105, lr: 0.01000 #> Loss at epoch 73: training: 0.169, validation: 0.657, lr: 0.01000 #> Loss at epoch 74: training: 0.309, validation: 0.084, lr: 0.01000 #> Loss at epoch 75: training: 0.134, validation: 0.118, lr: 0.01000 #> Loss at epoch 76: training: 0.137, validation: 0.157, lr: 0.01000 #> Loss at epoch 77: training: 0.151, validation: 0.108, lr: 0.01000 #> Loss at epoch 78: training: 0.154, validation: 0.126, lr: 0.01000 #> Loss at epoch 79: training: 0.141, validation: 0.149, lr: 0.01000 #> Loss at epoch 80: training: 0.126, validation: 0.152, lr: 0.01000 #> Loss at epoch 81: training: 0.131, validation: 0.191, lr: 0.01000 #> Loss at epoch 82: training: 0.106, validation: 0.116, lr: 0.01000 #> Loss at epoch 83: training: 0.125, validation: 0.137, lr: 0.01000 #> Loss at epoch 84: training: 0.118, validation: 0.547, lr: 0.01000 #> Loss at epoch 85: training: 0.136, validation: 0.083, lr: 0.01000 #> Loss at epoch 86: training: 0.205, validation: 0.087, lr: 0.01000 #> Loss at epoch 87: training: 0.143, validation: 0.276, lr: 0.01000 #> Loss at epoch 88: training: 0.123, validation: 0.070, lr: 0.01000 #> Loss at epoch 89: training: 0.126, validation: 0.088, lr: 0.01000 #> Loss at epoch 90: training: 0.145, validation: 0.291, lr: 0.01000 #> Loss at epoch 91: training: 0.129, validation: 0.132, lr: 0.01000 #> Loss at epoch 92: training: 0.121, validation: 0.074, lr: 0.01000 #> Loss at epoch 93: training: 0.118, validation: 0.429, lr: 0.01000 #> Loss at epoch 94: training: 0.131, validation: 0.158, lr: 0.01000 #> Loss at epoch 95: training: 0.145, validation: 0.435, lr: 0.01000 #> Loss at epoch 96: training: 0.130, validation: 0.103, lr: 0.01000 #> Loss at epoch 97: training: 0.143, validation: 0.438, lr: 0.01000 #> Loss at epoch 98: training: 0.258, validation: 0.237, lr: 0.01000 #> Loss at epoch 99: training: 0.147, validation: 0.121, lr: 0.01000 #> Loss at epoch 100: training: 0.186, validation: 0.241, lr: 0.01000  # }"},{"path":"/reference/avgPool.html","id":null,"dir":"Reference","previous_headings":"","what":"Average pooling layer — avgPool","title":"Average pooling layer — avgPool","text":"creates 'avgPool' 'citolayer' object used create_architecture.","code":""},{"path":"/reference/avgPool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average pooling layer — avgPool","text":"","code":"avgPool(kernel_size = NULL, stride = NULL, padding = NULL)"},{"path":"/reference/avgPool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average pooling layer — avgPool","text":"kernel_size (int tuple) size kernel layer. Use tuple kernel size equal dimensions stride (int tuple) stride kernel layer. NULL sets stride equal kernel size. Use tuple stride equal dimensions padding (int tuple) zero-padding added sides input. Use tuple padding equal dimensions","code":""},{"path":"/reference/avgPool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average pooling layer — avgPool","text":"S3 object class \"avgPool\" \"citolayer\"","code":""},{"path":"/reference/avgPool.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Average pooling layer — avgPool","text":"function creates 'avgPool' 'citolayer' object passed create_architecture function. parameters assigned (therefore still NULL) filled default values passed create_architecture.","code":""},{"path":[]},{"path":"/reference/avgPool.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Average pooling layer — avgPool","text":"Armin Schenk","code":""},{"path":"/reference/cito.html","id":null,"dir":"Reference","previous_headings":"","what":"'cito': Building and training neural networks — cito","title":"'cito': Building and training neural networks — cito","text":"'cito' simplifies building training (deep) neural networks relying standard R syntax familiar methods statistical packages. Model creation training can done single line code. Furthermore, generic R methods print plot can used fitted model. time, 'cito' computationally efficient based deep learning framework 'torch' (optional GPU support). 'torch' package native R, Python installation API required package.","code":""},{"path":"/reference/cito.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'cito': Building and training neural networks — cito","text":"Cito built around main function dnn, creates trains deep neural network. Various tools analyzing trained neural network available.","code":""},{"path":"/reference/cito.html","id":"installation","dir":"Reference","previous_headings":"","what":"Installation","title":"'cito': Building and training neural networks — cito","text":"order install cito please follow steps: install.packages(\"cito\") library(torch) install_torch(reinstall = TRUE) library(cito)","code":""},{"path":"/reference/cito.html","id":"cito-functions-and-typical-workflow","dir":"Reference","previous_headings":"","what":"cito functions and typical workflow","title":"'cito': Building and training neural networks — cito","text":"dnn: train deep neural network analyze_training: check convergence comparing training loss baseline loss continue_training: continues training existing cito dnn model additional epochs summary.citodnn: extract xAI metrics/effects understand predictions made PDP: plot partial dependency plot specific feature ALE: plot accumulated local effect plot specific feature Check vignettes details training NN typical workflow 'cito' look like.","code":""},{"path":"/reference/cito.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'cito': Building and training neural networks — cito","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  # Example workflow in cito  ## Build and train  Network ### softmax is used for multi-class responses (e.g., Species) nn.fit<- dnn(Species~., data = datasets::iris, loss = \"softmax\")  ## The training loss is below the baseline loss but at the end of the ## training the loss was still decreasing, so continue training for another 50 ## epochs nn.fit <- continue_training(nn.fit, epochs = 50L)  # Sturcture of Neural Network print(nn.fit)  # Plot Neural Network plot(nn.fit) ## 4 Input nodes (first layer) because of 4 features ## 3 Output nodes (last layer) because of 3 response species (one node for each ## level in the response variable). ## The layers between the input and output layer are called hidden layers (two ## of them)  ## We now want to understand how the predictions are made, what are the ## important features? The summary function automatically calculates feature ## importance (the interpretation is similar to an anova) and calculates ## average conditional effects that are similar to linear effects: summary(nn.fit)  ## To visualize the effect (response-feature effect), we can use the ALE and ## PDP functions  # Partial dependencies PDP(nn.fit, variable = \"Petal.Length\")  # Accumulated local effect plots ALE(nn.fit, variable = \"Petal.Length\")    # Per se, it is difficult to get confidence intervals for our xAI metrics (or # for the predictions). But we can use bootstrapping to obtain uncertainties # for all cito outputs: ## Re-fit the neural network with bootstrapping nn.fit<- dnn(Species~.,              data = datasets::iris,              loss = \"softmax\",              epochs = 150L,              verbose = FALSE,              bootstrap = 20L) ## convergence can be tested via the analyze_training function analyze_training(nn.fit)  ## Summary for xAI metrics (can take some time): summary(nn.fit) ## Now with standard errors and p-values ## Note: Take the p-values with a grain of salt! We do not know yet if they are ## correct (e.g. if you use regularization, they are likely conservative == too ## large)  ## Predictions with bootstrapping: dim(predict(nn.fit)) ## predictions are by default averaged (over the bootstrap samples)    # Hyperparameter tuning (experimental feature) hidden_values = matrix(c(5, 2,                          4, 2,                          10,2,                          15,2), 4, 2, byrow = TRUE) ## Potential architectures we want to test, first column == number of nodes print(hidden_values)  nn.fit = dnn(Species~.,              data = iris,              epochs = 30L,              loss = \"softmax\",              hidden = tune(values = hidden_values),              lr = tune(0.00001, 0.1) # tune lr between range 0.00001 and 0.1              ) ## Tuning results: print(nn.fit$tuning)  # test = Inf means that tuning was cancelled after only one fit (within the CV)   # Advanced: Custom loss functions and additional parameters ## Normal Likelihood with sd parameter: custom_loss = function(pred, true) {   logLik = torch::distr_normal(pred,                                scale = torch::nnf_relu(scale)+                                  0.001)$log_prob(true)   return(-logLik$mean()) }  nn.fit<- dnn(Sepal.Length~.,              data = datasets::iris,              loss = custom_loss,              verbose = FALSE,              custom_parameters = list(scale = 1.0) ) nn.fit$parameter$scale  ## Multivariate normal likelihood with parametrized covariance matrix ## Sigma = L*L^t + D ## Helper function to build covariance matrix create_cov = function(LU, Diag) {   return(torch::torch_matmul(LU, LU$t()) + torch::torch_diag(Diag$exp()+0.01)) }  custom_loss_MVN = function(true, pred) {   Sigma = create_cov(SigmaPar, SigmaDiag)   logLik = torch::distr_multivariate_normal(pred,                                             covariance_matrix = Sigma)$     log_prob(true)   return(-logLik$mean()) }   nn.fit<- dnn(cbind(Sepal.Length, Sepal.Width, Petal.Length)~.,              data = datasets::iris,              lr = 0.01,              verbose = FALSE,              loss = custom_loss_MVN,              custom_parameters =                list(SigmaDiag =  rep(0, 3),                     SigmaPar = matrix(rnorm(6, sd = 0.001), 3, 2)) ) as.matrix(create_cov(nn.fit$loss$parameter$SigmaPar,                      nn.fit$loss$parameter$SigmaDiag))  } #> Loss at epoch 1: 1.045974, lr: 0.01000  #> Loss at epoch 2: 0.879237, lr: 0.01000 #> Loss at epoch 3: 0.772227, lr: 0.01000 #> Loss at epoch 4: 0.705768, lr: 0.01000 #> Loss at epoch 5: 0.632555, lr: 0.01000 #> Loss at epoch 6: 0.590905, lr: 0.01000 #> Loss at epoch 7: 0.540760, lr: 0.01000 #> Loss at epoch 8: 0.519361, lr: 0.01000 #> Loss at epoch 9: 0.494496, lr: 0.01000 #> Loss at epoch 10: 0.460750, lr: 0.01000 #> Loss at epoch 11: 0.445339, lr: 0.01000 #> Loss at epoch 12: 0.449745, lr: 0.01000 #> Loss at epoch 13: 0.412149, lr: 0.01000 #> Loss at epoch 14: 0.412998, lr: 0.01000 #> Loss at epoch 15: 0.400364, lr: 0.01000 #> Loss at epoch 16: 0.388126, lr: 0.01000 #> Loss at epoch 17: 0.350342, lr: 0.01000 #> Loss at epoch 18: 0.339114, lr: 0.01000 #> Loss at epoch 19: 0.336151, lr: 0.01000 #> Loss at epoch 20: 0.330241, lr: 0.01000 #> Loss at epoch 21: 0.316469, lr: 0.01000 #> Loss at epoch 22: 0.306838, lr: 0.01000 #> Loss at epoch 23: 0.297494, lr: 0.01000 #> Loss at epoch 24: 0.287191, lr: 0.01000 #> Loss at epoch 25: 0.309658, lr: 0.01000 #> Loss at epoch 26: 0.257440, lr: 0.01000 #> Loss at epoch 27: 0.257202, lr: 0.01000 #> Loss at epoch 28: 0.267126, lr: 0.01000 #> Loss at epoch 29: 0.235713, lr: 0.01000 #> Loss at epoch 30: 0.240574, lr: 0.01000 #> Loss at epoch 31: 0.232591, lr: 0.01000 #> Loss at epoch 32: 0.209954, lr: 0.01000 #> Loss at epoch 33: 0.225126, lr: 0.01000 #> Loss at epoch 34: 0.247248, lr: 0.01000 #> Loss at epoch 35: 0.242982, lr: 0.01000 #> Loss at epoch 36: 0.199135, lr: 0.01000 #> Loss at epoch 37: 0.188797, lr: 0.01000 #> Loss at epoch 38: 0.190670, lr: 0.01000 #> Loss at epoch 39: 0.174911, lr: 0.01000 #> Loss at epoch 40: 0.185993, lr: 0.01000 #> Loss at epoch 41: 0.165133, lr: 0.01000 #> Loss at epoch 42: 0.180707, lr: 0.01000 #> Loss at epoch 43: 0.160167, lr: 0.01000 #> Loss at epoch 44: 0.147592, lr: 0.01000 #> Loss at epoch 45: 0.161756, lr: 0.01000 #> Loss at epoch 46: 0.145172, lr: 0.01000 #> Loss at epoch 47: 0.146087, lr: 0.01000 #> Loss at epoch 48: 0.139967, lr: 0.01000 #> Loss at epoch 49: 0.154258, lr: 0.01000 #> Loss at epoch 50: 0.158228, lr: 0.01000 #> Loss at epoch 51: 0.137675, lr: 0.01000 #> Loss at epoch 52: 0.140266, lr: 0.01000 #> Loss at epoch 53: 0.130389, lr: 0.01000 #> Loss at epoch 54: 0.133713, lr: 0.01000 #> Loss at epoch 55: 0.143928, lr: 0.01000 #> Loss at epoch 56: 0.117445, lr: 0.01000 #> Loss at epoch 57: 0.129187, lr: 0.01000 #> Loss at epoch 58: 0.112376, lr: 0.01000 #> Loss at epoch 59: 0.140667, lr: 0.01000 #> Loss at epoch 60: 0.149242, lr: 0.01000 #> Loss at epoch 61: 0.122146, lr: 0.01000 #> Loss at epoch 62: 0.114639, lr: 0.01000 #> Loss at epoch 63: 0.135419, lr: 0.01000 #> Loss at epoch 64: 0.120924, lr: 0.01000 #> Loss at epoch 65: 0.123894, lr: 0.01000 #> Loss at epoch 66: 0.102834, lr: 0.01000 #> Loss at epoch 67: 0.114322, lr: 0.01000 #> Loss at epoch 68: 0.108859, lr: 0.01000 #> Loss at epoch 69: 0.116154, lr: 0.01000 #> Loss at epoch 70: 0.087963, lr: 0.01000 #> Loss at epoch 71: 0.116194, lr: 0.01000 #> Loss at epoch 72: 0.100270, lr: 0.01000 #> Loss at epoch 73: 0.108258, lr: 0.01000 #> Loss at epoch 74: 0.092419, lr: 0.01000 #> Loss at epoch 75: 0.107165, lr: 0.01000 #> Loss at epoch 76: 0.096888, lr: 0.01000 #> Loss at epoch 77: 0.092782, lr: 0.01000 #> Loss at epoch 78: 0.109057, lr: 0.01000 #> Loss at epoch 79: 0.095328, lr: 0.01000 #> Loss at epoch 80: 0.085353, lr: 0.01000 #> Loss at epoch 81: 0.100312, lr: 0.01000 #> Loss at epoch 82: 0.111522, lr: 0.01000 #> Loss at epoch 83: 0.119181, lr: 0.01000 #> Loss at epoch 84: 0.086518, lr: 0.01000 #> Loss at epoch 85: 0.105096, lr: 0.01000 #> Loss at epoch 86: 0.106127, lr: 0.01000 #> Loss at epoch 87: 0.105778, lr: 0.01000 #> Loss at epoch 88: 0.100158, lr: 0.01000 #> Loss at epoch 89: 0.092487, lr: 0.01000 #> Loss at epoch 90: 0.080501, lr: 0.01000 #> Loss at epoch 91: 0.087305, lr: 0.01000 #> Loss at epoch 92: 0.090066, lr: 0.01000 #> Loss at epoch 93: 0.097699, lr: 0.01000 #> Loss at epoch 94: 0.094027, lr: 0.01000 #> Loss at epoch 95: 0.089490, lr: 0.01000 #> Loss at epoch 96: 0.080336, lr: 0.01000 #> Loss at epoch 97: 0.108363, lr: 0.01000 #> Loss at epoch 98: 0.084155, lr: 0.01000 #> Loss at epoch 99: 0.114287, lr: 0.01000 #> Loss at epoch 100: 0.090468, lr: 0.01000 #> Loss at epoch 101: 0.080415, lr: 0.01000  #> Loss at epoch 102: 0.079921, lr: 0.01000 #> Loss at epoch 103: 0.196204, lr: 0.01000 #> Loss at epoch 104: 0.075564, lr: 0.01000 #> Loss at epoch 105: 0.084815, lr: 0.01000 #> Loss at epoch 106: 0.098306, lr: 0.01000 #> Loss at epoch 107: 0.099269, lr: 0.01000 #> Loss at epoch 108: 0.082770, lr: 0.01000 #> Loss at epoch 109: 0.092061, lr: 0.01000 #> Loss at epoch 110: 0.090700, lr: 0.01000 #> Loss at epoch 111: 0.071259, lr: 0.01000 #> Loss at epoch 112: 0.089459, lr: 0.01000 #> Loss at epoch 113: 0.109800, lr: 0.01000 #> Loss at epoch 114: 0.074360, lr: 0.01000 #> Loss at epoch 115: 0.069672, lr: 0.01000 #> Loss at epoch 116: 0.071284, lr: 0.01000 #> Loss at epoch 117: 0.079869, lr: 0.01000 #> Loss at epoch 118: 0.087838, lr: 0.01000 #> Loss at epoch 119: 0.087602, lr: 0.01000 #> Loss at epoch 120: 0.081940, lr: 0.01000 #> Loss at epoch 121: 0.184228, lr: 0.01000 #> Loss at epoch 122: 0.082504, lr: 0.01000 #> Loss at epoch 123: 0.130904, lr: 0.01000 #> Loss at epoch 124: 0.080888, lr: 0.01000 #> Loss at epoch 125: 0.070959, lr: 0.01000 #> Loss at epoch 126: 0.082427, lr: 0.01000 #> Loss at epoch 127: 0.072945, lr: 0.01000 #> Loss at epoch 128: 0.077173, lr: 0.01000 #> Loss at epoch 129: 0.092653, lr: 0.01000 #> Loss at epoch 130: 0.069433, lr: 0.01000 #> Loss at epoch 131: 0.086346, lr: 0.01000 #> Loss at epoch 132: 0.113616, lr: 0.01000 #> Loss at epoch 133: 0.080618, lr: 0.01000 #> Loss at epoch 134: 0.073719, lr: 0.01000 #> Loss at epoch 135: 0.107954, lr: 0.01000 #> Loss at epoch 136: 0.069193, lr: 0.01000 #> Loss at epoch 137: 0.079899, lr: 0.01000 #> Loss at epoch 138: 0.066169, lr: 0.01000 #> Loss at epoch 139: 0.073361, lr: 0.01000 #> Loss at epoch 140: 0.086127, lr: 0.01000 #> Loss at epoch 141: 0.067057, lr: 0.01000 #> Loss at epoch 142: 0.085882, lr: 0.01000 #> Loss at epoch 143: 0.083389, lr: 0.01000 #> Loss at epoch 144: 0.096349, lr: 0.01000 #> Loss at epoch 145: 0.091922, lr: 0.01000 #> Loss at epoch 146: 0.072273, lr: 0.01000 #> Loss at epoch 147: 0.055795, lr: 0.01000 #> Loss at epoch 148: 0.069644, lr: 0.01000 #> Loss at epoch 149: 0.093636, lr: 0.01000 #> Loss at epoch 150: 0.063644, lr: 0.01000 #> dnn(formula = Species ~ Sepal.Length + Sepal.Width + Petal.Length +  #>     Petal.Width - 1, data = datasets::iris, loss = \"softmax\") #> An `nn_module` containing 2,953 parameters. #>  #> ── Modules ───────────────────────────────────────────────────────────────────── #> • 0: <nn_linear> #250 parameters #> • 1: <nn_selu> #0 parameters #> • 2: <nn_linear> #2,550 parameters #> • 3: <nn_selu> #0 parameters #> • 4: <nn_linear> #153 parameters  #> Number of Neighborhoods reduced to 8 #> Number of Neighborhoods reduced to 8 #> Number of Neighborhoods reduced to 8   #>      [,1] [,2] #> [1,]    5    2 #> [2,]    4    2 #> [3,]   10    2 #> [4,]   15    2 #> Starting hyperparameter tuning... #> Fitting final model... #> # A tibble: 10 × 6 #>    steps  test train models hidden         lr #>    <int> <dbl> <dbl> <lgl>  <list>      <dbl> #>  1     1  29.9     0 NA     <dbl [2]> 0.0803  #>  2     2  27.7     0 NA     <dbl [2]> 0.0354  #>  3     3  42.0     0 NA     <dbl [2]> 0.0880  #>  4     4  19.5     0 NA     <dbl [2]> 0.0437  #>  5     5  79.0     0 NA     <dbl [2]> 0.00631 #>  6     6  45.6     0 NA     <dbl [2]> 0.0251  #>  7     7  36.0     0 NA     <dbl [2]> 0.0607  #>  8     8  21.1     0 NA     <dbl [2]> 0.0402  #>  9     9  39.6     0 NA     <dbl [2]> 0.0184  #> 10    10  24.0     0 NA     <dbl [2]> 0.0596    #>            [,1]       [,2]       [,3] #> [1,] 0.31740090 0.04561161 0.07514375 #> [2,] 0.04561161 0.16346908 0.03339326 #> [3,] 0.07514375 0.03339326 0.22522877 # }"},{"path":"/reference/cnn.html","id":null,"dir":"Reference","previous_headings":"","what":"CNN — cnn","title":"CNN — cnn","text":"fits custom convolutional neural network.","code":""},{"path":"/reference/cnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CNN — cnn","text":"","code":"cnn(   X,   Y = NULL,   architecture,   loss = c(\"mse\", \"mae\", \"softmax\", \"cross-entropy\", \"gaussian\", \"binomial\", \"poisson\"),   optimizer = c(\"sgd\", \"adam\", \"adadelta\", \"adagrad\", \"rmsprop\", \"rprop\"),   lr = 0.01,   alpha = 0.5,   lambda = 0,   validation = 0,   batchsize = 32L,   burnin = 10,   shuffle = TRUE,   epochs = 100,   early_stopping = NULL,   lr_scheduler = NULL,   custom_parameters = NULL,   device = c(\"cpu\", \"cuda\", \"mps\"),   plot = TRUE,   verbose = TRUE )"},{"path":"/reference/cnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CNN — cnn","text":"X predictor: array dimension 3, 4 5 1D-, 2D- 3D-convolutions, respectively. first dimension samples, second dimension channels third - fifth dimension input dimensions Y response: vector, factor, numerical matrix logical matrix architecture 'citoarchitecture' object created create_architecture loss loss network optimized. Can also distribution stats package function, see details optimizer optimizer used training network, adjustments optimizer see config_optimizer lr learning rate given optimizer alpha add L1/L2 regularization training  \\((1 - \\alpha) * |weights| + \\alpha ||weights||^2\\) get added layer. Must 0 1 lambda strength regularization: lambda penalty, \\(\\lambda * (L1 + L2)\\) (see alpha) validation percentage data set taken validation set (chosen randomly) batchsize number samples used calculate one learning rate step burnin training aborted trainings loss baseline loss burnin epochs shuffle TRUE, data batch gets reshuffled every epoch epochs epochs training goes early_stopping set integer, training stop loss gotten higher defined number epochs row, use validation loss available. lr_scheduler learning rate scheduler created config_lr_scheduler custom_parameters List parameters/variables optimized. Can used custom loss function. See Vignette example. device device network trained . plot plot training loss verbose print training validation loss epochs","code":""},{"path":"/reference/cnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CNN — cnn","text":"S3 object class \"citocnn\" returned. list containing everything know model training process. list consists following attributes: net object class \"nn_sequential\" \"nn_module\", originates torch package represents core object workflow. call original function call loss list contains relevant information target variable used loss function data Contains data used training model weights List weights training epoch use_model_epoch Integer, defines model training epoch used prediction. loaded_model_epoch Integer, shows model epoch loaded currently model$net. model_properties list properties neural network, contains number input nodes, number output nodes, size hidden layers, activation functions, whether bias included dropout layers included. training_properties list training parameters used last time model trained. consists learning rate, information learning rate scheduler, information optimizer, number epochs, whether early stopping used, plot active, lambda alpha L1/L2 regularization, batchsize, shuffle, data set split validation training, formula used training epoch training stop. losses data.frame containing training validation losses epoch","code":""},{"path":"/reference/cnn.html","id":"convolutional-neural-networks-","dir":"Reference","previous_headings":"","what":"Convolutional neural networks:","title":"CNN — cnn","text":"Convolutional Neural Networks (CNNs) specialized type neural network designed processing structured grid data, images. characterizing parts architecture convolutional layers, pooling layers fully-connected (linear) layers: Convolutional layers core building blocks CNNs. consist filters (also called kernels), small, learnable matrices. filters slide input data perform element-wise multiplication, producing feature maps capture local patterns features. Multiple filters used detect different features parallel. help network learn hierarchical representations input data capturing low-level features (edges, textures) gradually combining (subsequent convolutional layers) form higher-level features. Pooling layers used downsample spatial dimensions feature maps retaining important information. Max pooling common pooling operation, maximum value local region input retained, reducing size feature maps. Fully-connected (linear) layers connect every neuron one layer every neuron next layer. layers found end network responsible combining high-level features make final predictions.","code":""},{"path":"/reference/cnn.html","id":"loss-functions-likelihoods","dir":"Reference","previous_headings":"","what":"Loss functions / Likelihoods","title":"CNN — cnn","text":"support loss functions likelihoods different tasks:","code":""},{"path":"/reference/cnn.html","id":"training-and-convergence-of-neural-networks","dir":"Reference","previous_headings":"","what":"Training and convergence of neural networks","title":"CNN — cnn","text":"Ensuring convergence can tricky training neural networks. training sensitive combination learning rate (much weights updated optimization step), batch size (random subset data used optimization step), number epochs (number optimization steps). Typically, learning rate decreased size neural networks (amount learnable parameters). provide baseline loss (intercept model) can give hints appropriate learning rate:  training loss model fall baseline loss, learning rate either high low. happens, try higher lower learning rates. common strategy try (manually) different learning rates see learning rate right scale. See troubleshooting vignette (vignette(\"B-Training_neural_networks\")) help training debugging neural networks.","code":""},{"path":"/reference/cnn.html","id":"finding-the-right-architecture","dir":"Reference","previous_headings":"","what":"Finding the right architecture","title":"CNN — cnn","text":"learning rate, definitive guide choosing right architecture right task. However, general rules/recommendations: general, wider, deeper neural networks can improve generalization - double-edged sword also increases risk overfitting. , increase width depth network, also add regularization (e.g., increasing lambda parameter, corresponds regularization strength). Furthermore, Pichler & Hartig, 2023, investigated effects hyperparameters prediction performance function data size. example, found selu activation function outperforms relu small data sizes (<100 observations). recommend starting moderate sizes (like defaults), model generalize/converge, try larger networks along regularization helps minimize risk overfitting (see vignette(\"B-Training_neural_networks\") ).","code":""},{"path":"/reference/cnn.html","id":"overfitting","dir":"Reference","previous_headings":"","what":"Overfitting","title":"CNN — cnn","text":"Overfitting means model fits training data well, generalizes poorly new observations. can use validation argument detect overfitting. validation loss starts increase certain point, often means models starting overfit training data:  Solutions: Re-train epochs = point model started overfit Early stopping, stop training model starts overfit, can specified using early_stopping=… argument Use regularization (dropout elastic-net, see next section)","code":""},{"path":"/reference/cnn.html","id":"regularization","dir":"Reference","previous_headings":"","what":"Regularization","title":"CNN — cnn","text":"Elastic Net regularization combines strengths L1 (Lasso) L2 (Ridge) regularization. introduces penalty term encourages sparse weight values maintaining overall weight shrinkage. controlling sparsity learned model, Elastic Net regularization helps avoid overfitting allowing meaningful feature selection. advise using elastic net (e.g. lambda = 0.001 alpha = 0.2). Dropout regularization helps prevent overfitting randomly disabling portion neurons training. technique encourages network learn robust generalized representations, prevents individual neurons relying heavily specific input patterns. Dropout widely adopted simple yet effective regularization method deep learning. case 2D 3D inputs whole feature maps disabled. Since torch package currently support feature map-wise dropout 1D inputs, instead random neurons feature maps disabled similar dropout linear layers. utilizing regularization methods neural network training cito package, can improve generalization performance enhance network's ability handle unseen data. techniques act valuable tools mitigating overfitting promoting robust reliable model performance.","code":""},{"path":"/reference/cnn.html","id":"custom-optimizer-and-learning-rate-schedulers","dir":"Reference","previous_headings":"","what":"Custom Optimizer and Learning Rate Schedulers","title":"CNN — cnn","text":"training network, flexibility customize optimizer settings learning rate scheduler optimize learning process. cito package, can initialize configurations using config_lr_scheduler config_optimizer functions. config_lr_scheduler allows define specific learning rate scheduler controls learning rate changes time training. beneficial scenarios want adaptively adjust learning rate improve convergence avoid getting stuck local optima. Similarly, config_optimizer function enables specify optimizer network. Different optimizers, stochastic gradient descent (SGD), Adam, RMSprop, offer various strategies updating network's weights biases training. Choosing right optimizer can significantly impact training process final performance neural network.","code":""},{"path":"/reference/cnn.html","id":"training-on-graphic-cards","dir":"Reference","previous_headings":"","what":"Training on graphic cards","title":"CNN — cnn","text":"NVIDIA CUDA-enabled device installed CUDA toolkit version 11.3 cuDNN 8.4, can take advantage GPU acceleration training neural networks. crucial specific versions installed, versions may compatible. detailed installation instructions information utilizing GPUs training, please refer mlverse: 'torch' documentation. Note: GPU training optional, package can still used training CPU even without CUDA cuDNN installations.","code":""},{"path":[]},{"path":"/reference/cnn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CNN — cnn","text":"Armin Schenk, Maximilian Pichler","code":""},{"path":"/reference/coef.citocnn.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns list of parameters the neural network model currently has in use — coef.citocnn","title":"Returns list of parameters the neural network model currently has in use — coef.citocnn","text":"Returns list parameters neural network model currently use","code":""},{"path":"/reference/coef.citocnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns list of parameters the neural network model currently has in use — coef.citocnn","text":"","code":"# S3 method for citocnn coef(object, ...)"},{"path":"/reference/coef.citocnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns list of parameters the neural network model currently has in use — coef.citocnn","text":"object model created cnn ... nothing implemented yet","code":""},{"path":"/reference/coef.citocnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns list of parameters the neural network model currently has in use — coef.citocnn","text":"list weights neural network","code":""},{"path":"/reference/coef.citodnn.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns list of parameters the neural network model currently has in use — coef.citodnn","title":"Returns list of parameters the neural network model currently has in use — coef.citodnn","text":"Returns list parameters neural network model currently use","code":""},{"path":"/reference/coef.citodnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns list of parameters the neural network model currently has in use — coef.citodnn","text":"","code":"# S3 method for citodnn coef(object, ...)  # S3 method for citodnnBootstrap coef(object, ...)"},{"path":"/reference/coef.citodnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns list of parameters the neural network model currently has in use — coef.citodnn","text":"object model created dnn ... nothing implemented yet","code":""},{"path":"/reference/coef.citodnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns list of parameters the neural network model currently has in use — coef.citodnn","text":"list weights neural network","code":""},{"path":"/reference/coef.citodnn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns list of parameters the neural network model currently has in use — coef.citodnn","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  set.seed(222) validation_set<- sample(c(1:nrow(datasets::iris)),25)  # Build and train  Network nn.fit<- dnn(Sepal.Length~., data = datasets::iris[-validation_set,])  # Sturcture of Neural Network print(nn.fit)  #analyze weights of Neural Network coef(nn.fit) } #> Loss at epoch 1: 3.260364, lr: 0.01000  #> Loss at epoch 2: 0.318832, lr: 0.01000 #> Loss at epoch 3: 0.197245, lr: 0.01000 #> Loss at epoch 4: 0.200150, lr: 0.01000 #> Loss at epoch 5: 0.164422, lr: 0.01000 #> Loss at epoch 6: 0.273419, lr: 0.01000 #> Loss at epoch 7: 0.162048, lr: 0.01000 #> Loss at epoch 8: 0.328706, lr: 0.01000 #> Loss at epoch 9: 0.170115, lr: 0.01000 #> Loss at epoch 10: 0.164392, lr: 0.01000 #> Loss at epoch 11: 0.131331, lr: 0.01000 #> Loss at epoch 12: 0.188849, lr: 0.01000 #> Loss at epoch 13: 0.156800, lr: 0.01000 #> Loss at epoch 14: 0.162675, lr: 0.01000 #> Loss at epoch 15: 0.183847, lr: 0.01000 #> Loss at epoch 16: 0.160848, lr: 0.01000 #> Loss at epoch 17: 0.163126, lr: 0.01000 #> Loss at epoch 18: 0.261124, lr: 0.01000 #> Loss at epoch 19: 0.448818, lr: 0.01000 #> Loss at epoch 20: 0.140161, lr: 0.01000 #> Loss at epoch 21: 0.153178, lr: 0.01000 #> Loss at epoch 22: 0.155673, lr: 0.01000 #> Loss at epoch 23: 0.151522, lr: 0.01000 #> Loss at epoch 24: 0.109653, lr: 0.01000 #> Loss at epoch 25: 0.195620, lr: 0.01000 #> Loss at epoch 26: 0.269720, lr: 0.01000 #> Loss at epoch 27: 0.378170, lr: 0.01000 #> Loss at epoch 28: 0.175552, lr: 0.01000 #> Loss at epoch 29: 0.233647, lr: 0.01000 #> Loss at epoch 30: 0.144049, lr: 0.01000 #> Loss at epoch 31: 0.194575, lr: 0.01000 #> Loss at epoch 32: 0.296068, lr: 0.01000 #> Loss at epoch 33: 0.160547, lr: 0.01000 #> Loss at epoch 34: 0.146080, lr: 0.01000 #> Loss at epoch 35: 0.139807, lr: 0.01000 #> Loss at epoch 36: 0.133486, lr: 0.01000 #> Loss at epoch 37: 0.118914, lr: 0.01000 #> Loss at epoch 38: 0.179503, lr: 0.01000 #> Loss at epoch 39: 0.188152, lr: 0.01000 #> Loss at epoch 40: 0.139315, lr: 0.01000 #> Loss at epoch 41: 0.184768, lr: 0.01000 #> Loss at epoch 42: 0.227238, lr: 0.01000 #> Loss at epoch 43: 0.202718, lr: 0.01000 #> Loss at epoch 44: 0.117323, lr: 0.01000 #> Loss at epoch 45: 0.256937, lr: 0.01000 #> Loss at epoch 46: 0.142377, lr: 0.01000 #> Loss at epoch 47: 0.110374, lr: 0.01000 #> Loss at epoch 48: 0.127568, lr: 0.01000 #> Loss at epoch 49: 0.222329, lr: 0.01000 #> Loss at epoch 50: 0.133137, lr: 0.01000 #> Loss at epoch 51: 0.138229, lr: 0.01000 #> Loss at epoch 52: 0.107371, lr: 0.01000 #> Loss at epoch 53: 0.127341, lr: 0.01000 #> Loss at epoch 54: 0.107996, lr: 0.01000 #> Loss at epoch 55: 0.121096, lr: 0.01000 #> Loss at epoch 56: 0.129694, lr: 0.01000 #> Loss at epoch 57: 0.139435, lr: 0.01000 #> Loss at epoch 58: 0.124969, lr: 0.01000 #> Loss at epoch 59: 0.178538, lr: 0.01000 #> Loss at epoch 60: 0.199529, lr: 0.01000 #> Loss at epoch 61: 0.121888, lr: 0.01000 #> Loss at epoch 62: 0.193695, lr: 0.01000 #> Loss at epoch 63: 0.219163, lr: 0.01000 #> Loss at epoch 64: 0.126533, lr: 0.01000 #> Loss at epoch 65: 0.127863, lr: 0.01000 #> Loss at epoch 66: 0.242394, lr: 0.01000 #> Loss at epoch 67: 0.142153, lr: 0.01000 #> Loss at epoch 68: 0.120092, lr: 0.01000 #> Loss at epoch 69: 0.133947, lr: 0.01000 #> Loss at epoch 70: 0.297997, lr: 0.01000 #> Loss at epoch 71: 0.146286, lr: 0.01000 #> Loss at epoch 72: 0.119438, lr: 0.01000 #> Loss at epoch 73: 0.194569, lr: 0.01000 #> Loss at epoch 74: 0.140918, lr: 0.01000 #> Loss at epoch 75: 0.143500, lr: 0.01000 #> Loss at epoch 76: 0.208884, lr: 0.01000 #> Loss at epoch 77: 0.129516, lr: 0.01000 #> Loss at epoch 78: 0.123821, lr: 0.01000 #> Loss at epoch 79: 0.139560, lr: 0.01000 #> Loss at epoch 80: 0.143300, lr: 0.01000 #> Loss at epoch 81: 0.238831, lr: 0.01000 #> Loss at epoch 82: 0.163042, lr: 0.01000 #> Loss at epoch 83: 0.171101, lr: 0.01000 #> Loss at epoch 84: 0.181753, lr: 0.01000 #> Loss at epoch 85: 0.110454, lr: 0.01000 #> Loss at epoch 86: 0.108078, lr: 0.01000 #> Loss at epoch 87: 0.113957, lr: 0.01000 #> Loss at epoch 88: 0.115675, lr: 0.01000 #> Loss at epoch 89: 0.119583, lr: 0.01000 #> Loss at epoch 90: 0.149343, lr: 0.01000 #> Loss at epoch 91: 0.160689, lr: 0.01000 #> Loss at epoch 92: 0.123855, lr: 0.01000 #> Loss at epoch 93: 0.107517, lr: 0.01000 #> Loss at epoch 94: 0.152789, lr: 0.01000 #> Loss at epoch 95: 0.118639, lr: 0.01000 #> Loss at epoch 96: 0.140240, lr: 0.01000 #> Loss at epoch 97: 0.115829, lr: 0.01000 #> Loss at epoch 98: 0.121600, lr: 0.01000 #> Loss at epoch 99: 0.209076, lr: 0.01000 #> Loss at epoch 100: 0.137243, lr: 0.01000 #> dnn(formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width +  #>     Species - 1, data = datasets::iris[-validation_set, ]) #> An `nn_module` containing 2,951 parameters. #>  #> ── Modules ───────────────────────────────────────────────────────────────────── #> • 0: <nn_linear> #350 parameters #> • 1: <nn_selu> #0 parameters #> • 2: <nn_linear> #2,550 parameters #> • 3: <nn_selu> #0 parameters #> • 4: <nn_linear> #51 parameters #> [[1]] #> [[1]]$`0.weight` #>               [,1]         [,2]         [,3]         [,4]         [,5] #>  [1,]  0.310041785  0.056466084 -0.030777281 -0.061467029 -0.381910652 #>  [2,]  0.096917078 -0.284059495  0.387606889 -0.123843633 -0.272936016 #>  [3,] -0.039840389  0.035786811 -0.117481865 -0.208768919  0.008264706 #>  [4,] -0.190620080 -0.285334140 -0.332470834  0.121186979  0.302090168 #>  [5,]  0.054967031  0.394764125  0.150407448  0.351974577  0.203283578 #>  [6,]  0.044861589 -0.219475687 -0.072478101 -0.397185534  0.371155500 #>  [7,]  0.234426647  0.272721618 -0.410195678 -0.372067094  0.274688005 #>  [8,]  0.379165590 -0.265989453  0.365500450  0.192251101  0.220390141 #>  [9,] -0.005263509  0.209010586 -0.308308184  0.095634416  0.327763438 #> [10,]  0.159439862  0.225942373 -0.354671150  0.043739215  0.204244107 #> [11,]  0.367763340  0.020335814  0.054445889  0.092177734 -0.045996092 #> [12,] -0.323729157  0.047000661  0.181349322  0.250365347 -0.403811544 #> [13,]  0.003355944 -0.078241579 -0.368245274 -0.379298002  0.071744010 #> [14,] -0.408638597  0.394821376 -0.370893776 -0.177140564 -0.290234447 #> [15,]  0.332196653  0.127773061 -0.367072344  0.366225094 -0.056004740 #> [16,] -0.050239474  0.317443579 -0.345889300  0.399746478  0.009205391 #> [17,] -0.248090640 -0.362117767  0.005885564 -0.399638623  0.293441921 #> [18,]  0.292567074 -0.020233978  0.176903173 -0.258840650  0.314398170 #> [19,] -0.157206804  0.122951016  0.308768868 -0.005263732  0.146723971 #> [20,]  0.212105453 -0.320513844  0.423552245  0.153410822 -0.267483592 #> [21,] -0.198905572  0.336916029  0.263850689 -0.376343548  0.028775174 #> [22,]  0.247730076  0.012172364 -0.310440153 -0.063736878 -0.183912441 #> [23,] -0.134813294 -0.092973262  0.266510487 -0.318384588  0.147982746 #> [24,] -0.129067034  0.362795651 -0.132478923 -0.070350789  0.370472103 #> [25,]  0.369547665  0.042614538  0.252303213  0.022242259 -0.226773947 #> [26,]  0.373747379 -0.250783592  0.087982938  0.288078308  0.403594017 #> [27,] -0.268949568 -0.059978273  0.322273076  0.284306377 -0.088669114 #> [28,]  0.293454349 -0.112885825 -0.370631307  0.227355048  0.239363566 #> [29,] -0.174835369  0.004667699  0.141663000 -0.158226714  0.197832197 #> [30,]  0.236765489 -0.161163852  0.216879562 -0.337126106  0.111462891 #> [31,]  0.379788220  0.215083420 -0.308225453 -0.201632604 -0.116575055 #> [32,]  0.001619880 -0.155605987  0.159137994  0.365819424 -0.310314476 #> [33,] -0.061747488  0.198204234  0.031028265 -0.002054786 -0.149048373 #> [34,] -0.191026971  0.264278740  0.280771583 -0.025198601 -0.115467802 #> [35,]  0.173776031  0.108991370  0.325029939  0.078180946 -0.296267718 #> [36,] -0.188852131 -0.368722320  0.410472006  0.208343983  0.182895988 #> [37,]  0.272805184  0.244947597  0.108614266  0.368560135 -0.082802795 #> [38,] -0.186070487 -0.354668260 -0.228593543  0.021106338 -0.122287266 #> [39,]  0.270844519  0.244983479 -0.293693155  0.332651168 -0.345101923 #> [40,] -0.335374564  0.215776697  0.332724422  0.124730229 -0.306448072 #> [41,]  0.004630560 -0.291404635  0.002775818  0.381321788  0.243777886 #> [42,] -0.324513793 -0.116663441  0.171323329 -0.094329029  0.069887638 #> [43,]  0.301291585  0.355435729 -0.327892840 -0.155534461  0.076317944 #> [44,]  0.150552824 -0.217183739  0.307533503  0.247104451  0.186360613 #> [45,] -0.080484994 -0.233565614 -0.167951852  0.028991010 -0.284737974 #> [46,]  0.087702267  0.055651419  0.336162686  0.329957277 -0.121896528 #> [47,]  0.376410842  0.226589948 -0.268014759 -0.259112179  0.037178248 #> [48,]  0.179435685  0.027584616  0.347887844 -0.211679831 -0.359251767 #> [49,] -0.159835830 -0.268126428 -0.128083020 -0.201046750 -0.040545963 #> [50,]  0.249691755 -0.009195225  0.229898527  0.134929433  0.085048057 #>               [,6] #>  [1,]  0.278465867 #>  [2,] -0.264398128 #>  [3,] -0.236429602 #>  [4,] -0.152897060 #>  [5,]  0.147502735 #>  [6,] -0.151289701 #>  [7,] -0.359241545 #>  [8,] -0.206879929 #>  [9,] -0.274956793 #> [10,]  0.105866380 #> [11,] -0.388663024 #> [12,] -0.096263476 #> [13,] -0.384904176 #> [14,]  0.134764880 #> [15,] -0.017227562 #> [16,]  0.233257100 #> [17,] -0.389616877 #> [18,] -0.372649401 #> [19,] -0.337289006 #> [20,]  0.174959362 #> [21,]  0.180775434 #> [22,]  0.201236144 #> [23,]  0.086315453 #> [24,]  0.207396328 #> [25,] -0.250886559 #> [26,]  0.003087978 #> [27,] -0.217189193 #> [28,] -0.095199153 #> [29,] -0.041204523 #> [30,]  0.064053044 #> [31,] -0.006159062 #> [32,]  0.305280805 #> [33,] -0.363528341 #> [34,]  0.076703586 #> [35,]  0.202466831 #> [36,]  0.313578278 #> [37,] -0.372843832 #> [38,]  0.026933616 #> [39,] -0.227920890 #> [40,] -0.133476347 #> [41,] -0.219752759 #> [42,]  0.337119251 #> [43,]  0.238151565 #> [44,]  0.024452236 #> [45,]  0.377787799 #> [46,]  0.111710593 #> [47,] -0.196032837 #> [48,]  0.341378748 #> [49,] -0.178270057 #> [50,] -0.210248232 #>  #> [[1]]$`0.bias` #>  [1] -0.25561336  0.22518305 -0.16073120 -0.07752977 -0.19458698  0.19798042 #>  [7]  0.14548264  0.24568868 -0.02280121  0.37957442  0.38953868  0.36174467 #> [13] -0.33154607  0.18822606 -0.12194142  0.01719025  0.02131870 -0.03506903 #> [19] -0.33497635 -0.23415110 -0.37683105 -0.01099822  0.22842492  0.13528498 #> [25] -0.15856560  0.40558493 -0.07111081 -0.05800575 -0.01321298  0.24051502 #> [31] -0.30412966  0.19537519 -0.13142307  0.18481837  0.28914303 -0.40213579 #> [37] -0.23775935  0.25145209 -0.02598707  0.12058073 -0.35500014 -0.13285562 #> [43]  0.05056258  0.05108472 -0.05073499 -0.19361317  0.09780050 -0.19770467 #> [49] -0.15477543  0.15960088 #>  #> [[1]]$`2.weight` #>               [,1]         [,2]          [,3]         [,4]          [,5] #>  [1,]  0.026960978  0.127964526 -0.0017767049  0.100354470  0.0325662903 #>  [2,]  0.110577829 -0.036314901 -0.0275442209  0.075032182  0.1036647260 #>  [3,] -0.012430079 -0.055965617  0.0813905597 -0.121399187 -0.0990718976 #>  [4,]  0.004708259  0.105532870 -0.0116727874  0.084156908  0.0042911926 #>  [5,] -0.043423250 -0.017089464  0.1286267638  0.142723277 -0.1191877574 #>  [6,]  0.050988041 -0.066571645 -0.1289761215  0.095631711 -0.0654004961 #>  [7,]  0.128898606 -0.040511020 -0.1143931001 -0.033154380 -0.1122059822 #>  [8,]  0.044762008  0.017548574 -0.0046067527 -0.112874024  0.0157739520 #>  [9,]  0.016292704 -0.069233574 -0.1130455956 -0.013773121 -0.0141173517 #> [10,] -0.094528891  0.016637584  0.0771179870 -0.060156759  0.0811923891 #> [11,]  0.147077337 -0.136675835  0.1080280840 -0.014030960  0.1070866361 #> [12,]  0.089797229  0.115562066  0.0958796591 -0.081481084  0.0070021846 #> [13,]  0.079462335  0.012134679  0.0972579196 -0.017787255  0.0377938002 #> [14,]  0.065425187 -0.039855342 -0.0681877062  0.095422417  0.0560497567 #> [15,] -0.081616588 -0.045604486 -0.0296995379  0.087979011  0.0113893067 #> [16,]  0.117135093 -0.006968080  0.0005804547 -0.049909491  0.0882647857 #> [17,]  0.033904817  0.075989559  0.0226780660 -0.091473892  0.0212819800 #> [18,]  0.100671835  0.104273371 -0.0506714173  0.042039506 -0.0227875151 #> [19,]  0.059875298 -0.120996647  0.0049485755  0.090480939 -0.0041688089 #> [20,] -0.013618138 -0.062476747  0.0052953875  0.035696588 -0.0032626595 #> [21,] -0.041940637 -0.003276150  0.1156219020 -0.060439281 -0.0355195105 #> [22,]  0.116904236 -0.077088803 -0.0523054227  0.021940816  0.0318781845 #> [23,] -0.084044904  0.061749727 -0.0349417739 -0.102698967 -0.0830240771 #> [24,] -0.064915657 -0.116758533 -0.0495683253  0.098460637 -0.0476645306 #> [25,] -0.051129743 -0.089778706  0.0737424120 -0.039981034  0.0154818846 #> [26,] -0.055858582  0.067575842 -0.1373317838 -0.093948402 -0.0074209990 #> [27,] -0.015901811  0.072781101  0.0821391568 -0.052609488  0.0004385635 #> [28,]  0.052076120 -0.058434799 -0.1073053554 -0.023488889  0.0958272293 #> [29,] -0.099434189 -0.101433590 -0.1001544967  0.160364762 -0.0925548598 #> [30,]  0.043506954  0.110664986 -0.0844061300  0.080083430 -0.1550548822 #> [31,]  0.109656408 -0.014252207 -0.0650179312 -0.054530047  0.0296734218 #> [32,]  0.019898258 -0.007784961  0.0634148940 -0.099282786 -0.0840819776 #> [33,]  0.147789687  0.062120654 -0.0148690632 -0.039454769  0.0245237537 #> [34,] -0.074235030 -0.121343099  0.0516729914  0.003825655 -0.0376356393 #> [35,] -0.101011693 -0.151845738  0.0285462439  0.015792744  0.0707052425 #> [36,]  0.091832668 -0.072186276 -0.1380865872  0.107597679 -0.0201356634 #> [37,]  0.076455034  0.027576301  0.0664887875 -0.033234108  0.0689588115 #> [38,]  0.088113405  0.112461872  0.0565326400  0.083760314  0.1274488568 #> [39,] -0.000973803 -0.027108448  0.0499237217  0.073490307 -0.0567732826 #> [40,] -0.113266878  0.130200341  0.0818096176  0.132274449 -0.1245397702 #> [41,] -0.027795019 -0.014152076  0.0968303159 -0.037199378  0.0271946993 #> [42,] -0.015700435  0.063779332  0.1277101338  0.041018035  0.1155400500 #> [43,] -0.103551142 -0.012183781  0.0648908690 -0.109234370  0.1413936615 #> [44,]  0.079088651 -0.026416637 -0.0186773073  0.081324041 -0.0595924966 #> [45,]  0.134444684 -0.064484432  0.0075822789  0.032702051  0.1301333755 #> [46,]  0.003196132 -0.041630283  0.0989680514  0.081499301 -0.1084510460 #> [47,]  0.062777959 -0.022094890  0.0753947645 -0.078937411 -0.1332911849 #> [48,]  0.059221517 -0.123083778  0.1237777919 -0.023731390 -0.0788603574 #> [49,]  0.045159645  0.010418971 -0.0518990457 -0.010499123 -0.0274276789 #> [50,]  0.107535489 -0.131990939 -0.0187372584  0.096654125  0.1478150487 #>               [,6]          [,7]         [,8]         [,9]        [,10] #>  [1,]  0.128615692  0.0651613697  0.019587126  0.009085578  0.007635765 #>  [2,] -0.133208930 -0.0164821912  0.011708687 -0.058904126 -0.068615898 #>  [3,]  0.045129593 -0.0873894170 -0.008568774  0.020308236 -0.056090597 #>  [4,]  0.110515878 -0.0331123360 -0.016382074 -0.010430193  0.109024808 #>  [5,]  0.057116624  0.0888568014 -0.078748003 -0.059532549 -0.010723185 #>  [6,]  0.047788933 -0.0087121138 -0.125016138 -0.118307307 -0.109846584 #>  [7,] -0.021345884  0.0651847199  0.116493285  0.028343495 -0.089281283 #>  [8,] -0.117731452  0.0162314828  0.079611339 -0.049605872 -0.019059492 #>  [9,]  0.027822986  0.0571680479 -0.015247654  0.078460298 -0.033117965 #> [10,]  0.050589535 -0.0170877688  0.108060002  0.058359083  0.116673224 #> [11,] -0.126470521 -0.0257432573  0.098935612  0.045130406 -0.026951237 #> [12,]  0.112086527  0.0020475565 -0.069698974  0.107151821 -0.126291960 #> [13,] -0.030815950 -0.0194635876 -0.078161761 -0.057441738  0.019809548 #> [14,] -0.023895182 -0.0355590992 -0.002793760  0.104804307 -0.068409339 #> [15,]  0.118170731 -0.1517609656  0.114562348 -0.093116917 -0.012780077 #> [16,]  0.006751562 -0.1033811569 -0.073046282 -0.122720927  0.055423599 #> [17,] -0.021702977  0.0918852016  0.020065937  0.026980452 -0.060435835 #> [18,]  0.096389413  0.1245242059 -0.123400651  0.124359898  0.091072410 #> [19,] -0.003416309 -0.1081903204  0.077166416 -0.129685745 -0.021282412 #> [20,]  0.082225993 -0.0550794527  0.037700519  0.018185338 -0.119082503 #> [21,] -0.017368045  0.0432806835  0.135338932 -0.025924040  0.073203146 #> [22,]  0.101027898  0.0650609657 -0.049895376 -0.086654589 -0.075503655 #> [23,] -0.098290324  0.0005833716  0.036455501  0.136490196  0.050812699 #> [24,]  0.116775669 -0.0928014293 -0.056379434  0.128660366  0.003061336 #> [25,]  0.059059832 -0.0657451674  0.018378967 -0.133007005 -0.120323956 #> [26,]  0.117446966  0.0466948189  0.039942194 -0.069378734  0.124539264 #> [27,]  0.143033400 -0.0369247980  0.129758760 -0.084996179 -0.099091038 #> [28,]  0.133977458  0.0196865592 -0.014677896  0.126786157 -0.072220415 #> [29,]  0.084962562  0.0237737950 -0.130116820  0.105988950 -0.013028245 #> [30,]  0.070499673 -0.0196498893  0.054842230 -0.017985715 -0.043657646 #> [31,]  0.101860330 -0.0311220326  0.109820485  0.015837178  0.139619187 #> [32,]  0.125539050 -0.0810097158  0.108258598 -0.031945761 -0.005192360 #> [33,]  0.084703587  0.0745289996  0.094192393  0.121868901 -0.024971634 #> [34,]  0.063387103 -0.1155115664 -0.113093950  0.054530501  0.115432620 #> [35,]  0.077014133  0.1106829271 -0.150881767  0.042826027  0.144658938 #> [36,] -0.083550654 -0.0059118411 -0.095284559 -0.063354902 -0.043446291 #> [37,]  0.106778108  0.0524229184 -0.051318724  0.009460996 -0.152775094 #> [38,]  0.125011399 -0.0717030540  0.002147310  0.080942929  0.102488033 #> [39,] -0.130276904  0.0289620403  0.105759367 -0.049943477 -0.036498379 #> [40,] -0.015105191 -0.0717996731 -0.126712099 -0.097346187 -0.038093656 #> [41,] -0.037389189 -0.0413624346 -0.103757344 -0.091951534 -0.070600167 #> [42,] -0.101995170  0.0876376182  0.099786036  0.141454771  0.132711843 #> [43,]  0.048581798  0.0127765723 -0.008723839  0.102895968 -0.036900874 #> [44,]  0.010878510 -0.0427909307  0.121882021 -0.060131483  0.013180534 #> [45,]  0.032273579  0.0237923451 -0.022391638  0.075771078  0.019674709 #> [46,]  0.067147858 -0.0347764231  0.059639964  0.033017311 -0.155587152 #> [47,]  0.080097966 -0.1251091510  0.009457130 -0.016554197  0.097880490 #> [48,] -0.005393745 -0.1184314638 -0.016659947 -0.035639256  0.038882591 #> [49,] -0.130600303 -0.0741096660  0.021983629 -0.082501292 -0.096752688 #> [50,] -0.003839920 -0.0087027214  0.040448979 -0.105980858  0.104435436 #>               [,11]         [,12]        [,13]        [,14]        [,15] #>  [1,]  0.0002624842 -0.0023812759  0.039197616 -0.059695374 -0.003062901 #>  [2,]  0.0221647676  0.0488279052 -0.088957757 -0.005663223  0.091241084 #>  [3,] -0.0618543215  0.0007720949  0.061452206  0.081192389 -0.016213262 #>  [4,]  0.1011636779 -0.1226705015  0.109733433  0.109299622 -0.111640640 #>  [5,] -0.1240960807 -0.0081755742  0.017815713 -0.076016903 -0.152061895 #>  [6,] -0.0570435226 -0.1153121293 -0.039190743 -0.053651564  0.065526344 #>  [7,]  0.0859261826  0.1009730473 -0.044282746 -0.002852636 -0.064913228 #>  [8,] -0.0867760256  0.0351805761  0.085232444  0.080720857  0.062261041 #>  [9,]  0.0985951126 -0.0929363817 -0.020460231  0.004329385 -0.017860843 #> [10,]  0.0894969776 -0.0460984446  0.136810973  0.063093007 -0.009214117 #> [11,]  0.1290306896  0.1238171905 -0.030017557  0.120320603 -0.028323404 #> [12,]  0.1005669609  0.0741244853  0.011500746 -0.130893856 -0.010640970 #> [13,] -0.0840552300  0.1179966778  0.129922956 -0.127962768 -0.126946136 #> [14,] -0.0393721908 -0.0383193605  0.109990217 -0.006765046  0.056323070 #> [15,]  0.1142441779  0.1306462884 -0.080369897  0.033144109 -0.100693680 #> [16,] -0.1215892732 -0.1165406182 -0.016849907  0.079076745 -0.026045492 #> [17,]  0.0888738111 -0.0885121003  0.040400557 -0.021410255 -0.069223955 #> [18,]  0.0805597007  0.0562826581  0.063041963  0.087775685  0.058981050 #> [19,] -0.0896167308 -0.0163420178 -0.048739340  0.111437969 -0.150256395 #> [20,]  0.0044480846 -0.0877065584  0.017678421 -0.039677396  0.132251650 #> [21,]  0.1134309694 -0.0300797615 -0.052703049  0.079517744 -0.073667169 #> [22,] -0.1097411215  0.0975653604  0.038585920 -0.127959967 -0.002441226 #> [23,]  0.0256296080 -0.0446673483 -0.105267361  0.052076843  0.064879157 #> [24,]  0.1097956449  0.1229989752  0.146926031  0.044733308 -0.148988932 #> [25,]  0.0842371508 -0.0377305597  0.010574839  0.070976518  0.057141941 #> [26,]  0.0036595827  0.0359169357 -0.017079053 -0.090395480  0.104201175 #> [27,]  0.0406274833  0.1042961702  0.054493967 -0.052218534  0.108445257 #> [28,]  0.1049249545  0.0248129200 -0.021238042 -0.032268282 -0.115141615 #> [29,] -0.1162417680  0.0079784747 -0.078549922 -0.104509488 -0.067266367 #> [30,]  0.0002167734  0.1427182853 -0.122528531  0.101729825  0.026152305 #> [31,] -0.0003208355  0.0939757153 -0.035403874 -0.029060850 -0.111765496 #> [32,]  0.0950080231 -0.0888303593 -0.083858326  0.014481981 -0.029015679 #> [33,]  0.1379536539  0.1103916094 -0.119765885  0.064055599  0.137075067 #> [34,]  0.0995606631 -0.0108617693 -0.037727829 -0.077461280  0.033174824 #> [35,]  0.1306215972  0.0435220227 -0.057435196  0.054040127 -0.094289951 #> [36,] -0.0698421001  0.1388059556 -0.041950114  0.119120702 -0.004587101 #> [37,] -0.1578302979  0.0646455139 -0.060146332 -0.128271177 -0.064917542 #> [38,] -0.0494732670  0.1362746060  0.132954985  0.071063623  0.061108697 #> [39,]  0.0073660458  0.1247473359  0.131145284  0.037366956  0.124382429 #> [40,]  0.0867417380  0.1177681237 -0.015310575 -0.117177226  0.088807963 #> [41,]  0.0070498311  0.1179719195 -0.003778352 -0.059266731 -0.152961180 #> [42,]  0.0618789792 -0.0414193161 -0.087340847 -0.087936610 -0.016740173 #> [43,] -0.0760903955 -0.0640175939 -0.132757187  0.096599780  0.110672228 #> [44,]  0.0457086228  0.0393204726  0.037074693 -0.034112103 -0.026024818 #> [45,] -0.1084931195  0.1275514066 -0.100173153 -0.038487326 -0.014519779 #> [46,] -0.1319760233 -0.0057564224  0.011516008  0.082760207  0.056483455 #> [47,] -0.1409843117 -0.0388250649  0.080998145 -0.082665838 -0.015796999 #> [48,] -0.0498808660  0.0388495512  0.060632940  0.126955494  0.069232337 #> [49,]  0.1248687729  0.0593427196  0.035576075  0.076139726  0.026635852 #> [50,]  0.0408561677  0.0967284665 -0.007427815 -0.040393632 -0.108866803 #>              [,16]         [,17]        [,18]         [,19]         [,20] #>  [1,]  0.136097118  0.0335144810  0.136920363 -0.0198072307 -0.1398450881 #>  [2,]  0.064260885 -0.0543213636 -0.038135368  0.0329596959  0.0001195536 #>  [3,] -0.121754661 -0.1158653796 -0.043949313 -0.0882439241 -0.0752319917 #>  [4,] -0.146381289 -0.0049639652  0.078407496  0.0060241669  0.0931671560 #>  [5,] -0.056639418 -0.0312942564  0.089148164  0.0980993807  0.1393552423 #>  [6,] -0.135772273 -0.0351301953  0.044115700 -0.0122761736  0.0499334596 #>  [7,]  0.143752992 -0.1018336788  0.028378017  0.0064793364 -0.1227597296 #>  [8,]  0.039237924  0.0271777157 -0.107288159 -0.0640683994  0.1411944777 #>  [9,] -0.049796250 -0.1229324415 -0.027613934 -0.0614999495  0.0101911668 #> [10,] -0.126358852 -0.1382393688 -0.066666529  0.1450383812 -0.1006120890 #> [11,]  0.044727191  0.0710154921 -0.064718507 -0.1053046063  0.0108262515 #> [12,]  0.124709032 -0.1242867485 -0.085214078  0.1366029382 -0.0568371341 #> [13,]  0.090192586  0.0355139300 -0.036810376  0.0644533932 -0.0173979402 #> [14,]  0.076683469 -0.0209397264 -0.078452058 -0.0934810191  0.1178109124 #> [15,]  0.091182806 -0.0771161914 -0.030675955  0.0452624336  0.0430782773 #> [16,]  0.034315526 -0.0182159599  0.121978514 -0.0440521277 -0.0695612133 #> [17,] -0.122793593  0.0170422811 -0.026430264 -0.1019367650 -0.0002131159 #> [18,] -0.078287482  0.0411276072  0.072868854 -0.0089376876  0.0565720759 #> [19,] -0.028371321  0.1324283779 -0.045550324  0.0905252919 -0.0945882574 #> [20,]  0.025520423  0.0005514851  0.045834325  0.0082625840  0.0440475643 #> [21,] -0.024915867  0.1246710569 -0.140535340 -0.0185845997 -0.0694260597 #> [22,]  0.002310004 -0.0577132329  0.039425056 -0.0546411350 -0.0436276682 #> [23,] -0.077144258 -0.1167390272 -0.025917334  0.1266586781  0.0664739162 #> [24,] -0.026747091  0.0497508347 -0.043260377  0.1337679625  0.1273174584 #> [25,] -0.008527032 -0.0232930668  0.100493304 -0.0300757606 -0.1208241135 #> [26,] -0.130528077 -0.1021562591  0.071928829 -0.0895596743  0.0458906442 #> [27,]  0.082846403  0.1190618351  0.064606100  0.0906131640  0.0891003162 #> [28,]  0.007074690  0.0727209002 -0.087720439 -0.0633916780 -0.0723467246 #> [29,] -0.086128809  0.1227671131  0.026126839  0.1026163101 -0.0181686580 #> [30,] -0.146945640 -0.0197920743 -0.070925333  0.0451418646 -0.1031755731 #> [31,]  0.069843940 -0.0184806604  0.032609120 -0.0413591713  0.1047806889 #> [32,]  0.155956149  0.0379864089  0.068081290 -0.0607876815 -0.0182669237 #> [33,]  0.139337823  0.0060330397  0.018484987 -0.0800135210 -0.0826304853 #> [34,]  0.067659423  0.0737650171  0.044851091  0.1168197244  0.1149740368 #> [35,] -0.076033227  0.0493444204 -0.077050067  0.0491596349 -0.0248252545 #> [36,] -0.013994023  0.0956317037  0.098043568 -0.0004167318  0.0258071236 #> [37,] -0.065594725 -0.0180412773 -0.004080771  0.0961968154 -0.0961423740 #> [38,]  0.016048370  0.0176231321  0.110383190 -0.1206324250 -0.0541111380 #> [39,]  0.138075233 -0.0127210328  0.001796583  0.1202861816  0.0364234261 #> [40,] -0.016514983 -0.0031150705 -0.066414833 -0.1019698977  0.0257272013 #> [41,] -0.022121204  0.0508416072 -0.084710814  0.0205329005 -0.0862177238 #> [42,] -0.111984834  0.0016835897 -0.127497077 -0.1218086407  0.1055860296 #> [43,]  0.145849213 -0.0734981447 -0.118179820  0.0079309950 -0.0411595441 #> [44,] -0.097285882 -0.0541851148 -0.068149172  0.1176233739 -0.0380356796 #> [45,]  0.036075808 -0.0112632466  0.007295030 -0.0342049971 -0.0740333945 #> [46,] -0.123695433 -0.1027973816 -0.108606212 -0.0129256556 -0.0634669214 #> [47,] -0.135048136  0.1588753909 -0.003198137 -0.1173868626 -0.1089150310 #> [48,]  0.088402048  0.0471589901  0.071237668  0.1235342696  0.0101162745 #> [49,]  0.145051464  0.0066348920  0.074581996  0.0151131628  0.0154095991 #> [50,]  0.011262884 -0.0801855475 -0.011959044  0.0360552594 -0.0214720275 #>               [,21]        [,22]        [,23]        [,24]        [,25] #>  [1,] -0.0653150901 -0.082653731 -0.001397647 -0.072169587  0.088948093 #>  [2,]  0.0762784034  0.015461311  0.072627425  0.108315147 -0.033457879 #>  [3,] -0.0790998116 -0.076488361  0.118612848  0.109569632 -0.022870664 #>  [4,]  0.0018954078  0.038476653  0.077969536  0.021754215 -0.048081223 #>  [5,] -0.0870216265  0.035784818 -0.100582995 -0.086799808  0.081710398 #>  [6,] -0.0957068503 -0.049486358  0.015470796  0.119030833  0.005298922 #>  [7,] -0.0419228896 -0.118424475 -0.048809703 -0.040623195 -0.131098330 #>  [8,] -0.0084566083 -0.103328250 -0.136458397  0.109815978 -0.081257753 #>  [9,]  0.0672085062  0.098180547  0.033573180  0.022586007 -0.093069158 #> [10,]  0.0626347959 -0.024496401  0.019557200 -0.075982705  0.121736273 #> [11,] -0.1337990165  0.051377099 -0.121074252  0.029812973  0.078014866 #> [12,] -0.1318299472 -0.042065371  0.047022156 -0.112535283 -0.126194775 #> [13,] -0.1187473685 -0.112747438  0.028815428 -0.097469807  0.020961253 #> [14,] -0.0503965355 -0.022470145 -0.087926179 -0.069356307 -0.110184595 #> [15,]  0.0003474444  0.099785388  0.015931945  0.102030858  0.105047874 #> [16,] -0.1385817081 -0.052913398  0.069654644 -0.101803720  0.046772238 #> [17,]  0.1133948788  0.032837428 -0.045651212 -0.093962125  0.121077128 #> [18,]  0.1395898759  0.121952027  0.045556445 -0.047038220 -0.048095562 #> [19,]  0.1280393302  0.113872245 -0.078972004  0.085601322 -0.134697706 #> [20,]  0.1436798424  0.086101130 -0.128912956 -0.041753042 -0.104627952 #> [21,]  0.0357904397 -0.130725920 -0.110822037 -0.137366608 -0.049063582 #> [22,] -0.0793850124 -0.074089713 -0.111413874 -0.082208641  0.077883311 #> [23,]  0.0037307467 -0.020444844  0.021051209  0.125349402  0.117704824 #> [24,] -0.0044416268  0.096963532  0.098763630 -0.069076277  0.036545705 #> [25,]  0.0131092612  0.128026545 -0.040954776  0.122678690  0.114732273 #> [26,] -0.0981791839  0.123315059  0.140443161  0.118036322 -0.062271044 #> [27,]  0.0629462674 -0.031458374  0.110706143 -0.036312222  0.016305843 #> [28,] -0.0884045437  0.069425724  0.103618570 -0.080743775 -0.064392000 #> [29,] -0.1058339253 -0.131526753 -0.063105218  0.031022489 -0.106096499 #> [30,]  0.0033695099 -0.115257397  0.039112948 -0.063091323  0.061216030 #> [31,] -0.0177375618 -0.052562330 -0.107608676  0.120507099 -0.098355792 #> [32,] -0.0657060519 -0.089669921  0.037554938 -0.032432232  0.058191579 #> [33,] -0.1263518482 -0.042225193 -0.028558806  0.024243111 -0.009031371 #> [34,]  0.0103011662  0.098607749 -0.009292046  0.113878503  0.054975364 #> [35,]  0.0635855421 -0.098288856 -0.039125014  0.068869919  0.153910190 #> [36,] -0.1155938581 -0.088873550  0.120309815  0.052349322  0.108798407 #> [37,]  0.0617160201  0.016920596 -0.103448518 -0.017891113 -0.071731940 #> [38,] -0.0489385873  0.075250722 -0.040060230 -0.112579472  0.120759338 #> [39,]  0.1209763139  0.073411800 -0.060067952 -0.127888337  0.107870601 #> [40,] -0.0848286003  0.017419035 -0.130219549 -0.057814498  0.060119338 #> [41,] -0.1316826344 -0.038912565  0.026682187 -0.015278154 -0.092057280 #> [42,] -0.0771671310 -0.093392923  0.021113103  0.025378495 -0.049788710 #> [43,] -0.0144152269 -0.042030450 -0.007644751  0.160102889 -0.072237827 #> [44,] -0.0602823459  0.036609247 -0.025647944  0.002605771 -0.008606534 #> [45,]  0.0877375528  0.116838746 -0.139405206  0.057679530 -0.108175732 #> [46,]  0.0434620753 -0.129428655  0.005221569 -0.133523926  0.119894408 #> [47,] -0.0088086240  0.082347773  0.031512149 -0.114800528  0.009880719 #> [48,]  0.1237804368  0.039139569  0.019684412 -0.051341165  0.101598047 #> [49,] -0.0826692954  0.003231756  0.121603377 -0.060407359  0.152139857 #> [50,]  0.0986996889  0.034418572 -0.110985354 -0.061269626 -0.116367273 #>              [,26]        [,27]         [,28]        [,29]        [,30] #>  [1,] -0.135432482 -0.013733629 -0.0268465038 -0.108695738 -0.086425729 #>  [2,]  0.022118239 -0.124362826  0.0049737385  0.051282682  0.043835383 #>  [3,] -0.121025220  0.105280668 -0.0007079679 -0.043173708  0.035860188 #>  [4,]  0.064518064 -0.012618396 -0.0309623890 -0.016051359 -0.121556573 #>  [5,] -0.130264640  0.077091046  0.0825270638  0.060746800 -0.077026233 #>  [6,] -0.123993531  0.136673287 -0.0014746217 -0.117449500 -0.011619301 #>  [7,] -0.054822478  0.092674606 -0.0219982229 -0.112592727 -0.081906267 #>  [8,]  0.080386810 -0.037217084  0.0114449188  0.092045836  0.127551079 #>  [9,] -0.054371346 -0.010769932 -0.0734720454 -0.012791469 -0.017894391 #> [10,]  0.085414790  0.064461946 -0.0663619339  0.106195748 -0.044819023 #> [11,] -0.004924979  0.134980559 -0.0774816349  0.120052986  0.100458391 #> [12,] -0.115323804 -0.018379282 -0.1087488681  0.009493904 -0.028831387 #> [13,]  0.039210971 -0.037797228 -0.0246168040 -0.116020352 -0.012794020 #> [14,] -0.130893171  0.117163718 -0.1347086728 -0.065160125 -0.009330949 #> [15,] -0.011983230 -0.052419502 -0.0508079976  0.061569907  0.016641892 #> [16,]  0.094058223 -0.088539772  0.0464358293 -0.096727677 -0.090107501 #> [17,]  0.119267084 -0.136361271  0.1269136518 -0.033341978 -0.014020488 #> [18,]  0.109447092  0.059610091  0.1096823961  0.121539243 -0.015394436 #> [19,]  0.140991047 -0.083255768  0.0797846317  0.145813018 -0.031943064 #> [20,]  0.061667223 -0.100772917  0.0086381398  0.036068521  0.101238601 #> [21,]  0.109147169  0.083407350 -0.0254736729 -0.087212175 -0.104382582 #> [22,] -0.046729151  0.060677718  0.0623331554 -0.067581154 -0.017378960 #> [23,]  0.026770780  0.002162658 -0.0239419956  0.133358479  0.106721289 #> [24,]  0.017915433 -0.045929924 -0.0583675504 -0.028216366  0.144621387 #> [25,] -0.085949212 -0.116827808  0.0697706416 -0.078551054  0.011821175 #> [26,]  0.095378317 -0.087015092 -0.0162793174  0.110065214 -0.076425649 #> [27,] -0.041527562  0.084634066  0.0393950120  0.113316491  0.037764758 #> [28,]  0.048856061  0.116053022 -0.0370341800  0.049980219 -0.078923672 #> [29,] -0.121968597  0.061272085  0.0607651584 -0.037703328 -0.044913594 #> [30,] -0.089348465 -0.068160668  0.0274880249  0.040121157 -0.123443954 #> [31,]  0.100718088  0.048090518  0.1158365980  0.089530744 -0.088876136 #> [32,] -0.078864433 -0.001154359 -0.0917805880 -0.118400954  0.068647712 #> [33,]  0.026979156  0.050237115  0.1335423142  0.039012853  0.020874411 #> [34,]  0.130163282  0.045070820  0.0622231849  0.142299250 -0.123612523 #> [35,]  0.038560927 -0.049156304 -0.0580863394  0.006022370  0.008002006 #> [36,] -0.007149433  0.005921640  0.0948816612 -0.060589157 -0.019810118 #> [37,]  0.107394136 -0.112744749  0.0460529402  0.001709053 -0.099286199 #> [38,]  0.086322509 -0.083238140  0.0391363204  0.009724287 -0.088736400 #> [39,] -0.007054662 -0.070639491 -0.0659814999 -0.038954258 -0.006700234 #> [40,]  0.095053487  0.123993464  0.1160918847 -0.106808387 -0.051484991 #> [41,] -0.126629025  0.055939522 -0.0199572016  0.046442367 -0.060879417 #> [42,]  0.080413722  0.070030428  0.0473230481  0.028376015  0.104843333 #> [43,]  0.107680008 -0.024399709 -0.1041771770 -0.019734215 -0.022783246 #> [44,] -0.003658835 -0.144764289  0.0340566076  0.076908611  0.099978484 #> [45,] -0.094595917 -0.128760695  0.0072153285  0.124427199 -0.080428980 #> [46,]  0.116535045  0.069122270  0.0669872910 -0.012275281  0.016272154 #> [47,] -0.137440473 -0.111354284 -0.0113820257 -0.086027734  0.012489040 #> [48,] -0.111361109  0.010311529 -0.0684027374  0.117102660  0.132612661 #> [49,]  0.087303333 -0.056137085  0.0804986879  0.021919817 -0.033757549 #> [50,]  0.047681522  0.066963948 -0.0547658503 -0.137392163  0.037311655 #>               [,31]        [,32]         [,33]         [,34]        [,35] #>  [1,]  4.119418e-03  0.005354943  0.0615008324 -0.0673721805  0.127567649 #>  [2,]  8.115710e-03 -0.001597370  0.1413451731  0.0111453701  0.083365537 #>  [3,]  7.123000e-02  0.130424812 -0.0197637007 -0.1199887991 -0.006773735 #>  [4,]  2.561303e-02  0.104479782  0.0927725956  0.0546367802 -0.082631879 #>  [5,] -1.419432e-02  0.134362251  0.0869826898  0.1278582811  0.002418342 #>  [6,] -1.021620e-01  0.017680658  0.0292685721  0.0211701971  0.066596076 #>  [7,]  2.383075e-02 -0.094605520  0.0038144193  0.1353558749  0.126034841 #>  [8,] -6.398202e-03 -0.056973152  0.0727848709 -0.1124254614 -0.121588796 #>  [9,]  5.082680e-03  0.118992023  0.0149184661 -0.0805673599  0.122347347 #> [10,]  2.450596e-02  0.070865050  0.1189945862 -0.0084301047 -0.115457244 #> [11,]  9.216104e-02 -0.073676229  0.0176003762  0.1009908020  0.145095497 #> [12,]  6.944238e-02  0.078691460 -0.0799166933  0.0439241268 -0.084314749 #> [13,] -5.195433e-02 -0.092387706 -0.1292426437  0.0871707201 -0.095934086 #> [14,]  9.075823e-02  0.102750070  0.0145790530 -0.0735715181 -0.016840866 #> [15,] -1.141939e-01 -0.118836418 -0.0794174075  0.1293245852  0.019365445 #> [16,] -2.575058e-05  0.131119370 -0.1376513243 -0.0054921010  0.060465634 #> [17,]  8.154223e-02 -0.133517101 -0.0796262175  0.1307410002 -0.094080545 #> [18,] -3.137846e-02  0.034886930 -0.0246193744 -0.0610847659  0.041905813 #> [19,] -1.311596e-01 -0.105248272 -0.0963743106  0.0035762852  0.056864377 #> [20,]  1.021475e-01 -0.078901060 -0.0106707262  0.0448045246 -0.058852002 #> [21,] -1.300380e-01 -0.088698022  0.0068246434 -0.0412954427 -0.098824829 #> [22,]  2.402335e-02 -0.114896819  0.1427040696 -0.0299208574  0.143021703 #> [23,]  3.129367e-02 -0.083421655 -0.0635896176 -0.1183909029  0.036394332 #> [24,] -1.144407e-02  0.038927659 -0.1334333420  0.0991386846 -0.073537767 #> [25,] -4.247996e-02 -0.084830798 -0.1162262559 -0.0630610362  0.070635490 #> [26,]  1.066678e-01  0.026616469 -0.0008086966 -0.0738687143  0.017332477 #> [27,] -7.334574e-02 -0.085976213 -0.1387527585  0.0133319683  0.053887509 #> [28,]  1.199579e-01  0.017921027  0.0265555084 -0.0647381619 -0.112686820 #> [29,]  4.646004e-02  0.103481181 -0.0077379337 -0.0584699512 -0.127315685 #> [30,] -8.779166e-02 -0.081534557  0.1149441004 -0.1097641587 -0.002640798 #> [31,] -3.611234e-02 -0.089529209  0.1226773113 -0.1262448281  0.143234059 #> [32,]  1.131938e-01 -0.113584667 -0.0819735900 -0.0815987960 -0.096093580 #> [33,] -1.206057e-01  0.139052585 -0.1210493222  0.0980160311 -0.124238193 #> [34,] -1.584448e-01 -0.094682805  0.1099263430  0.0920096040 -0.057636816 #> [35,] -1.094254e-01  0.020818086  0.0080653159  0.1271691024  0.051941801 #> [36,]  4.068825e-02 -0.116694801  0.0077959797  0.0323829725 -0.033542398 #> [37,] -2.684097e-02 -0.073492981 -0.0215500314 -0.1431422234  0.018066559 #> [38,]  3.769090e-02 -0.006889630 -0.0774191543  0.0005584536  0.035485208 #> [39,]  1.260280e-01  0.043068994 -0.0832333490  0.1332354397 -0.044889983 #> [40,]  1.757721e-02  0.047361497  0.1353838593 -0.1188367754 -0.090310358 #> [41,]  4.004287e-02 -0.066108346  0.0080027198 -0.0836118013  0.037756905 #> [42,] -5.668549e-02 -0.137050897  0.0459292084 -0.0844485611 -0.061666746 #> [43,]  1.068037e-01  0.090882823  0.0258963406  0.0699067935 -0.028670600 #> [44,]  1.767617e-03 -0.101906493  0.0562481321  0.0872785971 -0.043697286 #> [45,]  8.120101e-02 -0.036879279  0.0891306177  0.0955391452 -0.066103384 #> [46,] -1.192346e-01  0.054285772  0.1073008254  0.1261885762 -0.108337753 #> [47,]  8.251236e-02 -0.016088095 -0.0539547838 -0.0942914858  0.057889357 #> [48,] -7.482830e-02 -0.003918681 -0.1286813915 -0.0813396424 -0.110876977 #> [49,] -5.889519e-02 -0.072576031 -0.0515470132  0.0175846834  0.088819295 #> [50,] -3.340368e-03 -0.110306531  0.0238972269 -0.0379887260 -0.077878296 #>              [,36]         [,37]        [,38]         [,39]        [,40] #>  [1,] -0.127479777 -0.1140485927 -0.075963326  0.0251615867 -0.049125846 #>  [2,]  0.082243696  0.0508740619 -0.076556474  0.1324115396  0.042032581 #>  [3,]  0.119605809 -0.1354805827 -0.113640554  0.0463244319  0.131960616 #>  [4,]  0.105367310 -0.1413798928  0.144013092  0.0852453560 -0.065544069 #>  [5,]  0.096651591 -0.0360918976 -0.139713481  0.0247943029 -0.108490929 #>  [6,] -0.001248871 -0.0446919501 -0.012125368  0.0998837277 -0.095150352 #>  [7,] -0.060061939 -0.1251006275  0.081687614  0.1449331790  0.016169256 #>  [8,]  0.072569676 -0.0395102501  0.081661463 -0.0375313759  0.097328484 #>  [9,] -0.015921921 -0.1052240953 -0.017120395 -0.0289121419 -0.092878364 #> [10,] -0.057698268  0.0949179679  0.088427648  0.1408756226 -0.110234872 #> [11,] -0.024889272  0.0354021564 -0.107824050  0.1067237109 -0.104218066 #> [12,]  0.096355602 -0.1024416089  0.095313370 -0.1571166664  0.075142525 #> [13,] -0.065427102  0.0170205161 -0.108529270 -0.0151814092  0.137546599 #> [14,] -0.073880717  0.1172070503 -0.055744193  0.0139474496  0.003259859 #> [15,]  0.122496895 -0.0624070615  0.102164030  0.0571963452 -0.109177135 #> [16,] -0.108257860  0.1218692288 -0.069114380  0.1339278370  0.127088845 #> [17,] -0.105881281  0.0694669634  0.008357348 -0.0142228929 -0.102248207 #> [18,] -0.026399352  0.0383121669  0.090852566 -0.0080296947  0.093350321 #> [19,]  0.018175047  0.0291029811 -0.078004442  0.0585639402 -0.145845741 #> [20,] -0.109591573  0.1046216488 -0.033949349  0.1344506443  0.096505478 #> [21,]  0.033516139 -0.1498236954 -0.083242841  0.0408264771  0.069319792 #> [22,] -0.103166260  0.1473495215 -0.058251426  0.0084005082 -0.054974254 #> [23,]  0.076638989 -0.0467353724  0.097104609 -0.0889774412 -0.103234045 #> [24,]  0.068492055  0.0317928381  0.045344267 -0.0464950986  0.109022878 #> [25,]  0.125534609 -0.0939534605  0.036240134 -0.0705716088 -0.006904278 #> [26,] -0.048738789 -0.0919569135  0.108858287 -0.0455244556  0.136249468 #> [27,] -0.100830488  0.1015097424 -0.097800665  0.0449062027 -0.090282992 #> [28,]  0.051146548  0.0001988859  0.053335559  0.0604550503  0.055127937 #> [29,]  0.013967671  0.0402762443 -0.087456204  0.0150709152 -0.068362467 #> [30,]  0.050850384 -0.0888085365 -0.004752364 -0.0182275306  0.119842641 #> [31,] -0.094560340 -0.0447358936  0.033363745  0.0642128885 -0.070375912 #> [32,] -0.128493726  0.1613270044 -0.131048918  0.1267739683 -0.037291896 #> [33,]  0.017753964  0.1438985914 -0.137807414  0.1284029037  0.031067638 #> [34,]  0.137485981 -0.1273060441  0.055962104  0.0437786616 -0.022436863 #> [35,]  0.089852579  0.1130169630 -0.129891887  0.1597012430  0.066344440 #> [36,]  0.025186090  0.0988477096  0.053623721 -0.0693883672 -0.089263394 #> [37,]  0.149217442 -0.0878607184  0.148265779 -0.1287583858 -0.040641841 #> [38,]  0.027963182 -0.0494719855  0.034861464  0.1440699846  0.039654613 #> [39,]  0.037706912  0.0814820752  0.106853031  0.0428303555  0.078805923 #> [40,] -0.110715836  0.0207403451  0.105461963  0.1325327456 -0.044736348 #> [41,]  0.054236803  0.0173998009 -0.096430667  0.0002971711  0.013501696 #> [42,]  0.113602139  0.1506694406  0.009037023 -0.0410696864  0.103897355 #> [43,]  0.031097654 -0.0128071420  0.004210260 -0.0283692945  0.018082526 #> [44,] -0.026479552  0.0954036117  0.038508080  0.0500618145 -0.007290184 #> [45,] -0.099908978 -0.0990877673 -0.132948995  0.1121034846 -0.082340047 #> [46,] -0.093029119 -0.1244442314  0.044017341 -0.0895842463  0.092527576 #> [47,]  0.115284756  0.0681660548  0.103793718  0.0395735800  0.009511993 #> [48,]  0.008943232 -0.0812184736 -0.101512097  0.0442827307 -0.072140336 #> [49,]  0.068998545 -0.0525225736 -0.042260267  0.0768392310  0.019113017 #> [50,]  0.111872472  0.1121702492 -0.120062165  0.0202413145  0.007039041 #>              [,41]        [,42]        [,43]        [,44]        [,45] #>  [1,] -0.053556025 -0.034915768 -0.095646910 -0.140703261  0.014479769 #>  [2,] -0.048049308  0.036197819  0.066318437 -0.050803259  0.010926343 #>  [3,] -0.045412663  0.134996906  0.035218205  0.018230248  0.003088520 #>  [4,] -0.123331554 -0.073922463 -0.063364305  0.114558175  0.141049251 #>  [5,] -0.119249582  0.116735242  0.019441070  0.077950455 -0.033691123 #>  [6,]  0.117086023  0.140528753  0.032531194 -0.010893886 -0.127587914 #>  [7,] -0.003926215  0.123517312 -0.074963383 -0.062458675 -0.104756698 #>  [8,] -0.036570679  0.117671065  0.056347769 -0.076171041  0.097806185 #>  [9,] -0.135842636 -0.131628990 -0.124254212 -0.132037252  0.104690343 #> [10,]  0.019555518  0.070880674  0.150233433 -0.049975615 -0.042030234 #> [11,] -0.003428868  0.067849211  0.031997427  0.037922472  0.067833550 #> [12,] -0.018289296 -0.053032458  0.023839874  0.122494817  0.142918959 #> [13,]  0.109331720  0.070004500 -0.059457123  0.019200258 -0.120888509 #> [14,] -0.025561120  0.101656154 -0.023403987 -0.138195813 -0.055292893 #> [15,] -0.005771222  0.111219980  0.083470367  0.059854027  0.090127610 #> [16,]  0.067596927  0.123589642  0.082147270 -0.028831219  0.154089883 #> [17,]  0.092617191 -0.048814803 -0.113999613 -0.026232004 -0.126927868 #> [18,]  0.090651937  0.020602833 -0.061100993  0.022113629 -0.087739691 #> [19,]  0.076714896  0.003307914 -0.069465332 -0.046927299  0.037956525 #> [20,] -0.018544504  0.091037840 -0.020486541 -0.058263492 -0.063058011 #> [21,]  0.046163674 -0.032376256  0.088745430  0.121880092  0.122804746 #> [22,]  0.122973710  0.096640401  0.099078611 -0.078395106  0.062297788 #> [23,]  0.042963278  0.019741094 -0.090778939  0.087963566 -0.106697716 #> [24,] -0.065001540  0.024845222  0.050791018  0.137030363  0.100270338 #> [25,] -0.034815829  0.101210222  0.079876289 -0.140717864 -0.004253874 #> [26,] -0.027837805  0.099598356 -0.052724723 -0.083501354  0.086622231 #> [27,]  0.003913921  0.033661291 -0.010705179  0.024519103  0.080772251 #> [28,]  0.080782287 -0.122379839  0.049383450  0.126899317 -0.058802031 #> [29,] -0.042517755 -0.106020778 -0.019662254 -0.078501992  0.126759216 #> [30,]  0.104385987  0.022697983 -0.012850636 -0.127102032 -0.048894431 #> [31,]  0.014477612  0.021992428  0.093994766 -0.025585791 -0.139887631 #> [32,] -0.026595322  0.118489370 -0.024658980 -0.028050162 -0.030829616 #> [33,]  0.112339385 -0.067276157  0.111357622  0.022386361  0.065150827 #> [34,]  0.007838762  0.064279892 -0.169328332  0.110182390  0.004959278 #> [35,]  0.025801895 -0.094748899  0.059754074  0.106503576  0.124116793 #> [36,]  0.110028386 -0.046014719  0.089172684  0.113963611 -0.070933290 #> [37,] -0.049892213 -0.087953396  0.005138775 -0.049021747  0.144607857 #> [38,] -0.032631256 -0.013807846  0.138299316 -0.019849263  0.114612229 #> [39,]  0.049865503 -0.032326482  0.028605672 -0.038865518  0.140369207 #> [40,]  0.028522192 -0.006667993 -0.080256283 -0.094507903 -0.022552453 #> [41,]  0.113795049 -0.034667548 -0.074307911 -0.114373684  0.144171432 #> [42,]  0.120543465  0.044073861  0.139092818 -0.007586191 -0.104428031 #> [43,] -0.118018992 -0.033231776  0.057650432 -0.088521086 -0.022006582 #> [44,]  0.031904690  0.066489689 -0.010172447 -0.065097891  0.003125284 #> [45,]  0.001522646  0.038967945  0.148289829 -0.140227929  0.075068310 #> [46,] -0.105264477 -0.083242930 -0.038722519 -0.062956370  0.101739354 #> [47,]  0.074155040  0.041817199 -0.113464370 -0.045502201 -0.107659988 #> [48,] -0.056830570 -0.015624208 -0.017785816 -0.062953033 -0.084226176 #> [49,] -0.109311245 -0.086396061  0.075442448  0.129301280 -0.039468236 #> [50,] -0.055905674 -0.020525139 -0.069314219 -0.006861897  0.044665575 #>             [,46]        [,47]        [,48]        [,49]        [,50] #>  [1,] -0.02184825  0.093355604  0.092723064 -0.097667359 -0.008427228 #>  [2,]  0.11557319  0.129312113  0.006377305  0.039951961 -0.112619340 #>  [3,]  0.04589732 -0.079719700  0.064322457  0.153995752  0.020224713 #>  [4,]  0.08860200 -0.118409656 -0.124944769  0.026142292  0.046139851 #>  [5,]  0.12294670 -0.105509683 -0.098284371 -0.047707312  0.109835386 #>  [6,] -0.10548540 -0.104125433 -0.043520343  0.138255671 -0.144734859 #>  [7,]  0.07241785 -0.104536220  0.027330721 -0.036536131  0.094976202 #>  [8,]  0.01993848  0.126754433 -0.018677484  0.005851241  0.077361807 #>  [9,]  0.01085244 -0.078196473  0.029554576 -0.101196729 -0.116910547 #> [10,]  0.06156686 -0.112772591 -0.012910496 -0.018349938  0.133616254 #> [11,]  0.11195239 -0.111114025 -0.009901930 -0.066699736 -0.103259683 #> [12,] -0.02379941  0.100390621 -0.068691745  0.099388897 -0.095931202 #> [13,] -0.01523674 -0.128906220 -0.138014674 -0.057546724  0.011521730 #> [14,]  0.01715600  0.037439916  0.056777984  0.028821934 -0.056911878 #> [15,]  0.11167952 -0.001092685  0.073295563  0.008164957  0.032712109 #> [16,] -0.01913322 -0.037706390 -0.114583164 -0.062861919 -0.109894931 #> [17,]  0.05636220  0.017790679  0.012508742 -0.068939611  0.061563689 #> [18,]  0.01469139  0.080376290  0.051627010 -0.074586153 -0.106669724 #> [19,] -0.04770106 -0.101191096 -0.097346298 -0.087023012  0.106154472 #> [20,]  0.02006900  0.085481696  0.133608043 -0.064133413  0.109455913 #> [21,]  0.05694506  0.072087459  0.056950558  0.113682710 -0.056803860 #> [22,]  0.07201735  0.103554897  0.032891881 -0.068613775  0.063142516 #> [23,]  0.05641884  0.061230004 -0.109174170  0.031268135 -0.102310665 #> [24,] -0.13558555 -0.058777854  0.054815181 -0.009876158 -0.096505947 #> [25,]  0.11186527 -0.074551679 -0.094365433 -0.110749573  0.011937727 #> [26,]  0.07597500 -0.045588244  0.007883555  0.087735668  0.027670892 #> [27,]  0.12248891  0.071285382  0.067120880  0.006796365  0.049009115 #> [28,]  0.06442315  0.083848923  0.141937435  0.078533188  0.055522211 #> [29,]  0.12438371 -0.027498163 -0.016093601 -0.040951211  0.064115964 #> [30,]  0.05382638 -0.084042363  0.068866298  0.140269637  0.019402353 #> [31,]  0.12945846  0.150699526 -0.044027135 -0.075921066  0.003192317 #> [32,]  0.06487513  0.016760381  0.020564292 -0.127268150 -0.064026058 #> [33,]  0.02305559 -0.017558860 -0.092749931  0.131443635  0.005863030 #> [34,] -0.08690200 -0.001477526  0.025683835 -0.050561342  0.100078225 #> [35,]  0.09354930 -0.023736026 -0.027408665  0.015166007  0.096571758 #> [36,] -0.02178266  0.089757301 -0.092115641 -0.116294526 -0.093472987 #> [37,]  0.03551468 -0.017714012 -0.042360686  0.122111902 -0.120066568 #> [38,] -0.04931073  0.126332566 -0.102018632 -0.149104282 -0.038026765 #> [39,] -0.03581254  0.097300284  0.062066268 -0.057977900  0.091770694 #> [40,]  0.12959732 -0.083710611 -0.083203845  0.048606329  0.079679236 #> [41,] -0.11839826  0.031955644 -0.059059188  0.111900344  0.094192661 #> [42,]  0.01198477  0.075445630  0.110879570 -0.012052026 -0.032562919 #> [43,]  0.03969689  0.085610129 -0.061272595 -0.109780528 -0.054812957 #> [44,]  0.13287172  0.091529489 -0.131224379 -0.096666440  0.024137463 #> [45,] -0.13567336 -0.105876088 -0.073037773 -0.146069959 -0.016927825 #> [46,] -0.13678588  0.092884064 -0.097444899 -0.080876999 -0.004404488 #> [47,] -0.09481536  0.021209722 -0.046900686 -0.101563781 -0.051876370 #> [48,] -0.11846796 -0.126660019  0.131537303 -0.041054152  0.041099012 #> [49,]  0.02701208 -0.115372248 -0.102469616  0.078768030  0.144619346 #> [50,]  0.09798606  0.035277292  0.101885505  0.009187382  0.063475452 #>  #> [[1]]$`2.bias` #>  [1]  0.011444636 -0.058752399  0.116449855 -0.038485888  0.026851842 #>  [6] -0.106079288  0.098488316  0.069018900 -0.044073090  0.062496834 #> [11] -0.073010914 -0.039447341 -0.019958938  0.109224193 -0.060919169 #> [16]  0.081797197 -0.026494328 -0.077257417 -0.010127116 -0.014174347 #> [21] -0.035948932 -0.024604838 -0.007914702 -0.061872676  0.049797282 #> [26]  0.071807787 -0.117131270  0.091615729  0.055193651 -0.068832345 #> [31] -0.003788376 -0.083981894 -0.085007675 -0.044675935  0.032209974 #> [36]  0.123105079 -0.073530674 -0.033218101  0.044978026  0.017894218 #> [41] -0.075474240 -0.031049719  0.010462418 -0.078081809  0.098445334 #> [46]  0.044575337 -0.153016433 -0.026184477  0.072619252 -0.027885653 #>  #> [[1]]$`4.weight` #>            [,1]     [,2]       [,3]       [,4]       [,5]       [,6]       [,7] #> [1,] 0.07313803 0.196615 -0.1384813 -0.1702505 -0.1442002 -0.2049039 0.05017194 #>             [,8]         [,9]     [,10]    [,11]      [,12]      [,13] #> [1,] -0.02423682 -0.006070951 0.1208661 0.129063 -0.2030247 -0.1544236 #>            [,14]       [,15]      [,16]      [,17]      [,18]     [,19] #> [1,] 0.002649837 -0.03138863 0.06170456 0.07955266 0.02946278 -0.107684 #>          [,20]       [,21]     [,22]       [,23]      [,24]      [,25] #> [1,] 0.1395601 -0.08845136 0.1083501 -0.02656535 -0.1923906 0.02442137 #>            [,26]        [,27]     [,28]      [,29]      [,30]     [,31] #> [1,] -0.05175323 -0.007058385 0.0233413 -0.1268603 -0.2165032 0.1482412 #>           [,32]     [,33]       [,34]     [,35]      [,36]      [,37] #> [1,] 0.08491315 0.1142917 -0.09798483 0.1993542 0.03658508 -0.2209896 #>           [,38]     [,39]      [,40]      [,41]      [,42]     [,43]      [,44] #> [1,] 0.09617444 0.1177465 -0.1083829 -0.2140823 0.07409375 0.1766521 0.02161709 #>          [,45]      [,46]     [,47]       [,48]      [,49]      [,50] #> [1,] 0.1162364 -0.2045701 -0.138697 -0.04553577 0.06292853 0.07971241 #>  #> [[1]]$`4.bias` #> [1] 0.2719484 #>  #>  # }"},{"path":"/reference/conditionalEffects.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate average conditional effects — conditionalEffects","title":"Calculate average conditional effects — conditionalEffects","text":"Average conditional effects calculate local derivatives observation feature. similar marginal effects. average conditional effects approximation linear effects (see Pichler Hartig, 2023 details). can use function either calculate main effects (diagonal, take look example) interaction effects (-diagonals) features. obtain uncertainties effects, enable bootstrapping option dnn(..) function (see example).","code":""},{"path":"/reference/conditionalEffects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate average conditional effects — conditionalEffects","text":"","code":"conditionalEffects(   object,   interactions = FALSE,   epsilon = 0.1,   device = c(\"cpu\", \"cuda\", \"mps\"),   indices = NULL,   data = NULL,   type = \"response\",   ... )  # S3 method for citodnn conditionalEffects(   object,   interactions = FALSE,   epsilon = 0.1,   device = c(\"cpu\", \"cuda\", \"mps\"),   indices = NULL,   data = NULL,   type = \"response\",   ... )  # S3 method for citodnnBootstrap conditionalEffects(   object,   interactions = FALSE,   epsilon = 0.1,   device = c(\"cpu\", \"cuda\", \"mps\"),   indices = NULL,   data = NULL,   type = \"response\",   ... )"},{"path":"/reference/conditionalEffects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate average conditional effects — conditionalEffects","text":"object object class citodnn interactions calculate interactions (computationally expensive) epsilon difference used calculate derivatives device device indices variables ACE calculated data data used calculate ACE type ACE scale (response link) ... additional arguments passed predict function","code":""},{"path":"/reference/conditionalEffects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate average conditional effects — conditionalEffects","text":"S3 object class \"conditionalEffects\" returned. list consists following attributes: result 3-dimensional array raw results mean Matrix, average conditional effects abs Matrix, summed absolute conditional effects sd Matrix, standard deviation conditional effects","code":""},{"path":"/reference/conditionalEffects.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate average conditional effects — conditionalEffects","text":"Scholbeck, C. ., Casalicchio, G., Molnar, C., Bischl, B., & Heumann, C. (2022). Marginal effects non-linear prediction functions. arXiv preprint arXiv:2201.08837. Pichler, M., & Hartig, F. (2023). Can predictive models used causal inference?. arXiv preprint arXiv:2306.10551.","code":""},{"path":"/reference/conditionalEffects.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate average conditional effects — conditionalEffects","text":"Maximilian Pichler","code":""},{"path":"/reference/conditionalEffects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate average conditional effects — conditionalEffects","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  # Build and train  Network nn.fit = dnn(Sepal.Length~., data = datasets::iris)  # Calculate average conditional effects ACE = conditionalEffects(nn.fit)  ## Main effects (categorical features are not supported) ACE  ## With interaction effects: ACE = conditionalEffects(nn.fit, interactions = TRUE) ## The off diagonal elements are the interaction effects ACE[[1]]$mean ## ACE is a list, elements correspond to the number of response classes ## Sepal.length == 1 Response so we have only one ## list element in the ACE object  # Re-train NN with bootstrapping to obtain standard errors nn.fit = dnn(Sepal.Length~., data = datasets::iris, bootstrap = 30L) ## The summary method calculates also the conditional effects, and if ## bootstrapping was used, it will also report standard errors and p-values: summary(nn.fit)   } #> Loss at epoch 1: 3.379828, lr: 0.01000  #> Loss at epoch 2: 1.933936, lr: 0.01000 #> Loss at epoch 3: 0.228814, lr: 0.01000 #> Loss at epoch 4: 0.205587, lr: 0.01000 #> Loss at epoch 5: 0.270435, lr: 0.01000 #> Loss at epoch 6: 0.236979, lr: 0.01000 #> Loss at epoch 7: 0.272040, lr: 0.01000 #> Loss at epoch 8: 0.224309, lr: 0.01000 #> Loss at epoch 9: 0.144183, lr: 0.01000 #> Loss at epoch 10: 0.169458, lr: 0.01000 #> Loss at epoch 11: 0.183323, lr: 0.01000 #> Loss at epoch 12: 0.166348, lr: 0.01000 #> Loss at epoch 13: 0.274895, lr: 0.01000 #> Loss at epoch 14: 0.280355, lr: 0.01000 #> Loss at epoch 15: 0.254779, lr: 0.01000 #> Loss at epoch 16: 0.190902, lr: 0.01000 #> Loss at epoch 17: 0.193055, lr: 0.01000 #> Loss at epoch 18: 0.155056, lr: 0.01000 #> Loss at epoch 19: 0.151019, lr: 0.01000 #> Loss at epoch 20: 0.328402, lr: 0.01000 #> Loss at epoch 21: 0.210680, lr: 0.01000 #> Loss at epoch 22: 0.150522, lr: 0.01000 #> Loss at epoch 23: 0.128916, lr: 0.01000 #> Loss at epoch 24: 0.135216, lr: 0.01000 #> Loss at epoch 25: 0.237178, lr: 0.01000 #> Loss at epoch 26: 0.318993, lr: 0.01000 #> Loss at epoch 27: 0.138807, lr: 0.01000 #> Loss at epoch 28: 0.136173, lr: 0.01000 #> Loss at epoch 29: 0.128682, lr: 0.01000 #> Loss at epoch 30: 0.249716, lr: 0.01000 #> Loss at epoch 31: 0.268293, lr: 0.01000 #> Loss at epoch 32: 0.221183, lr: 0.01000 #> Loss at epoch 33: 0.228082, lr: 0.01000 #> Loss at epoch 34: 0.186572, lr: 0.01000 #> Loss at epoch 35: 0.211333, lr: 0.01000 #> Loss at epoch 36: 0.240261, lr: 0.01000 #> Loss at epoch 37: 0.156860, lr: 0.01000 #> Loss at epoch 38: 0.135369, lr: 0.01000 #> Loss at epoch 39: 0.156546, lr: 0.01000 #> Loss at epoch 40: 0.144334, lr: 0.01000 #> Loss at epoch 41: 0.219684, lr: 0.01000 #> Loss at epoch 42: 0.146040, lr: 0.01000 #> Loss at epoch 43: 0.167136, lr: 0.01000 #> Loss at epoch 44: 0.201829, lr: 0.01000 #> Loss at epoch 45: 0.132113, lr: 0.01000 #> Loss at epoch 46: 0.170424, lr: 0.01000 #> Loss at epoch 47: 0.152546, lr: 0.01000 #> Loss at epoch 48: 0.172159, lr: 0.01000 #> Loss at epoch 49: 0.180372, lr: 0.01000 #> Loss at epoch 50: 0.147496, lr: 0.01000 #> Loss at epoch 51: 0.158857, lr: 0.01000 #> Loss at epoch 52: 0.344855, lr: 0.01000 #> Loss at epoch 53: 0.124224, lr: 0.01000 #> Loss at epoch 54: 0.156204, lr: 0.01000 #> Loss at epoch 55: 0.139490, lr: 0.01000 #> Loss at epoch 56: 0.160173, lr: 0.01000 #> Loss at epoch 57: 0.169804, lr: 0.01000 #> Loss at epoch 58: 0.170424, lr: 0.01000 #> Loss at epoch 59: 0.129065, lr: 0.01000 #> Loss at epoch 60: 0.129541, lr: 0.01000 #> Loss at epoch 61: 0.175629, lr: 0.01000 #> Loss at epoch 62: 0.123555, lr: 0.01000 #> Loss at epoch 63: 0.146487, lr: 0.01000 #> Loss at epoch 64: 0.155258, lr: 0.01000 #> Loss at epoch 65: 0.156323, lr: 0.01000 #> Loss at epoch 66: 0.126883, lr: 0.01000 #> Loss at epoch 67: 0.133831, lr: 0.01000 #> Loss at epoch 68: 0.145165, lr: 0.01000 #> Loss at epoch 69: 0.146749, lr: 0.01000 #> Loss at epoch 70: 0.157587, lr: 0.01000 #> Loss at epoch 71: 0.115124, lr: 0.01000 #> Loss at epoch 72: 0.117681, lr: 0.01000 #> Loss at epoch 73: 0.115027, lr: 0.01000 #> Loss at epoch 74: 0.178499, lr: 0.01000 #> Loss at epoch 75: 0.316160, lr: 0.01000 #> Loss at epoch 76: 0.129088, lr: 0.01000 #> Loss at epoch 77: 0.218056, lr: 0.01000 #> Loss at epoch 78: 0.159013, lr: 0.01000 #> Loss at epoch 79: 0.241126, lr: 0.01000 #> Loss at epoch 80: 0.170218, lr: 0.01000 #> Loss at epoch 81: 0.312542, lr: 0.01000 #> Loss at epoch 82: 0.174487, lr: 0.01000 #> Loss at epoch 83: 0.120550, lr: 0.01000 #> Loss at epoch 84: 0.110152, lr: 0.01000 #> Loss at epoch 85: 0.113100, lr: 0.01000 #> Loss at epoch 86: 0.142459, lr: 0.01000 #> Loss at epoch 87: 0.253368, lr: 0.01000 #> Loss at epoch 88: 0.118749, lr: 0.01000 #> Loss at epoch 89: 0.125601, lr: 0.01000 #> Loss at epoch 90: 0.129741, lr: 0.01000 #> Loss at epoch 91: 0.137639, lr: 0.01000 #> Loss at epoch 92: 0.115272, lr: 0.01000 #> Loss at epoch 93: 0.117108, lr: 0.01000 #> Loss at epoch 94: 0.166266, lr: 0.01000 #> Loss at epoch 95: 0.179490, lr: 0.01000 #> Loss at epoch 96: 0.133321, lr: 0.01000 #> Loss at epoch 97: 0.150810, lr: 0.01000 #> Loss at epoch 98: 0.138791, lr: 0.01000 #> Loss at epoch 99: 0.253873, lr: 0.01000 #> Loss at epoch 100: 0.152996, lr: 0.01000 #> Summary of Deep Neural Network Model #>  #>  #> ── Feature Importance  #>   #>                 Importance Std.Err Z value Pr(>|z|)    #> Sepal.Width →        0.828   0.358    2.31   0.0209 *  #> Petal.Length →      23.182   8.197    2.83   0.0047 ** #> Petal.Width →        0.905   1.047    0.86   0.3873    #> Species →            0.701   0.544    1.29   0.1976    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #>  #>  #> ── Average Conditional Effects  #>                     ACE Std.Err Z value Pr(>|z|)     #> Sepal.Width →    0.4599  0.0757    6.08  1.2e-09 *** #> Petal.Length →   0.6724  0.0717    9.37  < 2e-16 *** #> Petal.Width →   -0.2407  0.1530   -1.57     0.12     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #>  #>  #> ── Standard Deviation of Conditional Effects  #>   #>                    ACE Std.Err Z value Pr(>|z|)     #> Sepal.Width →   0.0629  0.0174    3.62   0.0003 *** #> Petal.Length →  0.0450  0.0186    2.42   0.0154 *   #> Petal.Width →   0.0347  0.0130    2.66   0.0078 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 # }"},{"path":"/reference/config_lr_scheduler.html","id":null,"dir":"Reference","previous_headings":"","what":"Creation of customized learning rate scheduler objects — config_lr_scheduler","title":"Creation of customized learning rate scheduler objects — config_lr_scheduler","text":"Helps create custom learning rate schedulers dnn.","code":""},{"path":"/reference/config_lr_scheduler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creation of customized learning rate scheduler objects — config_lr_scheduler","text":"","code":"config_lr_scheduler(   type = c(\"lambda\", \"multiplicative\", \"reduce_on_plateau\", \"one_cycle\", \"step\"),   verbose = FALSE,   ... )"},{"path":"/reference/config_lr_scheduler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creation of customized learning rate scheduler objects — config_lr_scheduler","text":"type String defining type scheduler used. See Details. verbose TRUE, additional information scheduler printed console. ... additional arguments passed scheduler. See Details.","code":""},{"path":"/reference/config_lr_scheduler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creation of customized learning rate scheduler objects — config_lr_scheduler","text":"object class cito_lr_scheduler give dnn","code":""},{"path":"/reference/config_lr_scheduler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creation of customized learning rate scheduler objects — config_lr_scheduler","text":"different learning rate scheduler need different variables, functions tell variables can set: lambda: lr_lambda multiplicative: lr_multiplicative reduce_on_plateau: lr_reduce_on_plateau one_cycle: lr_one_cycle step: lr_step","code":""},{"path":"/reference/config_lr_scheduler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creation of customized learning rate scheduler objects — config_lr_scheduler","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  # create learning rate scheduler object scheduler <- config_lr_scheduler(type = \"step\",                         step_size = 30,                         gamma = 0.15,                         verbose = TRUE)  # Build and train  Network nn.fit<- dnn(Sepal.Length~., data = datasets::iris, lr_scheduler = scheduler)  } #> Learning rate Scheduler step #> step_size: [30] #> gamma: [0.15]  #> last_epoch: [-1]  #> Loss at epoch 1: 3.855787, lr: 0.01000  #> Loss at epoch 2: 0.334377, lr: 0.01000 #> Loss at epoch 3: 0.160870, lr: 0.01000 #> Loss at epoch 4: 0.185763, lr: 0.01000 #> Loss at epoch 5: 0.261742, lr: 0.01000 #> Loss at epoch 6: 0.131872, lr: 0.01000 #> Loss at epoch 7: 0.160746, lr: 0.01000 #> Loss at epoch 8: 0.224901, lr: 0.01000 #> Loss at epoch 9: 0.190156, lr: 0.01000 #> Loss at epoch 10: 0.167755, lr: 0.01000 #> Loss at epoch 11: 0.136052, lr: 0.01000 #> Loss at epoch 12: 0.217537, lr: 0.01000 #> Loss at epoch 13: 0.120013, lr: 0.01000 #> Loss at epoch 14: 0.145965, lr: 0.01000 #> Loss at epoch 15: 0.239869, lr: 0.01000 #> Loss at epoch 16: 0.173446, lr: 0.01000 #> Loss at epoch 17: 0.123053, lr: 0.01000 #> Loss at epoch 18: 0.125644, lr: 0.01000 #> Loss at epoch 19: 0.121730, lr: 0.01000 #> Loss at epoch 20: 0.158852, lr: 0.01000 #> Loss at epoch 21: 0.153652, lr: 0.01000 #> Loss at epoch 22: 0.119906, lr: 0.01000 #> Loss at epoch 23: 0.133592, lr: 0.01000 #> Loss at epoch 24: 0.201450, lr: 0.01000 #> Loss at epoch 25: 0.305433, lr: 0.01000 #> Loss at epoch 26: 0.148794, lr: 0.01000 #> Loss at epoch 27: 0.170635, lr: 0.01000 #> Loss at epoch 28: 0.223070, lr: 0.01000 #> Loss at epoch 29: 0.206901, lr: 0.01000 #> Loss at epoch 30: 0.113526, lr: 0.00150 #> Loss at epoch 31: 0.127059, lr: 0.00150 #> Loss at epoch 32: 0.112283, lr: 0.00150 #> Loss at epoch 33: 0.109521, lr: 0.00150 #> Loss at epoch 34: 0.109337, lr: 0.00150 #> Loss at epoch 35: 0.109045, lr: 0.00150 #> Loss at epoch 36: 0.109062, lr: 0.00150 #> Loss at epoch 37: 0.109319, lr: 0.00150 #> Loss at epoch 38: 0.109318, lr: 0.00150 #> Loss at epoch 39: 0.109638, lr: 0.00150 #> Loss at epoch 40: 0.109368, lr: 0.00150 #> Loss at epoch 41: 0.108016, lr: 0.00150 #> Loss at epoch 42: 0.108063, lr: 0.00150 #> Loss at epoch 43: 0.109219, lr: 0.00150 #> Loss at epoch 44: 0.109387, lr: 0.00150 #> Loss at epoch 45: 0.108627, lr: 0.00150 #> Loss at epoch 46: 0.109350, lr: 0.00150 #> Loss at epoch 47: 0.109228, lr: 0.00150 #> Loss at epoch 48: 0.109236, lr: 0.00150 #> Loss at epoch 49: 0.107838, lr: 0.00150 #> Loss at epoch 50: 0.109695, lr: 0.00150 #> Loss at epoch 51: 0.108632, lr: 0.00150 #> Loss at epoch 52: 0.108336, lr: 0.00150 #> Loss at epoch 53: 0.108537, lr: 0.00150 #> Loss at epoch 54: 0.107899, lr: 0.00150 #> Loss at epoch 55: 0.107722, lr: 0.00150 #> Loss at epoch 56: 0.108048, lr: 0.00150 #> Loss at epoch 57: 0.107790, lr: 0.00150 #> Loss at epoch 58: 0.107115, lr: 0.00150 #> Loss at epoch 59: 0.106520, lr: 0.00150 #> Loss at epoch 60: 0.106878, lr: 0.00022 #> Loss at epoch 61: 0.106034, lr: 0.00022 #> Loss at epoch 62: 0.106114, lr: 0.00022 #> Loss at epoch 63: 0.106149, lr: 0.00022 #> Loss at epoch 64: 0.106213, lr: 0.00022 #> Loss at epoch 65: 0.106101, lr: 0.00022 #> Loss at epoch 66: 0.106070, lr: 0.00022 #> Loss at epoch 67: 0.105911, lr: 0.00022 #> Loss at epoch 68: 0.106071, lr: 0.00022 #> Loss at epoch 69: 0.106150, lr: 0.00022 #> Loss at epoch 70: 0.106113, lr: 0.00022 #> Loss at epoch 71: 0.106168, lr: 0.00022 #> Loss at epoch 72: 0.106283, lr: 0.00022 #> Loss at epoch 73: 0.105892, lr: 0.00022 #> Loss at epoch 74: 0.105968, lr: 0.00022 #> Loss at epoch 75: 0.105999, lr: 0.00022 #> Loss at epoch 76: 0.106069, lr: 0.00022 #> Loss at epoch 77: 0.105829, lr: 0.00022 #> Loss at epoch 78: 0.105848, lr: 0.00022 #> Loss at epoch 79: 0.105808, lr: 0.00022 #> Loss at epoch 80: 0.105695, lr: 0.00022 #> Loss at epoch 81: 0.105703, lr: 0.00022 #> Loss at epoch 82: 0.105857, lr: 0.00022 #> Loss at epoch 83: 0.105831, lr: 0.00022 #> Loss at epoch 84: 0.105964, lr: 0.00022 #> Loss at epoch 85: 0.106148, lr: 0.00022 #> Loss at epoch 86: 0.105748, lr: 0.00022 #> Loss at epoch 87: 0.105652, lr: 0.00022 #> Loss at epoch 88: 0.105688, lr: 0.00022 #> Loss at epoch 89: 0.105780, lr: 0.00022 #> Loss at epoch 90: 0.105818, lr: 0.00003 #> Loss at epoch 91: 0.105525, lr: 0.00003 #> Loss at epoch 92: 0.105559, lr: 0.00003 #> Loss at epoch 93: 0.105527, lr: 0.00003 #> Loss at epoch 94: 0.105478, lr: 0.00003 #> Loss at epoch 95: 0.105522, lr: 0.00003 #> Loss at epoch 96: 0.105493, lr: 0.00003 #> Loss at epoch 97: 0.105520, lr: 0.00003 #> Loss at epoch 98: 0.105480, lr: 0.00003 #> Loss at epoch 99: 0.105477, lr: 0.00003 #> Loss at epoch 100: 0.105489, lr: 0.00003 # }"},{"path":"/reference/config_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Creation of customized optimizer objects — config_optimizer","title":"Creation of customized optimizer objects — config_optimizer","text":"Helps create custom optimizer dnn. recommended set learning rate dnn.","code":""},{"path":"/reference/config_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creation of customized optimizer objects — config_optimizer","text":"","code":"config_optimizer(   type = c(\"adam\", \"adadelta\", \"adagrad\", \"rmsprop\", \"rprop\", \"sgd\"),   verbose = FALSE,   ... )"},{"path":"/reference/config_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creation of customized optimizer objects — config_optimizer","text":"type character string defining optimizer used. See Details. verbose TRUE, additional information scheduler printed console ... additional arguments passed optimizer. See Details.","code":""},{"path":"/reference/config_optimizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creation of customized optimizer objects — config_optimizer","text":"object class cito_optim give dnn","code":""},{"path":"/reference/config_optimizer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creation of customized optimizer objects — config_optimizer","text":"different optimizer need different variables, function tell variables set. information see corresponding functions: adam: optim_adam adadelta: optim_adadelta adagrad: optim_adagrad rmsprop: optim_rmsprop rprop: optim_rprop sgd: optim_sgd","code":""},{"path":"/reference/config_optimizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creation of customized optimizer objects — config_optimizer","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  # create optimizer object opt <- config_optimizer(type = \"adagrad\",                         lr_decay = 1e-04,                         weight_decay = 0.1,                         verbose = TRUE)  # Build and train  Network nn.fit<- dnn(Sepal.Length~., data = datasets::iris, optimizer = opt)  } #> set adagrad optimizer with following values  #> lr_decay: [1e-04]  #> weight_decay: [0.1]  #> initial_accumulator_value: [0]  #> eps: [1e-10]  #> Loss at epoch 1: 4.655569, lr: 0.01000  #> Loss at epoch 2: 0.180086, lr: 0.01000 #> Loss at epoch 3: 0.152603, lr: 0.01000 #> Loss at epoch 4: 0.142724, lr: 0.01000 #> Loss at epoch 5: 0.134210, lr: 0.01000 #> Loss at epoch 6: 0.132882, lr: 0.01000 #> Loss at epoch 7: 0.115636, lr: 0.01000 #> Loss at epoch 8: 0.132620, lr: 0.01000 #> Loss at epoch 9: 0.128926, lr: 0.01000 #> Loss at epoch 10: 0.125811, lr: 0.01000 #> Loss at epoch 11: 0.133124, lr: 0.01000 #> Loss at epoch 12: 0.127656, lr: 0.01000 #> Loss at epoch 13: 0.126887, lr: 0.01000 #> Loss at epoch 14: 0.130360, lr: 0.01000 #> Loss at epoch 15: 0.125269, lr: 0.01000 #> Loss at epoch 16: 0.122503, lr: 0.01000 #> Loss at epoch 17: 0.121690, lr: 0.01000 #> Loss at epoch 18: 0.129538, lr: 0.01000 #> Loss at epoch 19: 0.129692, lr: 0.01000 #> Loss at epoch 20: 0.124329, lr: 0.01000 #> Loss at epoch 21: 0.119107, lr: 0.01000 #> Loss at epoch 22: 0.123579, lr: 0.01000 #> Loss at epoch 23: 0.117390, lr: 0.01000 #> Loss at epoch 24: 0.122079, lr: 0.01000 #> Loss at epoch 25: 0.118595, lr: 0.01000 #> Loss at epoch 26: 0.124767, lr: 0.01000 #> Loss at epoch 27: 0.118089, lr: 0.01000 #> Loss at epoch 28: 0.120510, lr: 0.01000 #> Loss at epoch 29: 0.120133, lr: 0.01000 #> Loss at epoch 30: 0.118062, lr: 0.01000 #> Loss at epoch 31: 0.116126, lr: 0.01000 #> Loss at epoch 32: 0.117944, lr: 0.01000 #> Loss at epoch 33: 0.119334, lr: 0.01000 #> Loss at epoch 34: 0.116590, lr: 0.01000 #> Loss at epoch 35: 0.117472, lr: 0.01000 #> Loss at epoch 36: 0.117151, lr: 0.01000 #> Loss at epoch 37: 0.119738, lr: 0.01000 #> Loss at epoch 38: 0.119971, lr: 0.01000 #> Loss at epoch 39: 0.118449, lr: 0.01000 #> Loss at epoch 40: 0.115796, lr: 0.01000 #> Loss at epoch 41: 0.115583, lr: 0.01000 #> Loss at epoch 42: 0.118182, lr: 0.01000 #> Loss at epoch 43: 0.115510, lr: 0.01000 #> Loss at epoch 44: 0.114092, lr: 0.01000 #> Loss at epoch 45: 0.111847, lr: 0.01000 #> Loss at epoch 46: 0.113773, lr: 0.01000 #> Loss at epoch 47: 0.120122, lr: 0.01000 #> Loss at epoch 48: 0.113610, lr: 0.01000 #> Loss at epoch 49: 0.114779, lr: 0.01000 #> Loss at epoch 50: 0.116645, lr: 0.01000 #> Loss at epoch 51: 0.112697, lr: 0.01000 #> Loss at epoch 52: 0.116223, lr: 0.01000 #> Loss at epoch 53: 0.112632, lr: 0.01000 #> Loss at epoch 54: 0.112678, lr: 0.01000 #> Loss at epoch 55: 0.110834, lr: 0.01000 #> Loss at epoch 56: 0.114511, lr: 0.01000 #> Loss at epoch 57: 0.110509, lr: 0.01000 #> Loss at epoch 58: 0.112694, lr: 0.01000 #> Loss at epoch 59: 0.110993, lr: 0.01000 #> Loss at epoch 60: 0.111106, lr: 0.01000 #> Loss at epoch 61: 0.118932, lr: 0.01000 #> Loss at epoch 62: 0.116513, lr: 0.01000 #> Loss at epoch 63: 0.116502, lr: 0.01000 #> Loss at epoch 64: 0.109510, lr: 0.01000 #> Loss at epoch 65: 0.108598, lr: 0.01000 #> Loss at epoch 66: 0.113584, lr: 0.01000 #> Loss at epoch 67: 0.113902, lr: 0.01000 #> Loss at epoch 68: 0.122259, lr: 0.01000 #> Loss at epoch 69: 0.113578, lr: 0.01000 #> Loss at epoch 70: 0.112584, lr: 0.01000 #> Loss at epoch 71: 0.117090, lr: 0.01000 #> Loss at epoch 72: 0.111322, lr: 0.01000 #> Loss at epoch 73: 0.110741, lr: 0.01000 #> Loss at epoch 74: 0.109291, lr: 0.01000 #> Loss at epoch 75: 0.110850, lr: 0.01000 #> Loss at epoch 76: 0.112463, lr: 0.01000 #> Loss at epoch 77: 0.109917, lr: 0.01000 #> Loss at epoch 78: 0.112835, lr: 0.01000 #> Loss at epoch 79: 0.108831, lr: 0.01000 #> Loss at epoch 80: 0.110594, lr: 0.01000 #> Loss at epoch 81: 0.114640, lr: 0.01000 #> Loss at epoch 82: 0.111236, lr: 0.01000 #> Loss at epoch 83: 0.105894, lr: 0.01000 #> Loss at epoch 84: 0.115796, lr: 0.01000 #> Loss at epoch 85: 0.107613, lr: 0.01000 #> Loss at epoch 86: 0.110199, lr: 0.01000 #> Loss at epoch 87: 0.114584, lr: 0.01000 #> Loss at epoch 88: 0.111364, lr: 0.01000 #> Loss at epoch 89: 0.112051, lr: 0.01000 #> Loss at epoch 90: 0.113060, lr: 0.01000 #> Loss at epoch 91: 0.109116, lr: 0.01000 #> Loss at epoch 92: 0.112212, lr: 0.01000 #> Loss at epoch 93: 0.108919, lr: 0.01000 #> Loss at epoch 94: 0.112231, lr: 0.01000 #> Loss at epoch 95: 0.112670, lr: 0.01000 #> Loss at epoch 96: 0.110140, lr: 0.01000 #> Loss at epoch 97: 0.111451, lr: 0.01000 #> Loss at epoch 98: 0.107740, lr: 0.01000 #> Loss at epoch 99: 0.109389, lr: 0.01000 #> Loss at epoch 100: 0.110720, lr: 0.01000 # }"},{"path":"/reference/config_tuning.html","id":null,"dir":"Reference","previous_headings":"","what":"Config hyperparameter tuning — config_tuning","title":"Config hyperparameter tuning — config_tuning","text":"Config hyperparameter tuning","code":""},{"path":"/reference/config_tuning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Config hyperparameter tuning — config_tuning","text":"","code":"config_tuning(   CV = 5,   steps = 10,   parallel = FALSE,   NGPU = 1,   cancel = TRUE,   bootstrap_final = NULL,   bootstrap_parallel = FALSE,   return_models = FALSE )"},{"path":"/reference/config_tuning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Config hyperparameter tuning — config_tuning","text":"CV numeric, specifies k-folded cross validation steps numeric, number random tuning steps parallel numeric, number parallel cores (tuning steps parallelized) NGPU numeric, set one GPU available, tuning parallelized CPU cores GPUs, works NCPU > 1 cancel CV/tuning specific hyperparameter set model reduce loss baseline burnin returns NA loss bootstrap_final bootstrap final model, models boostrapped must set globally via bootstrap argument dnn() function bootstrap_parallel bootstrapping parallelized return_models return individual models","code":""},{"path":"/reference/config_tuning.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Config hyperparameter tuning — config_tuning","text":"Note hyperparameter tuning can expensive. implemented option parallelize hyperparameter tuning, including parallelization one GPUs (hyperparameter evaluation parallelized, CV). can especially useful small models. example, 4 GPUs, 20 CPU cores, 20 steps (random samples random search), run `dnn(..., device=\"cuda\",lr = tune(), batchsize=tune(), tuning=config_tuning(parallel=20, NGPU=4)', distribute 20 model fits across 4 GPUs, GPU process 5 models (parallel).","code":""},{"path":"/reference/continue_training.html","id":null,"dir":"Reference","previous_headings":"","what":"Continues training of a model generated with dnn or cnn for additional epochs. — continue_training","title":"Continues training of a model generated with dnn or cnn for additional epochs. — continue_training","text":"training/validation loss still decreasing end training, often sign NN yet converged. can use function continue training instead re-training entire model.","code":""},{"path":"/reference/continue_training.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continues training of a model generated with dnn or cnn for additional epochs. — continue_training","text":"","code":"continue_training(model, ...)  # S3 method for citodnn continue_training(   model,   epochs = 32,   data = NULL,   device = NULL,   verbose = TRUE,   changed_params = NULL,   ... )  # S3 method for citodnnBootstrap continue_training(   model,   epochs = 32,   data = NULL,   device = NULL,   verbose = TRUE,   changed_params = NULL,   parallel = FALSE,   ... )  # S3 method for citocnn continue_training(   model,   epochs = 32,   X = NULL,   Y = NULL,   device = c(\"cpu\", \"cuda\", \"mps\"),   verbose = TRUE,   changed_params = NULL,   ... )"},{"path":"/reference/continue_training.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continues training of a model generated with dnn or cnn for additional epochs. — continue_training","text":"model model created dnn cnn ... class-specific arguments epochs additional epochs training continue data matrix data.frame. provided data original training used device can used overwrite device used previous training verbose print training validation loss epochs changed_params list arguments change compared original training setup, see dnn parameter can changed parallel train bootstrapped model parallel X array. provided X original training used Y vector, factor, numerical matrix logical matrix. provided Y original training used","code":""},{"path":"/reference/continue_training.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Continues training of a model generated with dnn or cnn for additional epochs. — continue_training","text":"model class citodnn, citodnnBootstrap citocnn created dnn cnn","code":""},{"path":"/reference/continue_training.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Continues training of a model generated with dnn or cnn for additional epochs. — continue_training","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  set.seed(222) validation_set<- sample(c(1:nrow(datasets::iris)),25)  # Build and train  Network nn.fit<- dnn(Sepal.Length~., data = datasets::iris[-validation_set,], epochs = 32)  # continue training for another 32 epochs nn.fit<- continue_training(nn.fit,epochs = 32)  # Use model on validation set predictions <- predict(nn.fit, iris[validation_set,]) } #> Loss at epoch 1: 3.126571, lr: 0.01000  #> Loss at epoch 2: 0.514850, lr: 0.01000 #> Loss at epoch 3: 0.346818, lr: 0.01000 #> Loss at epoch 4: 0.163977, lr: 0.01000 #> Loss at epoch 5: 0.279016, lr: 0.01000 #> Loss at epoch 6: 0.212404, lr: 0.01000 #> Loss at epoch 7: 0.292054, lr: 0.01000 #> Loss at epoch 8: 0.179579, lr: 0.01000 #> Loss at epoch 9: 0.321917, lr: 0.01000 #> Loss at epoch 10: 0.200459, lr: 0.01000 #> Loss at epoch 11: 0.269738, lr: 0.01000 #> Loss at epoch 12: 0.283064, lr: 0.01000 #> Loss at epoch 13: 0.228289, lr: 0.01000 #> Loss at epoch 14: 0.246131, lr: 0.01000 #> Loss at epoch 15: 0.227689, lr: 0.01000 #> Loss at epoch 16: 0.115394, lr: 0.01000 #> Loss at epoch 17: 0.129045, lr: 0.01000 #> Loss at epoch 18: 0.205653, lr: 0.01000 #> Loss at epoch 19: 0.195351, lr: 0.01000 #> Loss at epoch 20: 0.119905, lr: 0.01000 #> Loss at epoch 21: 0.145320, lr: 0.01000 #> Loss at epoch 22: 0.187305, lr: 0.01000 #> Loss at epoch 23: 0.149941, lr: 0.01000 #> Loss at epoch 24: 0.209640, lr: 0.01000 #> Loss at epoch 25: 0.233110, lr: 0.01000 #> Loss at epoch 26: 0.171920, lr: 0.01000 #> Loss at epoch 27: 0.306050, lr: 0.01000 #> Loss at epoch 28: 0.267701, lr: 0.01000 #> Loss at epoch 29: 0.147307, lr: 0.01000 #> Loss at epoch 30: 0.136879, lr: 0.01000 #> Loss at epoch 31: 0.139870, lr: 0.01000 #> Loss at epoch 32: 0.303357, lr: 0.01000 #> Loss at epoch 33: 0.124378, lr: 0.01000  #> Loss at epoch 34: 0.207439, lr: 0.01000 #> Loss at epoch 35: 0.148571, lr: 0.01000 #> Loss at epoch 36: 0.152081, lr: 0.01000 #> Loss at epoch 37: 0.233732, lr: 0.01000 #> Loss at epoch 38: 0.218880, lr: 0.01000 #> Loss at epoch 39: 0.158141, lr: 0.01000 #> Loss at epoch 40: 0.176888, lr: 0.01000 #> Loss at epoch 41: 0.123694, lr: 0.01000 #> Loss at epoch 42: 0.132989, lr: 0.01000 #> Loss at epoch 43: 0.249912, lr: 0.01000 #> Loss at epoch 44: 0.176676, lr: 0.01000 #> Loss at epoch 45: 0.202956, lr: 0.01000 #> Loss at epoch 46: 0.165694, lr: 0.01000 #> Loss at epoch 47: 0.150909, lr: 0.01000 #> Loss at epoch 48: 0.171423, lr: 0.01000 #> Loss at epoch 49: 0.147387, lr: 0.01000 #> Loss at epoch 50: 0.194810, lr: 0.01000 #> Loss at epoch 51: 0.140012, lr: 0.01000 #> Loss at epoch 52: 0.197457, lr: 0.01000 #> Loss at epoch 53: 0.211299, lr: 0.01000 #> Loss at epoch 54: 0.116834, lr: 0.01000 #> Loss at epoch 55: 0.116997, lr: 0.01000 #> Loss at epoch 56: 0.141145, lr: 0.01000 #> Loss at epoch 57: 0.104897, lr: 0.01000 #> Loss at epoch 58: 0.177362, lr: 0.01000 #> Loss at epoch 59: 0.122721, lr: 0.01000 #> Loss at epoch 60: 0.129762, lr: 0.01000 #> Loss at epoch 61: 0.141377, lr: 0.01000 #> Loss at epoch 62: 0.123332, lr: 0.01000 #> Loss at epoch 63: 0.133105, lr: 0.01000 #> Loss at epoch 64: 0.221063, lr: 0.01000 # }"},{"path":"/reference/conv.html","id":null,"dir":"Reference","previous_headings":"","what":"Convolutional layer — conv","title":"Convolutional layer — conv","text":"creates 'conv' 'citolayer' object used create_architecture.","code":""},{"path":"/reference/conv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convolutional layer — conv","text":"","code":"conv(   n_kernels = NULL,   kernel_size = NULL,   stride = NULL,   padding = NULL,   dilation = NULL,   bias = NULL,   activation = NULL,   normalization = NULL,   dropout = NULL )"},{"path":"/reference/conv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convolutional layer — conv","text":"n_kernels (int) amount kernels layer kernel_size (int tuple) size kernels layer. Use tuple kernel size equal dimensions stride (int tuple) stride kernels layer. NULL sets stride equal kernel size. Use tuple stride equal dimensions padding (int tuple) zero-padding added sides input. Use tuple padding equal dimensions dilation (int tuple) dilation kernels layer. Use tuple dilation equal dimensions bias (boolean) TRUE, adds learnable bias kernels layer activation (string) activation function used layer. following activation functions supported: \"relu\", \"leaky_relu\", \"tanh\", \"elu\", \"rrelu\", \"prelu\", \"softplus\", \"celu\", \"selu\", \"gelu\", \"relu6\", \"sigmoid\", \"softsign\", \"hardtanh\", \"tanhshrink\", \"softshrink\", \"hardshrink\", \"log_sigmoid\" normalization (boolean) TRUE, batch normalization used layer dropout (float) dropout rate layer. Set 0 dropout","code":""},{"path":"/reference/conv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convolutional layer — conv","text":"S3 object class \"conv\" \"citolayer\"","code":""},{"path":"/reference/conv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convolutional layer — conv","text":"function creates 'conv' 'citolayer' object passed create_architecture function. parameters assigned (therefore still NULL) filled default values passed create_architecture.","code":""},{"path":[]},{"path":"/reference/conv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convolutional layer — conv","text":"Armin Schenk","code":""},{"path":"/reference/create_architecture.html","id":null,"dir":"Reference","previous_headings":"","what":"CNN architecture — create_architecture","title":"CNN architecture — create_architecture","text":"creates 'citoarchitecture' object used cnn.","code":""},{"path":"/reference/create_architecture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CNN architecture — create_architecture","text":"","code":"create_architecture(   ...,   default_n_neurons = 10,   default_n_kernels = 10,   default_kernel_size = list(conv = 3, maxPool = 2, avgPool = 2),   default_stride = list(conv = 1, maxPool = NULL, avgPool = NULL),   default_padding = list(conv = 0, maxPool = 0, avgPool = 0),   default_dilation = list(conv = 1, maxPool = 1),   default_bias = list(conv = TRUE, linear = TRUE),   default_activation = list(conv = \"relu\", linear = \"relu\"),   default_normalization = list(conv = FALSE, linear = FALSE),   default_dropout = list(conv = 0, linear = 0) )"},{"path":"/reference/create_architecture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CNN architecture — create_architecture","text":"... objects class 'citolayer' created linear, conv, maxPool, avgPool transfer default_n_neurons (int) default value: amount neurons linear layer default_n_kernels (int) default value: amount kernels convolutional layer default_kernel_size (int tuple) default value: size kernels convolutional pooling layers. Use tuple kernel size equal dimensions default_stride (int tuple) default value: stride kernels convolutional pooling layers. NULL sets stride equal kernel size. Use tuple stride equal dimensions default_padding (int tuple) default value: zero-padding added sides input. Use tuple padding equal dimensions default_dilation (int tuple) default value: dilation kernels convolutional maxPooling layers. Use tuple dilation equal dimensions default_bias (boolean) default value: TRUE, adds learnable bias neurons linear kernels convolutional layers default_activation (string) default value: activation function used linear convolutional layers. following activation functions supported: \"relu\", \"leaky_relu\", \"tanh\", \"elu\", \"rrelu\", \"prelu\", \"softplus\", \"celu\", \"selu\", \"gelu\", \"relu6\", \"sigmoid\", \"softsign\", \"hardtanh\", \"tanhshrink\", \"softshrink\", \"hardshrink\", \"log_sigmoid\" default_normalization (boolean) default value: TRUE, batch normalization used linear convolutional layers default_dropout (float) default value: dropout rate linear convolutional layers. Set 0 dropout","code":""},{"path":"/reference/create_architecture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CNN architecture — create_architecture","text":"S3 object class \"citoarchitecture\"","code":""},{"path":"/reference/create_architecture.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CNN architecture — create_architecture","text":"function creates 'citoarchitecture' object provides cnn function information architecture CNN created trained. final architecture consists layers sequence passed function. parameters 'citolayer' objects, still NULL specified creation layer, filled given default parameters specific layer type (linear, conv, maxPool, avgPool). default values can changed either passing list values specific layer types (case defaults layer types list remain ) passing single value (case defaults layer types set value).","code":""},{"path":[]},{"path":"/reference/create_architecture.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CNN architecture — create_architecture","text":"Armin Schenk","code":""},{"path":"/reference/dnn.html","id":null,"dir":"Reference","previous_headings":"","what":"DNN — dnn","title":"DNN — dnn","text":"fits custom deep neural network using Multilayer Perceptron architecture. dnn() supports formula syntax allows customize neural network maximal degree.","code":""},{"path":"/reference/dnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DNN — dnn","text":"","code":"dnn(   formula = NULL,   data = NULL,   hidden = c(50L, 50L),   activation = \"selu\",   bias = TRUE,   dropout = 0,   loss = c(\"mse\", \"mae\", \"softmax\", \"cross-entropy\", \"gaussian\", \"binomial\", \"poisson\",     \"mvp\", \"nbinom\"),   validation = 0,   lambda = 0,   alpha = 0.5,   optimizer = c(\"sgd\", \"adam\", \"adadelta\", \"adagrad\", \"rmsprop\", \"rprop\"),   lr = 0.01,   batchsize = NULL,   burnin = 30,   baseloss = NULL,   shuffle = TRUE,   epochs = 100,   bootstrap = NULL,   bootstrap_parallel = FALSE,   plot = TRUE,   verbose = TRUE,   lr_scheduler = NULL,   custom_parameters = NULL,   device = c(\"cpu\", \"cuda\", \"mps\"),   early_stopping = FALSE,   tuning = config_tuning(),   X = NULL,   Y = NULL )"},{"path":"/reference/dnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DNN — dnn","text":"formula object class \"formula\": description model fitted data matrix data.frame features/predictors response variable hidden hidden units layers, length hidden corresponds number layers activation activation functions, can length one, vector different activation functions layer bias whether use biases layers, can length one, vector (number hidden layers + 1 (last layer)) logicals layer. dropout dropout rate, probability node getting left training (see nn_dropout) loss loss network optimized. Can also distribution stats package function, see details validation percentage data set taken validation set (chosen randomly) lambda strength regularization: lambda penalty, \\(\\lambda * (L1 + L2)\\) (see alpha) alpha add L1/L2 regularization training  \\((1 - \\alpha) * |weights| + \\alpha ||weights||^2\\) get added layer. Must 0 1 optimizer optimizer used training network, adjustments optimizer see config_optimizer lr learning rate given optimizer batchsize number samples used calculate one learning rate step, default 10% training data burnin training aborted trainings loss baseline loss burnin epochs baseloss baseloss, null baseloss corresponds intercept models shuffle TRUE, data batch gets reshuffled every epoch epochs epochs training goes bootstrap bootstrap neural network , numeric corresponds number bootstrap samples bootstrap_parallel parallelize (CPU) bootstrapping plot plot training loss verbose print training validation loss epochs lr_scheduler learning rate scheduler created config_lr_scheduler custom_parameters List parameters/variables optimized. Can used custom loss function. See Vignette example. device device network trained . mps correspond M1/M2 GPU devices. early_stopping set integer, training stop loss gotten higher defined number epochs row, use validation loss available. tuning tuning options created config_tuning X Feature matrix data.frame, alternative data interface Y Response vector, factor, matrix data.frame, alternative data interface","code":""},{"path":"/reference/dnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DNN — dnn","text":"S3 object class \"cito.dnn\" returned. list containing everything know model training process. list consists following attributes: net object class \"nn_sequential\" \"nn_module\", originates torch package represents core object workflow. call original function call loss list contains relevant information target variable used loss function data Contains data used training model weigths List weights training epoch use_model_epoch Integer, defines model training epoch used prediction. 1 = best model, 2 = last model loaded_model_epoch Integer, shows model epoch loaded currently model$net. model_properties list properties neural network, contains number input nodes, number output nodes, size hidden layers, activation functions, whether bias included dropout layers included. training_properties list training parameters used last time model trained. consists learning rate, information learning rate scheduler, information optimizer, number epochs, whether early stopping used, plot active, lambda alpha L1/L2 regularization, batchsize, shuffle, data set split validation training, formula used training epoch training stop. losses data.frame containing training validation losses epoch","code":""},{"path":"/reference/dnn.html","id":"activation-functions","dir":"Reference","previous_headings":"","what":"Activation functions","title":"DNN — dnn","text":"Supported activation functions:  \"relu\", \"leaky_relu\", \"tanh\", \"elu\", \"rrelu\", \"prelu\", \"softplus\", \"celu\", \"selu\", \"gelu\", \"relu6\", \"sigmoid\", \"softsign\", \"hardtanh\", \"tanhshrink\", \"softshrink\", \"hardshrink\", \"log_sigmoid\"","code":""},{"path":"/reference/dnn.html","id":"loss-functions-likelihoods","dir":"Reference","previous_headings":"","what":"Loss functions / Likelihoods","title":"DNN — dnn","text":"support loss functions likelihoods different tasks:","code":""},{"path":"/reference/dnn.html","id":"training-and-convergence-of-neural-networks","dir":"Reference","previous_headings":"","what":"Training and convergence of neural networks","title":"DNN — dnn","text":"Ensuring convergence can tricky training neural networks. training sensitive combination learning rate (much weights updated optimization step), batch size (random subset data used optimization step), number epochs (number optimization steps). Typically, learning rate decreased size neural networks (depth network width hidden layers). provide baseline loss (intercept model) can give hints appropriate learning rate:  training loss model fall baseline loss, learning rate either high low. happens, try higher lower learning rates. common strategy try (manually) different learning rates see learning rate right scale. See troubleshooting vignette (vignette(\"B-Training_neural_networks\")) help training debugging neural networks.","code":""},{"path":"/reference/dnn.html","id":"finding-the-right-architecture","dir":"Reference","previous_headings":"","what":"Finding the right architecture","title":"DNN — dnn","text":"learning rate, definitive guide choosing right architecture right task. However, general rules/recommendations: general, wider, deeper neural networks can improve generalization - double-edged sword also increases risk overfitting. , increase width depth network, also add regularization (e.g., increasing lambda parameter, corresponds regularization strength). Furthermore, Pichler & Hartig, 2023, investigated effects hyperparameters prediction performance function data size. example, found selu activation function outperforms relu small data sizes (<100 observations). recommend starting moderate sizes (like defaults), model generalize/converge, try larger networks along regularization helps minimize risk overfitting (see vignette(\"B-Training_neural_networks\") ).","code":""},{"path":"/reference/dnn.html","id":"overfitting","dir":"Reference","previous_headings":"","what":"Overfitting","title":"DNN — dnn","text":"Overfitting means model fits training data well, generalizes poorly new observations. can use validation argument detect overfitting. validation loss starts increase certain point, often means models starting overfit training data:  Solutions: Re-train epochs = point model started overfit Early stopping, stop training model starts overfit, can specified using early_stopping=… argument Use regularization (dropout elastic-net, see next section)","code":""},{"path":"/reference/dnn.html","id":"regularization","dir":"Reference","previous_headings":"","what":"Regularization","title":"DNN — dnn","text":"Elastic Net regularization combines strengths L1 (Lasso) L2 (Ridge) regularization. introduces penalty term encourages sparse weight values maintaining overall weight shrinkage. controlling sparsity learned model, Elastic Net regularization helps avoid overfitting allowing meaningful feature selection. advise using elastic net (e.g. lambda = 0.001 alpha = 0.2). Dropout regularization helps prevent overfitting randomly disabling portion neurons training. technique encourages network learn robust generalized representations, prevents individual neurons relying heavily specific input patterns. Dropout widely adopted simple yet effective regularization method deep learning. utilizing regularization methods neural network training cito package, can improve generalization performance enhance network's ability handle unseen data. techniques act valuable tools mitigating overfitting promoting robust reliable model performance.","code":""},{"path":"/reference/dnn.html","id":"uncertainty","dir":"Reference","previous_headings":"","what":"Uncertainty","title":"DNN — dnn","text":"can use bootstrapping generate uncertainties outputs. Bootstrapping can enabled setting bootstrap = ... number bootstrap samples used. Note, however, computational cost can excessive. cases may worthwhile parallelize bootstrapping, example GPU neural network small. Parallelization bootstrapping can enabled setting bootstrap_parallel = ... argument desired number calls run parallel.","code":""},{"path":"/reference/dnn.html","id":"custom-optimizer-and-learning-rate-schedulers","dir":"Reference","previous_headings":"","what":"Custom Optimizer and Learning Rate Schedulers","title":"DNN — dnn","text":"training network, flexibility customize optimizer settings learning rate scheduler optimize learning process. cito package, can initialize configurations using config_lr_scheduler config_optimizer functions. config_lr_scheduler allows define specific learning rate scheduler controls learning rate changes time training. beneficial scenarios want adaptively adjust learning rate improve convergence avoid getting stuck local optima. Similarly, config_optimizer function enables specify optimizer network. Different optimizers, stochastic gradient descent (SGD), Adam, RMSprop, offer various strategies updating network's weights biases training. Choosing right optimizer can significantly impact training process final performance neural network.","code":""},{"path":"/reference/dnn.html","id":"hyperparameter-tuning","dir":"Reference","previous_headings":"","what":"Hyperparameter tuning","title":"DNN — dnn","text":"implemented experimental support hyperparameter tuning. can mark hyperparameters tuned cito setting values tune(), example dnn (..., lr = tune(). tune() function creates range random values given hyperparameter. can change maximum minimum range potential hyperparameters pass custom values tune(values = c(....)) function. following table lists hyperparameters can currently tuned: hyperparameters tuned random search (.e., random values hyperparameters within specified range) cross-validation. exact tuning regime can specified config_tuning. Note hyperparameter tuning can expensive. implemented option parallelize hyperparameter tuning, including parallelization one GPUs (hyperparameter evaluation parallelized, CV). can especially useful small models. example, 4 GPUs, 20 CPU cores, 20 steps (random samples random search), run dnn(..., device=\"cuda\",lr = tune(), batchsize=tune(), tuning=config_tuning(parallel=20, NGPU=4), distribute 20 model fits across 4 GPUs, GPU process 5 models (parallel). experimental feature, welcome feature requests bug reports github site. custom values, hyperparameters except hidden layers require vector values. Hidden layers expect two-column matrix first column number hidden nodes second column corresponds number hidden layers.","code":""},{"path":"/reference/dnn.html","id":"how-neural-networks-work","dir":"Reference","previous_headings":"","what":"How neural networks work","title":"DNN — dnn","text":"Multilayer Perceptron (MLP) networks, neuron connected every neuron previous layer every neuron subsequent layer. value neuron computed using weighted sum outputs previous layer, followed application activation function. Specifically, value neuron calculated weighted sum outputs neurons previous layer, combined bias term. sum passed activation function, introduces non-linearity network. calculated value neuron becomes input neurons next layer, process continues output layer reached. choice activation function specific weight values determine network's ability learn approximate complex relationships inputs outputs. Therefore value neuron can calculated using: \\( (\\sum_j{ w_j * a_j})\\). \\(w_j\\) weight \\(a_j\\) value neuron j current one. () activation function, e.g. \\( relu(x) = max(0,x)\\)","code":""},{"path":"/reference/dnn.html","id":"training-on-graphic-cards","dir":"Reference","previous_headings":"","what":"Training on graphic cards","title":"DNN — dnn","text":"NVIDIA CUDA-enabled device installed CUDA toolkit version 11.3 cuDNN 8.4, can take advantage GPU acceleration training neural networks. crucial specific versions installed, versions may compatible. detailed installation instructions information utilizing GPUs training, please refer mlverse: 'torch' documentation. Note: GPU training optional, package can still used training CPU even without CUDA cuDNN installations.","code":""},{"path":[]},{"path":"/reference/dnn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DNN — dnn","text":"Christian Amesoeder, Maximilian Pichler","code":""},{"path":"/reference/dnn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DNN — dnn","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  # Example workflow in cito  ## Build and train  Network ### softmax is used for multi-class responses (e.g., Species) nn.fit<- dnn(Species~., data = datasets::iris, loss = \"softmax\")  ## The training loss is below the baseline loss but at the end of the ## training the loss was still decreasing, so continue training for another 50 ## epochs nn.fit <- continue_training(nn.fit, epochs = 50L)  # Sturcture of Neural Network print(nn.fit)  # Plot Neural Network plot(nn.fit) ## 4 Input nodes (first layer) because of 4 features ## 3 Output nodes (last layer) because of 3 response species (one node for each ## level in the response variable). ## The layers between the input and output layer are called hidden layers (two ## of them)  ## We now want to understand how the predictions are made, what are the ## important features? The summary function automatically calculates feature ## importance (the interpretation is similar to an anova) and calculates ## average conditional effects that are similar to linear effects: summary(nn.fit)  ## To visualize the effect (response-feature effect), we can use the ALE and ## PDP functions  # Partial dependencies PDP(nn.fit, variable = \"Petal.Length\")  # Accumulated local effect plots ALE(nn.fit, variable = \"Petal.Length\")    # Per se, it is difficult to get confidence intervals for our xAI metrics (or # for the predictions). But we can use bootstrapping to obtain uncertainties # for all cito outputs: ## Re-fit the neural network with bootstrapping nn.fit<- dnn(Species~.,              data = datasets::iris,              loss = \"softmax\",              epochs = 150L,              verbose = FALSE,              bootstrap = 20L) ## convergence can be tested via the analyze_training function analyze_training(nn.fit)  ## Summary for xAI metrics (can take some time): summary(nn.fit) ## Now with standard errors and p-values ## Note: Take the p-values with a grain of salt! We do not know yet if they are ## correct (e.g. if you use regularization, they are likely conservative == too ## large)  ## Predictions with bootstrapping: dim(predict(nn.fit)) ## predictions are by default averaged (over the bootstrap samples)    # Hyperparameter tuning (experimental feature) hidden_values = matrix(c(5, 2,                          4, 2,                          10,2,                          15,2), 4, 2, byrow = TRUE) ## Potential architectures we want to test, first column == number of nodes print(hidden_values)  nn.fit = dnn(Species~.,              data = iris,              epochs = 30L,              loss = \"softmax\",              hidden = tune(values = hidden_values),              lr = tune(0.00001, 0.1) # tune lr between range 0.00001 and 0.1              ) ## Tuning results: print(nn.fit$tuning)  # test = Inf means that tuning was cancelled after only one fit (within the CV)   # Advanced: Custom loss functions and additional parameters ## Normal Likelihood with sd parameter: custom_loss = function(pred, true) {   logLik = torch::distr_normal(pred,                                scale = torch::nnf_relu(scale)+                                  0.001)$log_prob(true)   return(-logLik$mean()) }  nn.fit<- dnn(Sepal.Length~.,              data = datasets::iris,              loss = custom_loss,              verbose = FALSE,              custom_parameters = list(scale = 1.0) ) nn.fit$parameter$scale  ## Multivariate normal likelihood with parametrized covariance matrix ## Sigma = L*L^t + D ## Helper function to build covariance matrix create_cov = function(LU, Diag) {   return(torch::torch_matmul(LU, LU$t()) + torch::torch_diag(Diag$exp()+0.01)) }  custom_loss_MVN = function(true, pred) {   Sigma = create_cov(SigmaPar, SigmaDiag)   logLik = torch::distr_multivariate_normal(pred,                                             covariance_matrix = Sigma)$     log_prob(true)   return(-logLik$mean()) }   nn.fit<- dnn(cbind(Sepal.Length, Sepal.Width, Petal.Length)~.,              data = datasets::iris,              lr = 0.01,              verbose = FALSE,              loss = custom_loss_MVN,              custom_parameters =                list(SigmaDiag =  rep(0, 3),                     SigmaPar = matrix(rnorm(6, sd = 0.001), 3, 2)) ) as.matrix(create_cov(nn.fit$loss$parameter$SigmaPar,                      nn.fit$loss$parameter$SigmaDiag))  } #> Loss at epoch 1: 1.039179, lr: 0.01000  #> Loss at epoch 2: 0.894210, lr: 0.01000 #> Loss at epoch 3: 0.787813, lr: 0.01000 #> Loss at epoch 4: 0.707675, lr: 0.01000 #> Loss at epoch 5: 0.665315, lr: 0.01000 #> Loss at epoch 6: 0.583120, lr: 0.01000 #> Loss at epoch 7: 0.546229, lr: 0.01000 #> Loss at epoch 8: 0.509589, lr: 0.01000 #> Loss at epoch 9: 0.485731, lr: 0.01000 #> Loss at epoch 10: 0.450399, lr: 0.01000 #> Loss at epoch 11: 0.426069, lr: 0.01000 #> Loss at epoch 12: 0.412347, lr: 0.01000 #> Loss at epoch 13: 0.396256, lr: 0.01000 #> Loss at epoch 14: 0.376325, lr: 0.01000 #> Loss at epoch 15: 0.360705, lr: 0.01000 #> Loss at epoch 16: 0.345159, lr: 0.01000 #> Loss at epoch 17: 0.329457, lr: 0.01000 #> Loss at epoch 18: 0.304376, lr: 0.01000 #> Loss at epoch 19: 0.289856, lr: 0.01000 #> Loss at epoch 20: 0.278269, lr: 0.01000 #> Loss at epoch 21: 0.268696, lr: 0.01000 #> Loss at epoch 22: 0.260959, lr: 0.01000 #> Loss at epoch 23: 0.254418, lr: 0.01000 #> Loss at epoch 24: 0.239495, lr: 0.01000 #> Loss at epoch 25: 0.234102, lr: 0.01000 #> Loss at epoch 26: 0.219870, lr: 0.01000 #> Loss at epoch 27: 0.216939, lr: 0.01000 #> Loss at epoch 28: 0.220043, lr: 0.01000 #> Loss at epoch 29: 0.201435, lr: 0.01000 #> Loss at epoch 30: 0.202594, lr: 0.01000 #> Loss at epoch 31: 0.185274, lr: 0.01000 #> Loss at epoch 32: 0.182770, lr: 0.01000 #> Loss at epoch 33: 0.182289, lr: 0.01000 #> Loss at epoch 34: 0.170018, lr: 0.01000 #> Loss at epoch 35: 0.172396, lr: 0.01000 #> Loss at epoch 36: 0.163830, lr: 0.01000 #> Loss at epoch 37: 0.159096, lr: 0.01000 #> Loss at epoch 38: 0.149765, lr: 0.01000 #> Loss at epoch 39: 0.157097, lr: 0.01000 #> Loss at epoch 40: 0.151407, lr: 0.01000 #> Loss at epoch 41: 0.139423, lr: 0.01000 #> Loss at epoch 42: 0.142595, lr: 0.01000 #> Loss at epoch 43: 0.131152, lr: 0.01000 #> Loss at epoch 44: 0.127520, lr: 0.01000 #> Loss at epoch 45: 0.136820, lr: 0.01000 #> Loss at epoch 46: 0.125791, lr: 0.01000 #> Loss at epoch 47: 0.145969, lr: 0.01000 #> Loss at epoch 48: 0.125615, lr: 0.01000 #> Loss at epoch 49: 0.125201, lr: 0.01000 #> Loss at epoch 50: 0.113690, lr: 0.01000 #> Loss at epoch 51: 0.117729, lr: 0.01000 #> Loss at epoch 52: 0.120440, lr: 0.01000 #> Loss at epoch 53: 0.119239, lr: 0.01000 #> Loss at epoch 54: 0.108367, lr: 0.01000 #> Loss at epoch 55: 0.106687, lr: 0.01000 #> Loss at epoch 56: 0.105548, lr: 0.01000 #> Loss at epoch 57: 0.118444, lr: 0.01000 #> Loss at epoch 58: 0.099182, lr: 0.01000 #> Loss at epoch 59: 0.108520, lr: 0.01000 #> Loss at epoch 60: 0.106507, lr: 0.01000 #> Loss at epoch 61: 0.100216, lr: 0.01000 #> Loss at epoch 62: 0.099538, lr: 0.01000 #> Loss at epoch 63: 0.114193, lr: 0.01000 #> Loss at epoch 64: 0.092342, lr: 0.01000 #> Loss at epoch 65: 0.091078, lr: 0.01000 #> Loss at epoch 66: 0.095424, lr: 0.01000 #> Loss at epoch 67: 0.095527, lr: 0.01000 #> Loss at epoch 68: 0.084813, lr: 0.01000 #> Loss at epoch 69: 0.093053, lr: 0.01000 #> Loss at epoch 70: 0.103658, lr: 0.01000 #> Loss at epoch 71: 0.086391, lr: 0.01000 #> Loss at epoch 72: 0.086746, lr: 0.01000 #> Loss at epoch 73: 0.100298, lr: 0.01000 #> Loss at epoch 74: 0.089702, lr: 0.01000 #> Loss at epoch 75: 0.104808, lr: 0.01000 #> Loss at epoch 76: 0.099859, lr: 0.01000 #> Loss at epoch 77: 0.094411, lr: 0.01000 #> Loss at epoch 78: 0.087328, lr: 0.01000 #> Loss at epoch 79: 0.072487, lr: 0.01000 #> Loss at epoch 80: 0.099197, lr: 0.01000 #> Loss at epoch 81: 0.085940, lr: 0.01000 #> Loss at epoch 82: 0.079648, lr: 0.01000 #> Loss at epoch 83: 0.080014, lr: 0.01000 #> Loss at epoch 84: 0.073928, lr: 0.01000 #> Loss at epoch 85: 0.083036, lr: 0.01000 #> Loss at epoch 86: 0.088878, lr: 0.01000 #> Loss at epoch 87: 0.080810, lr: 0.01000 #> Loss at epoch 88: 0.083353, lr: 0.01000 #> Loss at epoch 89: 0.078732, lr: 0.01000 #> Loss at epoch 90: 0.094785, lr: 0.01000 #> Loss at epoch 91: 0.072871, lr: 0.01000 #> Loss at epoch 92: 0.076667, lr: 0.01000 #> Loss at epoch 93: 0.080784, lr: 0.01000 #> Loss at epoch 94: 0.078247, lr: 0.01000 #> Loss at epoch 95: 0.073190, lr: 0.01000 #> Loss at epoch 96: 0.072561, lr: 0.01000 #> Loss at epoch 97: 0.088294, lr: 0.01000 #> Loss at epoch 98: 0.076515, lr: 0.01000 #> Loss at epoch 99: 0.084000, lr: 0.01000 #> Loss at epoch 100: 0.074438, lr: 0.01000 #> Loss at epoch 101: 0.071799, lr: 0.01000  #> Loss at epoch 102: 0.100744, lr: 0.01000 #> Loss at epoch 103: 0.083288, lr: 0.01000 #> Loss at epoch 104: 0.080941, lr: 0.01000 #> Loss at epoch 105: 0.085603, lr: 0.01000 #> Loss at epoch 106: 0.078697, lr: 0.01000 #> Loss at epoch 107: 0.074864, lr: 0.01000 #> Loss at epoch 108: 0.076939, lr: 0.01000 #> Loss at epoch 109: 0.081032, lr: 0.01000 #> Loss at epoch 110: 0.062515, lr: 0.01000 #> Loss at epoch 111: 0.069649, lr: 0.01000 #> Loss at epoch 112: 0.104675, lr: 0.01000 #> Loss at epoch 113: 0.076602, lr: 0.01000 #> Loss at epoch 114: 0.086791, lr: 0.01000 #> Loss at epoch 115: 0.079159, lr: 0.01000 #> Loss at epoch 116: 0.073957, lr: 0.01000 #> Loss at epoch 117: 0.066947, lr: 0.01000 #> Loss at epoch 118: 0.073473, lr: 0.01000 #> Loss at epoch 119: 0.087989, lr: 0.01000 #> Loss at epoch 120: 0.070338, lr: 0.01000 #> Loss at epoch 121: 0.070251, lr: 0.01000 #> Loss at epoch 122: 0.067291, lr: 0.01000 #> Loss at epoch 123: 0.060073, lr: 0.01000 #> Loss at epoch 124: 0.087709, lr: 0.01000 #> Loss at epoch 125: 0.072733, lr: 0.01000 #> Loss at epoch 126: 0.078607, lr: 0.01000 #> Loss at epoch 127: 0.096793, lr: 0.01000 #> Loss at epoch 128: 0.071485, lr: 0.01000 #> Loss at epoch 129: 0.067185, lr: 0.01000 #> Loss at epoch 130: 0.067428, lr: 0.01000 #> Loss at epoch 131: 0.066788, lr: 0.01000 #> Loss at epoch 132: 0.072350, lr: 0.01000 #> Loss at epoch 133: 0.059826, lr: 0.01000 #> Loss at epoch 134: 0.084682, lr: 0.01000 #> Loss at epoch 135: 0.075744, lr: 0.01000 #> Loss at epoch 136: 0.082926, lr: 0.01000 #> Loss at epoch 137: 0.067845, lr: 0.01000 #> Loss at epoch 138: 0.070095, lr: 0.01000 #> Loss at epoch 139: 0.068951, lr: 0.01000 #> Loss at epoch 140: 0.069641, lr: 0.01000 #> Loss at epoch 141: 0.062837, lr: 0.01000 #> Loss at epoch 142: 0.065160, lr: 0.01000 #> Loss at epoch 143: 0.063992, lr: 0.01000 #> Loss at epoch 144: 0.073960, lr: 0.01000 #> Loss at epoch 145: 0.074591, lr: 0.01000 #> Loss at epoch 146: 0.064155, lr: 0.01000 #> Loss at epoch 147: 0.053030, lr: 0.01000 #> Loss at epoch 148: 0.079638, lr: 0.01000 #> Loss at epoch 149: 0.068234, lr: 0.01000 #> Loss at epoch 150: 0.071309, lr: 0.01000 #> dnn(formula = Species ~ Sepal.Length + Sepal.Width + Petal.Length +  #>     Petal.Width - 1, data = datasets::iris, loss = \"softmax\") #> An `nn_module` containing 2,953 parameters. #>  #> ── Modules ───────────────────────────────────────────────────────────────────── #> • 0: <nn_linear> #250 parameters #> • 1: <nn_selu> #0 parameters #> • 2: <nn_linear> #2,550 parameters #> • 3: <nn_selu> #0 parameters #> • 4: <nn_linear> #153 parameters  #> Number of Neighborhoods reduced to 8 #> Number of Neighborhoods reduced to 8 #> Number of Neighborhoods reduced to 8   #>      [,1] [,2] #> [1,]    5    2 #> [2,]    4    2 #> [3,]   10    2 #> [4,]   15    2 #> Starting hyperparameter tuning... #> Fitting final model... #> # A tibble: 10 × 6 #>    steps  test train models hidden         lr #>    <int> <dbl> <dbl> <lgl>  <list>      <dbl> #>  1     1  55.6     0 NA     <dbl [2]> 0.0543  #>  2     2  23.9     0 NA     <dbl [2]> 0.0405  #>  3     3  23.4     0 NA     <dbl [2]> 0.0602  #>  4     4  59.5     0 NA     <dbl [2]> 0.00915 #>  5     5  97.0     0 NA     <dbl [2]> 0.00589 #>  6     6  65.9     0 NA     <dbl [2]> 0.00984 #>  7     7 130.      0 NA     <dbl [2]> 0.00385 #>  8     8  22.8     0 NA     <dbl [2]> 0.0436  #>  9     9  23.0     0 NA     <dbl [2]> 0.0412  #> 10    10  36.9     0 NA     <dbl [2]> 0.0575    #>            [,1]       [,2]       [,3] #> [1,] 0.31464618 0.02783281 0.08255866 #> [2,] 0.02783281 0.15181227 0.02115173 #> [3,] 0.08255866 0.02115173 0.21715933 # }"},{"path":"/reference/e.html","id":null,"dir":"Reference","previous_headings":"","what":"Embeddings — e","title":"Embeddings — e","text":"Can used categorical variables, efficient alternative one-hot encoding","code":""},{"path":"/reference/e.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Embeddings — e","text":"","code":"e(dim = 1L, weights = NULL, train = TRUE, lambda = 0, alpha = 1)"},{"path":"/reference/e.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Embeddings — e","text":"dim integer, embedding dimension weights matrix, use custom embedding matrices train logical, embeddings trained lambda regularization strength embeddings alpha mix L1 L2 regularization","code":""},{"path":"/reference/findReTrmClasses.html","id":null,"dir":"Reference","previous_headings":"","what":"list of specials -- taken from enum.R — findReTrmClasses","title":"list of specials -- taken from enum.R — findReTrmClasses","text":"list specials -- taken enum.R","code":""},{"path":"/reference/findReTrmClasses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list of specials -- taken from enum.R — findReTrmClasses","text":"","code":"findReTrmClasses()"},{"path":"/reference/linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear layer — linear","title":"Linear layer — linear","text":"creates 'linear' 'citolayer' object used create_architecture.","code":""},{"path":"/reference/linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear layer — linear","text":"","code":"linear(   n_neurons = NULL,   bias = NULL,   activation = NULL,   normalization = NULL,   dropout = NULL )"},{"path":"/reference/linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear layer — linear","text":"n_neurons (int) amount hidden neurons layer bias (boolean) TRUE, adds learnable bias neurons layer activation (string) activation function used layer. following activation functions supported: \"relu\", \"leaky_relu\", \"tanh\", \"elu\", \"rrelu\", \"prelu\", \"softplus\", \"celu\", \"selu\", \"gelu\", \"relu6\", \"sigmoid\", \"softsign\", \"hardtanh\", \"tanhshrink\", \"softshrink\", \"hardshrink\", \"log_sigmoid\" normalization (boolean) TRUE, batch normalization used layer dropout (float) dropout rate layer. Set 0 dropout","code":""},{"path":"/reference/linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear layer — linear","text":"S3 object class \"linear\" \"citolayer\"","code":""},{"path":"/reference/linear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear layer — linear","text":"function creates 'linear' 'citolayer' object passed create_architecture function. parameters assigned (therefore still NULL) filled default values passed create_architecture.","code":""},{"path":[]},{"path":"/reference/linear.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Linear layer — linear","text":"Armin Schenk","code":""},{"path":"/reference/maxPool.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum pooling layer — maxPool","title":"Maximum pooling layer — maxPool","text":"creates 'maxPool' 'citolayer' object used create_architecture.","code":""},{"path":"/reference/maxPool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum pooling layer — maxPool","text":"","code":"maxPool(kernel_size = NULL, stride = NULL, padding = NULL, dilation = NULL)"},{"path":"/reference/maxPool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum pooling layer — maxPool","text":"kernel_size (int tuple) size kernel layer. Use tuple kernel size equal dimensions stride (int tuple) stride kernel layer. NULL sets stride equal kernel size. Use tuple stride equal dimensions padding (int tuple) zero-padding added sides input. Use tuple padding equal dimensions dilation (int tuple) dilation kernel layer. Use tuple dilation equal dimensions","code":""},{"path":"/reference/maxPool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum pooling layer — maxPool","text":"S3 object class \"maxPool\" \"citolayer\"","code":""},{"path":"/reference/maxPool.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maximum pooling layer — maxPool","text":"function creates 'maxPool' 'citolayer' object passed create_architecture function. parameters assigned (therefore still NULL) filled default values passed create_architecture.","code":""},{"path":[]},{"path":"/reference/maxPool.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maximum pooling layer — maxPool","text":"Armin Schenk","code":""},{"path":"/reference/plot.citoarchitecture.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the CNN architecture — plot.citoarchitecture","title":"Plot the CNN architecture — plot.citoarchitecture","text":"Plot CNN architecture","code":""},{"path":"/reference/plot.citoarchitecture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the CNN architecture — plot.citoarchitecture","text":"","code":"# S3 method for citoarchitecture plot(x, input_shape, output_shape, ...)"},{"path":"/reference/plot.citoarchitecture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the CNN architecture — plot.citoarchitecture","text":"x object class citoarchitecture created create_architecture input_shape vector dimensions single sample (e.g. c(3,28,28)) output_shape number nodes output layer ... additional arguments","code":""},{"path":"/reference/plot.citoarchitecture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the CNN architecture — plot.citoarchitecture","text":"nothing","code":""},{"path":"/reference/plot.citocnn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the CNN architecture — plot.citocnn","title":"Plot the CNN architecture — plot.citocnn","text":"Plot CNN architecture","code":""},{"path":"/reference/plot.citocnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the CNN architecture — plot.citocnn","text":"","code":"# S3 method for citocnn plot(x, ...)"},{"path":"/reference/plot.citocnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the CNN architecture — plot.citocnn","text":"x model created cnn ... additional arguments","code":""},{"path":"/reference/plot.citocnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the CNN architecture — plot.citocnn","text":"original object x","code":""},{"path":"/reference/plot.citodnn.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates graph plot which gives an overview of the network architecture. — plot.citodnn","title":"Creates graph plot which gives an overview of the network architecture. — plot.citodnn","text":"Creates graph plot gives overview network architecture.","code":""},{"path":"/reference/plot.citodnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates graph plot which gives an overview of the network architecture. — plot.citodnn","text":"","code":"# S3 method for citodnn plot(x, node_size = 1, scale_edges = FALSE, ...)  # S3 method for citodnnBootstrap plot(x, node_size = 1, scale_edges = FALSE, which_model = 1, ...)"},{"path":"/reference/plot.citodnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates graph plot which gives an overview of the network architecture. — plot.citodnn","text":"x model created dnn node_size size node plot scale_edges edge weight gets scaled according weights (layer specific) ... functionality implemented yet which_model model ensemble plotted","code":""},{"path":"/reference/plot.citodnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates graph plot which gives an overview of the network architecture. — plot.citodnn","text":"plot made 'ggraph' + 'igraph' represents neural network","code":""},{"path":"/reference/plot.citodnn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates graph plot which gives an overview of the network architecture. — plot.citodnn","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  set.seed(222) validation_set<- sample(c(1:nrow(datasets::iris)),25)  # Build and train  Network nn.fit<- dnn(Sepal.Length~., data = datasets::iris[-validation_set,])  plot(nn.fit) } #> Loss at epoch 1: 4.412933, lr: 0.01000  #> Loss at epoch 2: 0.457996, lr: 0.01000 #> Loss at epoch 3: 0.374139, lr: 0.01000 #> Loss at epoch 4: 0.190831, lr: 0.01000 #> Loss at epoch 5: 0.189828, lr: 0.01000 #> Loss at epoch 6: 0.152709, lr: 0.01000 #> Loss at epoch 7: 0.169202, lr: 0.01000 #> Loss at epoch 8: 0.168199, lr: 0.01000 #> Loss at epoch 9: 0.164778, lr: 0.01000 #> Loss at epoch 10: 0.222488, lr: 0.01000 #> Loss at epoch 11: 0.150514, lr: 0.01000 #> Loss at epoch 12: 0.136128, lr: 0.01000 #> Loss at epoch 13: 0.137522, lr: 0.01000 #> Loss at epoch 14: 0.232616, lr: 0.01000 #> Loss at epoch 15: 0.282746, lr: 0.01000 #> Loss at epoch 16: 0.203443, lr: 0.01000 #> Loss at epoch 17: 0.159286, lr: 0.01000 #> Loss at epoch 18: 0.306232, lr: 0.01000 #> Loss at epoch 19: 0.245966, lr: 0.01000 #> Loss at epoch 20: 0.138165, lr: 0.01000 #> Loss at epoch 21: 0.164858, lr: 0.01000 #> Loss at epoch 22: 0.199807, lr: 0.01000 #> Loss at epoch 23: 0.182469, lr: 0.01000 #> Loss at epoch 24: 0.136055, lr: 0.01000 #> Loss at epoch 25: 0.174714, lr: 0.01000 #> Loss at epoch 26: 0.123613, lr: 0.01000 #> Loss at epoch 27: 0.136136, lr: 0.01000 #> Loss at epoch 28: 0.134382, lr: 0.01000 #> Loss at epoch 29: 0.166995, lr: 0.01000 #> Loss at epoch 30: 0.119366, lr: 0.01000 #> Loss at epoch 31: 0.186011, lr: 0.01000 #> Loss at epoch 32: 0.131361, lr: 0.01000 #> Loss at epoch 33: 0.130866, lr: 0.01000 #> Loss at epoch 34: 0.176201, lr: 0.01000 #> Loss at epoch 35: 0.213064, lr: 0.01000 #> Loss at epoch 36: 0.143860, lr: 0.01000 #> Loss at epoch 37: 0.478835, lr: 0.01000 #> Loss at epoch 38: 0.199451, lr: 0.01000 #> Loss at epoch 39: 0.128126, lr: 0.01000 #> Loss at epoch 40: 0.143192, lr: 0.01000 #> Loss at epoch 41: 0.145831, lr: 0.01000 #> Loss at epoch 42: 0.136980, lr: 0.01000 #> Loss at epoch 43: 0.154229, lr: 0.01000 #> Loss at epoch 44: 0.125690, lr: 0.01000 #> Loss at epoch 45: 0.158553, lr: 0.01000 #> Loss at epoch 46: 0.183886, lr: 0.01000 #> Loss at epoch 47: 0.220396, lr: 0.01000 #> Loss at epoch 48: 0.164803, lr: 0.01000 #> Loss at epoch 49: 0.121603, lr: 0.01000 #> Loss at epoch 50: 0.159458, lr: 0.01000 #> Loss at epoch 51: 0.174914, lr: 0.01000 #> Loss at epoch 52: 0.145723, lr: 0.01000 #> Loss at epoch 53: 0.119845, lr: 0.01000 #> Loss at epoch 54: 0.143000, lr: 0.01000 #> Loss at epoch 55: 0.148071, lr: 0.01000 #> Loss at epoch 56: 0.134708, lr: 0.01000 #> Loss at epoch 57: 0.194480, lr: 0.01000 #> Loss at epoch 58: 0.271983, lr: 0.01000 #> Loss at epoch 59: 0.171412, lr: 0.01000 #> Loss at epoch 60: 0.135452, lr: 0.01000 #> Loss at epoch 61: 0.144232, lr: 0.01000 #> Loss at epoch 62: 0.146521, lr: 0.01000 #> Loss at epoch 63: 0.105554, lr: 0.01000 #> Loss at epoch 64: 0.141056, lr: 0.01000 #> Loss at epoch 65: 0.244398, lr: 0.01000 #> Loss at epoch 66: 0.130078, lr: 0.01000 #> Loss at epoch 67: 0.133649, lr: 0.01000 #> Loss at epoch 68: 0.224155, lr: 0.01000 #> Loss at epoch 69: 0.140142, lr: 0.01000 #> Loss at epoch 70: 0.133505, lr: 0.01000 #> Loss at epoch 71: 0.166213, lr: 0.01000 #> Loss at epoch 72: 0.116812, lr: 0.01000 #> Loss at epoch 73: 0.165204, lr: 0.01000 #> Loss at epoch 74: 0.199521, lr: 0.01000 #> Loss at epoch 75: 0.134955, lr: 0.01000 #> Loss at epoch 76: 0.247147, lr: 0.01000 #> Loss at epoch 77: 0.118444, lr: 0.01000 #> Loss at epoch 78: 0.186340, lr: 0.01000 #> Loss at epoch 79: 0.150901, lr: 0.01000 #> Loss at epoch 80: 0.160657, lr: 0.01000 #> Loss at epoch 81: 0.129190, lr: 0.01000 #> Loss at epoch 82: 0.128325, lr: 0.01000 #> Loss at epoch 83: 0.226873, lr: 0.01000 #> Loss at epoch 84: 0.185948, lr: 0.01000 #> Loss at epoch 85: 0.112021, lr: 0.01000 #> Loss at epoch 86: 0.113142, lr: 0.01000 #> Loss at epoch 87: 0.104010, lr: 0.01000 #> Loss at epoch 88: 0.278345, lr: 0.01000 #> Loss at epoch 89: 0.170612, lr: 0.01000 #> Loss at epoch 90: 0.174643, lr: 0.01000 #> Loss at epoch 91: 0.147289, lr: 0.01000 #> Loss at epoch 92: 0.183028, lr: 0.01000 #> Loss at epoch 93: 0.114845, lr: 0.01000 #> Loss at epoch 94: 0.102894, lr: 0.01000 #> Loss at epoch 95: 0.127776, lr: 0.01000 #> Loss at epoch 96: 0.134150, lr: 0.01000 #> Loss at epoch 97: 0.126588, lr: 0.01000 #> Loss at epoch 98: 0.139043, lr: 0.01000 #> Loss at epoch 99: 0.152981, lr: 0.01000 #> Loss at epoch 100: 0.136595, lr: 0.01000  # }"},{"path":"/reference/plot.citodnnBootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates graph plot which gives an overview of the network architecture. — plot.citodnnBootstrap","title":"Creates graph plot which gives an overview of the network architecture. — plot.citodnnBootstrap","text":"Creates graph plot gives overview network architecture.","code":""},{"path":"/reference/plot.citodnnBootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates graph plot which gives an overview of the network architecture. — plot.citodnnBootstrap","text":"","code":"# S3 method for citodnnBootstrap plot(x, node_size = 1, scale_edges = FALSE, ...)"},{"path":"/reference/plot.citodnnBootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates graph plot which gives an overview of the network architecture. — plot.citodnnBootstrap","text":"x model created dnn bootstrapping node_size size node plot scale_edges edge weight gets scaled according weights (layer specific) ... functionality implemented yet","code":""},{"path":"/reference/plot.citodnnBootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates graph plot which gives an overview of the network architecture. — plot.citodnnBootstrap","text":"plot made 'ggraph' + 'igraph' represents neural network","code":""},{"path":"/reference/plot.citodnnBootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates graph plot which gives an overview of the network architecture. — plot.citodnnBootstrap","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  set.seed(222) validation_set<- sample(c(1:nrow(datasets::iris)),25)  # Build and train  Network nn.fit<- dnn(Sepal.Length~., data = datasets::iris[-validation_set,])  plot(nn.fit) } #> Loss at epoch 1: 18.236312, lr: 0.01000  #> Loss at epoch 2: 0.573568, lr: 0.01000 #> Loss at epoch 3: 1.284131, lr: 0.01000 #> Loss at epoch 4: 1.646624, lr: 0.01000 #> Loss at epoch 5: 0.712016, lr: 0.01000 #> Loss at epoch 6: 0.438103, lr: 0.01000 #> Loss at epoch 7: 0.223968, lr: 0.01000 #> Loss at epoch 8: 0.209444, lr: 0.01000 #> Loss at epoch 9: 0.165826, lr: 0.01000 #> Loss at epoch 10: 0.161382, lr: 0.01000 #> Loss at epoch 11: 0.161826, lr: 0.01000 #> Loss at epoch 12: 0.146622, lr: 0.01000 #> Loss at epoch 13: 0.156907, lr: 0.01000 #> Loss at epoch 14: 0.400411, lr: 0.01000 #> Loss at epoch 15: 0.172799, lr: 0.01000 #> Loss at epoch 16: 0.154712, lr: 0.01000 #> Loss at epoch 17: 0.178475, lr: 0.01000 #> Loss at epoch 18: 0.342589, lr: 0.01000 #> Loss at epoch 19: 0.187426, lr: 0.01000 #> Loss at epoch 20: 0.272090, lr: 0.01000 #> Loss at epoch 21: 0.261106, lr: 0.01000 #> Loss at epoch 22: 0.285021, lr: 0.01000 #> Loss at epoch 23: 0.156465, lr: 0.01000 #> Loss at epoch 24: 0.197484, lr: 0.01000 #> Loss at epoch 25: 0.226362, lr: 0.01000 #> Loss at epoch 26: 0.218432, lr: 0.01000 #> Loss at epoch 27: 0.159126, lr: 0.01000 #> Loss at epoch 28: 0.280823, lr: 0.01000 #> Loss at epoch 29: 0.197791, lr: 0.01000 #> Loss at epoch 30: 0.149870, lr: 0.01000 #> Loss at epoch 31: 0.195843, lr: 0.01000 #> Loss at epoch 32: 0.256022, lr: 0.01000 #> Loss at epoch 33: 0.146728, lr: 0.01000 #> Loss at epoch 34: 0.161148, lr: 0.01000 #> Loss at epoch 35: 0.148177, lr: 0.01000 #> Loss at epoch 36: 0.133249, lr: 0.01000 #> Loss at epoch 37: 0.199104, lr: 0.01000 #> Loss at epoch 38: 0.319772, lr: 0.01000 #> Loss at epoch 39: 0.181957, lr: 0.01000 #> Loss at epoch 40: 0.219883, lr: 0.01000 #> Loss at epoch 41: 0.164748, lr: 0.01000 #> Loss at epoch 42: 0.125657, lr: 0.01000 #> Loss at epoch 43: 0.152363, lr: 0.01000 #> Loss at epoch 44: 0.132737, lr: 0.01000 #> Loss at epoch 45: 0.184744, lr: 0.01000 #> Loss at epoch 46: 0.140056, lr: 0.01000 #> Loss at epoch 47: 0.166720, lr: 0.01000 #> Loss at epoch 48: 0.218256, lr: 0.01000 #> Loss at epoch 49: 0.130672, lr: 0.01000 #> Loss at epoch 50: 0.131808, lr: 0.01000 #> Loss at epoch 51: 0.208330, lr: 0.01000 #> Loss at epoch 52: 0.134763, lr: 0.01000 #> Loss at epoch 53: 0.176529, lr: 0.01000 #> Loss at epoch 54: 0.128937, lr: 0.01000 #> Loss at epoch 55: 0.176808, lr: 0.01000 #> Loss at epoch 56: 0.140856, lr: 0.01000 #> Loss at epoch 57: 0.126666, lr: 0.01000 #> Loss at epoch 58: 0.148914, lr: 0.01000 #> Loss at epoch 59: 0.130337, lr: 0.01000 #> Loss at epoch 60: 0.128702, lr: 0.01000 #> Loss at epoch 61: 0.155127, lr: 0.01000 #> Loss at epoch 62: 0.136243, lr: 0.01000 #> Loss at epoch 63: 0.119772, lr: 0.01000 #> Loss at epoch 64: 0.115715, lr: 0.01000 #> Loss at epoch 65: 0.128308, lr: 0.01000 #> Loss at epoch 66: 0.135294, lr: 0.01000 #> Loss at epoch 67: 0.135105, lr: 0.01000 #> Loss at epoch 68: 0.126431, lr: 0.01000 #> Loss at epoch 69: 0.148969, lr: 0.01000 #> Loss at epoch 70: 0.218020, lr: 0.01000 #> Loss at epoch 71: 0.130704, lr: 0.01000 #> Loss at epoch 72: 0.146090, lr: 0.01000 #> Loss at epoch 73: 0.470040, lr: 0.01000 #> Loss at epoch 74: 0.486178, lr: 0.01000 #> Loss at epoch 75: 0.126273, lr: 0.01000 #> Loss at epoch 76: 0.116513, lr: 0.01000 #> Loss at epoch 77: 0.150550, lr: 0.01000 #> Loss at epoch 78: 0.115414, lr: 0.01000 #> Loss at epoch 79: 0.129654, lr: 0.01000 #> Loss at epoch 80: 0.129888, lr: 0.01000 #> Loss at epoch 81: 0.182734, lr: 0.01000 #> Loss at epoch 82: 0.171063, lr: 0.01000 #> Loss at epoch 83: 0.127813, lr: 0.01000 #> Loss at epoch 84: 0.133216, lr: 0.01000 #> Loss at epoch 85: 0.142913, lr: 0.01000 #> Loss at epoch 86: 0.189760, lr: 0.01000 #> Loss at epoch 87: 0.139229, lr: 0.01000 #> Loss at epoch 88: 0.112929, lr: 0.01000 #> Loss at epoch 89: 0.138920, lr: 0.01000 #> Loss at epoch 90: 0.150976, lr: 0.01000 #> Loss at epoch 91: 0.167222, lr: 0.01000 #> Loss at epoch 92: 0.190790, lr: 0.01000 #> Loss at epoch 93: 0.172580, lr: 0.01000 #> Loss at epoch 94: 0.253886, lr: 0.01000 #> Loss at epoch 95: 0.117027, lr: 0.01000 #> Loss at epoch 96: 0.206245, lr: 0.01000 #> Loss at epoch 97: 0.121637, lr: 0.01000 #> Loss at epoch 98: 0.160829, lr: 0.01000 #> Loss at epoch 99: 0.128743, lr: 0.01000 #> Loss at epoch 100: 0.212876, lr: 0.01000  # }"},{"path":"/reference/predict.citocnn.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from a fitted cnn model — predict.citocnn","title":"Predict from a fitted cnn model — predict.citocnn","text":"Predict fitted cnn model","code":""},{"path":"/reference/predict.citocnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from a fitted cnn model — predict.citocnn","text":"","code":"# S3 method for citocnn predict(   object,   newdata = NULL,   type = c(\"link\", \"response\", \"class\"),   device = c(\"cpu\", \"cuda\", \"mps\"),   ... )"},{"path":"/reference/predict.citocnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from a fitted cnn model — predict.citocnn","text":"object model created cnn newdata new data predictions type value calculated, either raw response, output link function predicted class (case classification) device device network trained . ... additional arguments","code":""},{"path":"/reference/predict.citocnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict from a fitted cnn model — predict.citocnn","text":"prediction matrix","code":""},{"path":"/reference/predict.citodnn.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from a fitted dnn model — predict.citodnn","title":"Predict from a fitted dnn model — predict.citodnn","text":"Predict fitted dnn model","code":""},{"path":"/reference/predict.citodnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from a fitted dnn model — predict.citodnn","text":"","code":"# S3 method for citodnn predict(   object,   newdata = NULL,   type = c(\"link\", \"response\", \"class\"),   device = c(\"cpu\", \"cuda\", \"mps\"),   reduce = c(\"mean\", \"median\", \"none\"),   ... )  # S3 method for citodnnBootstrap predict(   object,   newdata = NULL,   type = c(\"link\", \"response\", \"class\"),   device = c(\"cpu\", \"cuda\", \"mps\"),   reduce = c(\"mean\", \"median\", \"none\"),   ... )"},{"path":"/reference/predict.citodnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from a fitted dnn model — predict.citodnn","text":"object model created dnn newdata new data predictions type type predictions. default scale linear predictor, \"response\" scale response, \"class\" means class predictions returned (classification task) device device network trained . reduce predictions bootstrapped model default reduced (mean, optional median none) ... additional arguments","code":""},{"path":"/reference/predict.citodnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict from a fitted dnn model — predict.citodnn","text":"prediction matrix","code":""},{"path":"/reference/predict.citodnn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict from a fitted dnn model — predict.citodnn","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  set.seed(222) validation_set<- sample(c(1:nrow(datasets::iris)),25)  # Build and train  Network nn.fit<- dnn(Sepal.Length~., data = datasets::iris[-validation_set,])  # Use model on validation set predictions <- predict(nn.fit, iris[validation_set,]) # Scatterplot plot(iris[validation_set,]$Sepal.Length,predictions) # MAE mean(abs(predictions-iris[validation_set,]$Sepal.Length)) } #> Loss at epoch 1: 4.453837, lr: 0.01000  #> Loss at epoch 2: 0.456208, lr: 0.01000 #> Loss at epoch 3: 0.371628, lr: 0.01000 #> Loss at epoch 4: 0.184883, lr: 0.01000 #> Loss at epoch 5: 0.122872, lr: 0.01000 #> Loss at epoch 6: 0.223498, lr: 0.01000 #> Loss at epoch 7: 0.359679, lr: 0.01000 #> Loss at epoch 8: 0.212651, lr: 0.01000 #> Loss at epoch 9: 0.275352, lr: 0.01000 #> Loss at epoch 10: 0.201462, lr: 0.01000 #> Loss at epoch 11: 0.343967, lr: 0.01000 #> Loss at epoch 12: 0.222462, lr: 0.01000 #> Loss at epoch 13: 0.148895, lr: 0.01000 #> Loss at epoch 14: 0.147911, lr: 0.01000 #> Loss at epoch 15: 0.203213, lr: 0.01000 #> Loss at epoch 16: 0.207719, lr: 0.01000 #> Loss at epoch 17: 0.183564, lr: 0.01000 #> Loss at epoch 18: 0.179625, lr: 0.01000 #> Loss at epoch 19: 0.282999, lr: 0.01000 #> Loss at epoch 20: 0.195803, lr: 0.01000 #> Loss at epoch 21: 0.317257, lr: 0.01000 #> Loss at epoch 22: 0.171788, lr: 0.01000 #> Loss at epoch 23: 0.286345, lr: 0.01000 #> Loss at epoch 24: 0.153894, lr: 0.01000 #> Loss at epoch 25: 0.158205, lr: 0.01000 #> Loss at epoch 26: 0.195082, lr: 0.01000 #> Loss at epoch 27: 0.139357, lr: 0.01000 #> Loss at epoch 28: 0.216523, lr: 0.01000 #> Loss at epoch 29: 0.155272, lr: 0.01000 #> Loss at epoch 30: 0.150994, lr: 0.01000 #> Loss at epoch 31: 0.198657, lr: 0.01000 #> Loss at epoch 32: 0.126150, lr: 0.01000 #> Loss at epoch 33: 0.137720, lr: 0.01000 #> Loss at epoch 34: 0.111334, lr: 0.01000 #> Loss at epoch 35: 0.117098, lr: 0.01000 #> Loss at epoch 36: 0.144077, lr: 0.01000 #> Loss at epoch 37: 0.111538, lr: 0.01000 #> Loss at epoch 38: 0.155157, lr: 0.01000 #> Loss at epoch 39: 0.196952, lr: 0.01000 #> Loss at epoch 40: 0.205145, lr: 0.01000 #> Loss at epoch 41: 0.251680, lr: 0.01000 #> Loss at epoch 42: 0.175374, lr: 0.01000 #> Loss at epoch 43: 0.223751, lr: 0.01000 #> Loss at epoch 44: 0.132203, lr: 0.01000 #> Loss at epoch 45: 0.147980, lr: 0.01000 #> Loss at epoch 46: 0.122104, lr: 0.01000 #> Loss at epoch 47: 0.183033, lr: 0.01000 #> Loss at epoch 48: 0.134295, lr: 0.01000 #> Loss at epoch 49: 0.192679, lr: 0.01000 #> Loss at epoch 50: 0.116868, lr: 0.01000 #> Loss at epoch 51: 0.220613, lr: 0.01000 #> Loss at epoch 52: 0.174982, lr: 0.01000 #> Loss at epoch 53: 0.125169, lr: 0.01000 #> Loss at epoch 54: 0.179802, lr: 0.01000 #> Loss at epoch 55: 0.118604, lr: 0.01000 #> Loss at epoch 56: 0.115804, lr: 0.01000 #> Loss at epoch 57: 0.149401, lr: 0.01000 #> Loss at epoch 58: 0.115324, lr: 0.01000 #> Loss at epoch 59: 0.226564, lr: 0.01000 #> Loss at epoch 60: 0.178268, lr: 0.01000 #> Loss at epoch 61: 0.208333, lr: 0.01000 #> Loss at epoch 62: 0.220713, lr: 0.01000 #> Loss at epoch 63: 0.149563, lr: 0.01000 #> Loss at epoch 64: 0.151610, lr: 0.01000 #> Loss at epoch 65: 0.120319, lr: 0.01000 #> Loss at epoch 66: 0.126113, lr: 0.01000 #> Loss at epoch 67: 0.151261, lr: 0.01000 #> Loss at epoch 68: 0.183785, lr: 0.01000 #> Loss at epoch 69: 0.113737, lr: 0.01000 #> Loss at epoch 70: 0.128577, lr: 0.01000 #> Loss at epoch 71: 0.118970, lr: 0.01000 #> Loss at epoch 72: 0.169542, lr: 0.01000 #> Loss at epoch 73: 0.153866, lr: 0.01000 #> Loss at epoch 74: 0.114404, lr: 0.01000 #> Loss at epoch 75: 0.195387, lr: 0.01000 #> Loss at epoch 76: 0.114894, lr: 0.01000 #> Loss at epoch 77: 0.212280, lr: 0.01000 #> Loss at epoch 78: 0.207637, lr: 0.01000 #> Loss at epoch 79: 0.140767, lr: 0.01000 #> Loss at epoch 80: 0.174199, lr: 0.01000 #> Loss at epoch 81: 0.124833, lr: 0.01000 #> Loss at epoch 82: 0.106618, lr: 0.01000 #> Loss at epoch 83: 0.134149, lr: 0.01000 #> Loss at epoch 84: 0.163892, lr: 0.01000 #> Loss at epoch 85: 0.146764, lr: 0.01000 #> Loss at epoch 86: 0.105623, lr: 0.01000 #> Loss at epoch 87: 0.133647, lr: 0.01000 #> Loss at epoch 88: 0.180996, lr: 0.01000 #> Loss at epoch 89: 0.102864, lr: 0.01000 #> Loss at epoch 90: 0.150369, lr: 0.01000 #> Loss at epoch 91: 0.142908, lr: 0.01000 #> Loss at epoch 92: 0.142787, lr: 0.01000 #> Loss at epoch 93: 0.130769, lr: 0.01000 #> Loss at epoch 94: 0.136774, lr: 0.01000 #> Loss at epoch 95: 0.143546, lr: 0.01000 #> Loss at epoch 96: 0.114671, lr: 0.01000 #> Loss at epoch 97: 0.151838, lr: 0.01000 #> Loss at epoch 98: 0.170577, lr: 0.01000 #> Loss at epoch 99: 0.176724, lr: 0.01000 #> Loss at epoch 100: 0.130555, lr: 0.01000  #> [1] 0.3843988 # }"},{"path":"/reference/predict.citodnnBootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from a fitted dnn model — predict.citodnnBootstrap","title":"Predict from a fitted dnn model — predict.citodnnBootstrap","text":"Predict fitted dnn model","code":""},{"path":"/reference/predict.citodnnBootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from a fitted dnn model — predict.citodnnBootstrap","text":"","code":"# S3 method for citodnnBootstrap predict(   object,   newdata = NULL,   type = c(\"link\", \"response\", \"class\"),   device = c(\"cpu\", \"cuda\", \"mps\"),   ... )"},{"path":"/reference/predict.citodnnBootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from a fitted dnn model — predict.citodnnBootstrap","text":"object model created dnn bootstrapping newdata new data predictions type value calculated, either raw response, output link function predicted class (case classification) device device network trained . ... additional arguments","code":""},{"path":"/reference/predict.citodnnBootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict from a fitted dnn model — predict.citodnnBootstrap","text":"prediction array","code":""},{"path":"/reference/predict.citodnnBootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict from a fitted dnn model — predict.citodnnBootstrap","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  set.seed(222) validation_set<- sample(c(1:nrow(datasets::iris)),25)  # Build and train  Network nn.fit<- dnn(Sepal.Length~., data = datasets::iris[-validation_set,])  # Use model on validation set predictions <- predict(nn.fit, iris[validation_set,]) # Scatterplot plot(iris[validation_set,]$Sepal.Length,predictions) # MAE mean(abs(predictions-iris[validation_set,]$Sepal.Length)) } #> Loss at epoch 1: 12.734608, lr: 0.01000  #> Loss at epoch 2: 1.009327, lr: 0.01000 #> Loss at epoch 3: 0.791762, lr: 0.01000 #> Loss at epoch 4: 0.382684, lr: 0.01000 #> Loss at epoch 5: 0.282470, lr: 0.01000 #> Loss at epoch 6: 0.266603, lr: 0.01000 #> Loss at epoch 7: 0.209379, lr: 0.01000 #> Loss at epoch 8: 0.383353, lr: 0.01000 #> Loss at epoch 9: 1.646809, lr: 0.01000 #> Loss at epoch 10: 1.176904, lr: 0.01000 #> Loss at epoch 11: 1.046975, lr: 0.01000 #> Loss at epoch 12: 0.617993, lr: 0.01000 #> Loss at epoch 13: 0.323403, lr: 0.01000 #> Loss at epoch 14: 0.287769, lr: 0.01000 #> Loss at epoch 15: 0.179508, lr: 0.01000 #> Loss at epoch 16: 0.122776, lr: 0.01000 #> Loss at epoch 17: 0.180030, lr: 0.01000 #> Loss at epoch 18: 0.146483, lr: 0.01000 #> Loss at epoch 19: 0.162294, lr: 0.01000 #> Loss at epoch 20: 0.386956, lr: 0.01000 #> Loss at epoch 21: 0.482887, lr: 0.01000 #> Loss at epoch 22: 1.269091, lr: 0.01000 #> Loss at epoch 23: 0.726151, lr: 0.01000 #> Loss at epoch 24: 0.372363, lr: 0.01000 #> Loss at epoch 25: 0.491883, lr: 0.01000 #> Loss at epoch 26: 0.530270, lr: 0.01000 #> Loss at epoch 27: 0.351080, lr: 0.01000 #> Loss at epoch 28: 0.260066, lr: 0.01000 #> Loss at epoch 29: 0.342990, lr: 0.01000 #> Loss at epoch 30: 0.181498, lr: 0.01000 #> Loss at epoch 31: 0.121405, lr: 0.01000 #> Loss at epoch 32: 0.168414, lr: 0.01000 #> Loss at epoch 33: 0.132640, lr: 0.01000 #> Loss at epoch 34: 0.217225, lr: 0.01000 #> Loss at epoch 35: 0.144152, lr: 0.01000 #> Loss at epoch 36: 0.138186, lr: 0.01000 #> Loss at epoch 37: 0.431724, lr: 0.01000 #> Loss at epoch 38: 0.424512, lr: 0.01000 #> Loss at epoch 39: 0.224537, lr: 0.01000 #> Loss at epoch 40: 0.268318, lr: 0.01000 #> Loss at epoch 41: 0.177155, lr: 0.01000 #> Loss at epoch 42: 0.207004, lr: 0.01000 #> Loss at epoch 43: 0.148525, lr: 0.01000 #> Loss at epoch 44: 0.218238, lr: 0.01000 #> Loss at epoch 45: 0.202326, lr: 0.01000 #> Loss at epoch 46: 0.224178, lr: 0.01000 #> Loss at epoch 47: 0.466227, lr: 0.01000 #> Loss at epoch 48: 0.138728, lr: 0.01000 #> Loss at epoch 49: 0.183997, lr: 0.01000 #> Loss at epoch 50: 0.178465, lr: 0.01000 #> Loss at epoch 51: 0.110940, lr: 0.01000 #> Loss at epoch 52: 0.142869, lr: 0.01000 #> Loss at epoch 53: 0.252505, lr: 0.01000 #> Loss at epoch 54: 0.202346, lr: 0.01000 #> Loss at epoch 55: 0.148615, lr: 0.01000 #> Loss at epoch 56: 0.170698, lr: 0.01000 #> Loss at epoch 57: 0.120891, lr: 0.01000 #> Loss at epoch 58: 0.106906, lr: 0.01000 #> Loss at epoch 59: 0.108306, lr: 0.01000 #> Loss at epoch 60: 0.111088, lr: 0.01000 #> Loss at epoch 61: 0.134870, lr: 0.01000 #> Loss at epoch 62: 0.107316, lr: 0.01000 #> Loss at epoch 63: 0.162866, lr: 0.01000 #> Loss at epoch 64: 0.151964, lr: 0.01000 #> Loss at epoch 65: 0.108519, lr: 0.01000 #> Loss at epoch 66: 0.249687, lr: 0.01000 #> Loss at epoch 67: 0.146583, lr: 0.01000 #> Loss at epoch 68: 0.125673, lr: 0.01000 #> Loss at epoch 69: 0.129624, lr: 0.01000 #> Loss at epoch 70: 0.268873, lr: 0.01000 #> Loss at epoch 71: 0.288870, lr: 0.01000 #> Loss at epoch 72: 0.116791, lr: 0.01000 #> Loss at epoch 73: 0.124930, lr: 0.01000 #> Loss at epoch 74: 0.144200, lr: 0.01000 #> Loss at epoch 75: 0.232230, lr: 0.01000 #> Loss at epoch 76: 0.288180, lr: 0.01000 #> Loss at epoch 77: 0.147038, lr: 0.01000 #> Loss at epoch 78: 0.116720, lr: 0.01000 #> Loss at epoch 79: 0.130726, lr: 0.01000 #> Loss at epoch 80: 0.136261, lr: 0.01000 #> Loss at epoch 81: 0.255564, lr: 0.01000 #> Loss at epoch 82: 0.122687, lr: 0.01000 #> Loss at epoch 83: 0.191908, lr: 0.01000 #> Loss at epoch 84: 0.132186, lr: 0.01000 #> Loss at epoch 85: 0.129385, lr: 0.01000 #> Loss at epoch 86: 0.128990, lr: 0.01000 #> Loss at epoch 87: 0.198653, lr: 0.01000 #> Loss at epoch 88: 0.144992, lr: 0.01000 #> Loss at epoch 89: 0.120752, lr: 0.01000 #> Loss at epoch 90: 0.123176, lr: 0.01000 #> Loss at epoch 91: 0.104252, lr: 0.01000 #> Loss at epoch 92: 0.156841, lr: 0.01000 #> Loss at epoch 93: 0.111464, lr: 0.01000 #> Loss at epoch 94: 0.098983, lr: 0.01000 #> Loss at epoch 95: 0.103327, lr: 0.01000 #> Loss at epoch 96: 0.120117, lr: 0.01000 #> Loss at epoch 97: 0.119653, lr: 0.01000 #> Loss at epoch 98: 0.144773, lr: 0.01000 #> Loss at epoch 99: 0.120031, lr: 0.01000 #> Loss at epoch 100: 0.156058, lr: 0.01000  #> [1] 0.5177923 # }"},{"path":"/reference/print.citoarchitecture.html","id":null,"dir":"Reference","previous_headings":"","what":"Print class citoarchitecture — print.citoarchitecture","title":"Print class citoarchitecture — print.citoarchitecture","text":"Print class citoarchitecture","code":""},{"path":"/reference/print.citoarchitecture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print class citoarchitecture — print.citoarchitecture","text":"","code":"# S3 method for citoarchitecture print(x, input_shape, output_shape, ...)"},{"path":"/reference/print.citoarchitecture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print class citoarchitecture — print.citoarchitecture","text":"x object created create_architecture input_shape vector dimensions single sample (e.g. c(3,28,28)) output_shape number nodes output layer ... additional arguments","code":""},{"path":"/reference/print.citoarchitecture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print class citoarchitecture — print.citoarchitecture","text":"original object","code":""},{"path":"/reference/print.citocnn.html","id":null,"dir":"Reference","previous_headings":"","what":"Print class citocnn — print.citocnn","title":"Print class citocnn — print.citocnn","text":"Print class citocnn","code":""},{"path":"/reference/print.citocnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print class citocnn — print.citocnn","text":"","code":"# S3 method for citocnn print(x, ...)"},{"path":"/reference/print.citocnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print class citocnn — print.citocnn","text":"x model created cnn ... additional arguments","code":""},{"path":"/reference/print.citocnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print class citocnn — print.citocnn","text":"original object x","code":""},{"path":"/reference/print.citodnn.html","id":null,"dir":"Reference","previous_headings":"","what":"Print class citodnn — print.citodnn","title":"Print class citodnn — print.citodnn","text":"Print class citodnn","code":""},{"path":"/reference/print.citodnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print class citodnn — print.citodnn","text":"","code":"# S3 method for citodnn print(x, ...)  # S3 method for citodnnBootstrap print(x, ...)"},{"path":"/reference/print.citodnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print class citodnn — print.citodnn","text":"x model created dnn ... additional arguments","code":""},{"path":"/reference/print.citodnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print class citodnn — print.citodnn","text":"original object x gets returned","code":""},{"path":"/reference/print.citodnn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print class citodnn — print.citodnn","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  set.seed(222) validation_set<- sample(c(1:nrow(datasets::iris)),25)  # Build and train  Network nn.fit<- dnn(Sepal.Length~., data = datasets::iris[-validation_set,])  # Structure of Neural Network print(nn.fit) } #> Loss at epoch 1: 3.328233, lr: 0.01000  #> Loss at epoch 2: 0.333966, lr: 0.01000 #> Loss at epoch 3: 0.198346, lr: 0.01000 #> Loss at epoch 4: 0.388438, lr: 0.01000 #> Loss at epoch 5: 0.318172, lr: 0.01000 #> Loss at epoch 6: 0.238429, lr: 0.01000 #> Loss at epoch 7: 0.219224, lr: 0.01000 #> Loss at epoch 8: 0.221718, lr: 0.01000 #> Loss at epoch 9: 0.146948, lr: 0.01000 #> Loss at epoch 10: 0.232598, lr: 0.01000 #> Loss at epoch 11: 0.191632, lr: 0.01000 #> Loss at epoch 12: 0.189307, lr: 0.01000 #> Loss at epoch 13: 0.165592, lr: 0.01000 #> Loss at epoch 14: 0.296233, lr: 0.01000 #> Loss at epoch 15: 0.271862, lr: 0.01000 #> Loss at epoch 16: 0.158132, lr: 0.01000 #> Loss at epoch 17: 0.182157, lr: 0.01000 #> Loss at epoch 18: 0.223267, lr: 0.01000 #> Loss at epoch 19: 0.201213, lr: 0.01000 #> Loss at epoch 20: 0.163479, lr: 0.01000 #> Loss at epoch 21: 0.515075, lr: 0.01000 #> Loss at epoch 22: 0.201410, lr: 0.01000 #> Loss at epoch 23: 0.189454, lr: 0.01000 #> Loss at epoch 24: 0.232972, lr: 0.01000 #> Loss at epoch 25: 0.196269, lr: 0.01000 #> Loss at epoch 26: 0.150266, lr: 0.01000 #> Loss at epoch 27: 0.181275, lr: 0.01000 #> Loss at epoch 28: 0.286709, lr: 0.01000 #> Loss at epoch 29: 0.191308, lr: 0.01000 #> Loss at epoch 30: 0.180104, lr: 0.01000 #> Loss at epoch 31: 0.149171, lr: 0.01000 #> Loss at epoch 32: 0.116709, lr: 0.01000 #> Loss at epoch 33: 0.142111, lr: 0.01000 #> Loss at epoch 34: 0.225949, lr: 0.01000 #> Loss at epoch 35: 0.130242, lr: 0.01000 #> Loss at epoch 36: 0.224689, lr: 0.01000 #> Loss at epoch 37: 0.148220, lr: 0.01000 #> Loss at epoch 38: 0.140170, lr: 0.01000 #> Loss at epoch 39: 0.165427, lr: 0.01000 #> Loss at epoch 40: 0.235885, lr: 0.01000 #> Loss at epoch 41: 0.226881, lr: 0.01000 #> Loss at epoch 42: 0.174046, lr: 0.01000 #> Loss at epoch 43: 0.218096, lr: 0.01000 #> Loss at epoch 44: 0.140136, lr: 0.01000 #> Loss at epoch 45: 0.187862, lr: 0.01000 #> Loss at epoch 46: 0.156557, lr: 0.01000 #> Loss at epoch 47: 0.205460, lr: 0.01000 #> Loss at epoch 48: 0.151151, lr: 0.01000 #> Loss at epoch 49: 0.154870, lr: 0.01000 #> Loss at epoch 50: 0.265486, lr: 0.01000 #> Loss at epoch 51: 0.158037, lr: 0.01000 #> Loss at epoch 52: 0.165553, lr: 0.01000 #> Loss at epoch 53: 0.156686, lr: 0.01000 #> Loss at epoch 54: 0.143503, lr: 0.01000 #> Loss at epoch 55: 0.161285, lr: 0.01000 #> Loss at epoch 56: 0.142916, lr: 0.01000 #> Loss at epoch 57: 0.184121, lr: 0.01000 #> Loss at epoch 58: 0.169850, lr: 0.01000 #> Loss at epoch 59: 0.166679, lr: 0.01000 #> Loss at epoch 60: 0.133040, lr: 0.01000 #> Loss at epoch 61: 0.329459, lr: 0.01000 #> Loss at epoch 62: 0.188378, lr: 0.01000 #> Loss at epoch 63: 0.351963, lr: 0.01000 #> Loss at epoch 64: 0.197798, lr: 0.01000 #> Loss at epoch 65: 0.155566, lr: 0.01000 #> Loss at epoch 66: 0.166708, lr: 0.01000 #> Loss at epoch 67: 0.172019, lr: 0.01000 #> Loss at epoch 68: 0.133443, lr: 0.01000 #> Loss at epoch 69: 0.285599, lr: 0.01000 #> Loss at epoch 70: 0.128318, lr: 0.01000 #> Loss at epoch 71: 0.124922, lr: 0.01000 #> Loss at epoch 72: 0.123987, lr: 0.01000 #> Loss at epoch 73: 0.160038, lr: 0.01000 #> Loss at epoch 74: 0.149813, lr: 0.01000 #> Loss at epoch 75: 0.145077, lr: 0.01000 #> Loss at epoch 76: 0.175443, lr: 0.01000 #> Loss at epoch 77: 0.148920, lr: 0.01000 #> Loss at epoch 78: 0.221722, lr: 0.01000 #> Loss at epoch 79: 0.130878, lr: 0.01000 #> Loss at epoch 80: 0.165942, lr: 0.01000 #> Loss at epoch 81: 0.279585, lr: 0.01000 #> Loss at epoch 82: 0.108768, lr: 0.01000 #> Loss at epoch 83: 0.158281, lr: 0.01000 #> Loss at epoch 84: 0.217726, lr: 0.01000 #> Loss at epoch 85: 0.167912, lr: 0.01000 #> Loss at epoch 86: 0.233916, lr: 0.01000 #> Loss at epoch 87: 0.127778, lr: 0.01000 #> Loss at epoch 88: 0.128283, lr: 0.01000 #> Loss at epoch 89: 0.145103, lr: 0.01000 #> Loss at epoch 90: 0.140567, lr: 0.01000 #> Loss at epoch 91: 0.184937, lr: 0.01000 #> Loss at epoch 92: 0.148623, lr: 0.01000 #> Loss at epoch 93: 0.161188, lr: 0.01000 #> Loss at epoch 94: 0.238762, lr: 0.01000 #> Loss at epoch 95: 0.235321, lr: 0.01000 #> Loss at epoch 96: 0.132199, lr: 0.01000 #> Loss at epoch 97: 0.127768, lr: 0.01000 #> Loss at epoch 98: 0.124937, lr: 0.01000 #> Loss at epoch 99: 0.112152, lr: 0.01000 #> Loss at epoch 100: 0.120861, lr: 0.01000 #> dnn(formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width +  #>     Species - 1, data = datasets::iris[-validation_set, ]) #> An `nn_module` containing 2,951 parameters. #>  #> ── Modules ───────────────────────────────────────────────────────────────────── #> • 0: <nn_linear> #350 parameters #> • 1: <nn_selu> #0 parameters #> • 2: <nn_linear> #2,550 parameters #> • 3: <nn_selu> #0 parameters #> • 4: <nn_linear> #51 parameters # }"},{"path":"/reference/print.citodnnBootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Print class citodnnBootstrap — print.citodnnBootstrap","title":"Print class citodnnBootstrap — print.citodnnBootstrap","text":"Print class citodnnBootstrap","code":""},{"path":"/reference/print.citodnnBootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print class citodnnBootstrap — print.citodnnBootstrap","text":"","code":"# S3 method for citodnnBootstrap print(x, ...)"},{"path":"/reference/print.citodnnBootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print class citodnnBootstrap — print.citodnnBootstrap","text":"x model created dnn ... additional arguments","code":""},{"path":"/reference/print.citodnnBootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print class citodnnBootstrap — print.citodnnBootstrap","text":"prediction matrix original object x gets returned","code":""},{"path":"/reference/print.citodnnBootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print class citodnnBootstrap — print.citodnnBootstrap","text":"","code":"# \\donttest{ if(torch::torch_is_installed()){ library(cito)  set.seed(222) validation_set<- sample(c(1:nrow(datasets::iris)),25)  # Build and train  Network nn.fit<- dnn(Sepal.Length~., data = datasets::iris[-validation_set,])  # Sturcture of Neural Network print(nn.fit) } #> Loss at epoch 1: 13.921472, lr: 0.01000  #> Loss at epoch 2: 0.532820, lr: 0.01000 #> Loss at epoch 3: 0.808991, lr: 0.01000 #> Loss at epoch 4: 1.603276, lr: 0.01000 #> Loss at epoch 5: 3.003034, lr: 0.01000 #> Loss at epoch 6: 1.742090, lr: 0.01000 #> Loss at epoch 7: 1.600960, lr: 0.01000 #> Loss at epoch 8: 0.955463, lr: 0.01000 #> Loss at epoch 9: 1.146106, lr: 0.01000 #> Loss at epoch 10: 1.012776, lr: 0.01000 #> Loss at epoch 11: 1.917036, lr: 0.01000 #> Loss at epoch 12: 0.641649, lr: 0.01000 #> Loss at epoch 13: 0.415380, lr: 0.01000 #> Loss at epoch 14: 0.383970, lr: 0.01000 #> Loss at epoch 15: 0.211488, lr: 0.01000 #> Loss at epoch 16: 0.354538, lr: 0.01000 #> Loss at epoch 17: 0.217027, lr: 0.01000 #> Loss at epoch 18: 0.134815, lr: 0.01000 #> Loss at epoch 19: 0.170333, lr: 0.01000 #> Loss at epoch 20: 0.152579, lr: 0.01000 #> Loss at epoch 21: 0.220996, lr: 0.01000 #> Loss at epoch 22: 0.197554, lr: 0.01000 #> Loss at epoch 23: 0.323281, lr: 0.01000 #> Loss at epoch 24: 0.309282, lr: 0.01000 #> Loss at epoch 25: 0.414350, lr: 0.01000 #> Loss at epoch 26: 0.409929, lr: 0.01000 #> Loss at epoch 27: 0.151331, lr: 0.01000 #> Loss at epoch 28: 0.238628, lr: 0.01000 #> Loss at epoch 29: 0.300341, lr: 0.01000 #> Loss at epoch 30: 0.139181, lr: 0.01000 #> Loss at epoch 31: 0.182284, lr: 0.01000 #> Loss at epoch 32: 0.197573, lr: 0.01000 #> Loss at epoch 33: 0.131313, lr: 0.01000 #> Loss at epoch 34: 0.232195, lr: 0.01000 #> Loss at epoch 35: 0.255185, lr: 0.01000 #> Loss at epoch 36: 0.168756, lr: 0.01000 #> Loss at epoch 37: 0.271443, lr: 0.01000 #> Loss at epoch 38: 0.321823, lr: 0.01000 #> Loss at epoch 39: 0.148557, lr: 0.01000 #> Loss at epoch 40: 0.168826, lr: 0.01000 #> Loss at epoch 41: 0.131688, lr: 0.01000 #> Loss at epoch 42: 0.130998, lr: 0.01000 #> Loss at epoch 43: 0.218387, lr: 0.01000 #> Loss at epoch 44: 0.151146, lr: 0.01000 #> Loss at epoch 45: 0.151091, lr: 0.01000 #> Loss at epoch 46: 0.280676, lr: 0.01000 #> Loss at epoch 47: 0.152622, lr: 0.01000 #> Loss at epoch 48: 0.120542, lr: 0.01000 #> Loss at epoch 49: 0.163378, lr: 0.01000 #> Loss at epoch 50: 0.152028, lr: 0.01000 #> Loss at epoch 51: 0.125148, lr: 0.01000 #> Loss at epoch 52: 0.118782, lr: 0.01000 #> Loss at epoch 53: 0.138084, lr: 0.01000 #> Loss at epoch 54: 0.117854, lr: 0.01000 #> Loss at epoch 55: 0.129209, lr: 0.01000 #> Loss at epoch 56: 0.123896, lr: 0.01000 #> Loss at epoch 57: 0.121536, lr: 0.01000 #> Loss at epoch 58: 0.193788, lr: 0.01000 #> Loss at epoch 59: 0.201193, lr: 0.01000 #> Loss at epoch 60: 0.171817, lr: 0.01000 #> Loss at epoch 61: 0.145994, lr: 0.01000 #> Loss at epoch 62: 0.243564, lr: 0.01000 #> Loss at epoch 63: 0.310615, lr: 0.01000 #> Loss at epoch 64: 0.159958, lr: 0.01000 #> Loss at epoch 65: 0.456661, lr: 0.01000 #> Loss at epoch 66: 0.133112, lr: 0.01000 #> Loss at epoch 67: 0.116300, lr: 0.01000 #> Loss at epoch 68: 0.167787, lr: 0.01000 #> Loss at epoch 69: 0.274292, lr: 0.01000 #> Loss at epoch 70: 0.335345, lr: 0.01000 #> Loss at epoch 71: 0.246985, lr: 0.01000 #> Loss at epoch 72: 0.114237, lr: 0.01000 #> Loss at epoch 73: 0.200628, lr: 0.01000 #> Loss at epoch 74: 0.227043, lr: 0.01000 #> Loss at epoch 75: 0.209285, lr: 0.01000 #> Loss at epoch 76: 0.234449, lr: 0.01000 #> Loss at epoch 77: 0.163242, lr: 0.01000 #> Loss at epoch 78: 0.188589, lr: 0.01000 #> Loss at epoch 79: 0.133643, lr: 0.01000 #> Loss at epoch 80: 0.123452, lr: 0.01000 #> Loss at epoch 81: 0.119768, lr: 0.01000 #> Loss at epoch 82: 0.142885, lr: 0.01000 #> Loss at epoch 83: 0.203643, lr: 0.01000 #> Loss at epoch 84: 0.201282, lr: 0.01000 #> Loss at epoch 85: 0.131847, lr: 0.01000 #> Loss at epoch 86: 0.122119, lr: 0.01000 #> Loss at epoch 87: 0.150013, lr: 0.01000 #> Loss at epoch 88: 0.173877, lr: 0.01000 #> Loss at epoch 89: 0.113440, lr: 0.01000 #> Loss at epoch 90: 0.112370, lr: 0.01000 #> Loss at epoch 91: 0.181898, lr: 0.01000 #> Loss at epoch 92: 0.144794, lr: 0.01000 #> Loss at epoch 93: 0.161369, lr: 0.01000 #> Loss at epoch 94: 0.157624, lr: 0.01000 #> Loss at epoch 95: 0.135314, lr: 0.01000 #> Loss at epoch 96: 0.171172, lr: 0.01000 #> Loss at epoch 97: 0.181680, lr: 0.01000 #> Loss at epoch 98: 0.112956, lr: 0.01000 #> Loss at epoch 99: 0.125272, lr: 0.01000 #> Loss at epoch 100: 0.109524, lr: 0.01000 #> dnn(formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width +  #>     Species, data = datasets::iris[-validation_set, ]) #> An `nn_module` containing 2,901 parameters. #>  #> ── Modules ───────────────────────────────────────────────────────────────────── #> • 0: <nn_linear> #300 parameters #> • 1: <nn_relu> #0 parameters #> • 2: <nn_linear> #2,550 parameters #> • 3: <nn_relu> #0 parameters #> • 4: <nn_linear> #51 parameters # }"},{"path":"/reference/print.conditionalEffects.html","id":null,"dir":"Reference","previous_headings":"","what":"Print average conditional effects — print.conditionalEffects","title":"Print average conditional effects — print.conditionalEffects","text":"Print average conditional effects","code":""},{"path":"/reference/print.conditionalEffects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print average conditional effects — print.conditionalEffects","text":"","code":"# S3 method for conditionalEffects print(x, ...)  # S3 method for conditionalEffectsBootstrap print(x, ...)"},{"path":"/reference/print.conditionalEffects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print average conditional effects — print.conditionalEffects","text":"x print ACE calculated conditionalEffects ... optional arguments compatibility generic function, function implemented","code":""},{"path":"/reference/print.conditionalEffects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print average conditional effects — print.conditionalEffects","text":"Matrix average conditional effects","code":""},{"path":"/reference/print.conditionalEffectsBootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Print average conditional effects — print.conditionalEffectsBootstrap","title":"Print average conditional effects — print.conditionalEffectsBootstrap","text":"Print average conditional effects","code":""},{"path":"/reference/print.conditionalEffectsBootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print average conditional effects — print.conditionalEffectsBootstrap","text":"","code":"# S3 method for conditionalEffectsBootstrap print(x, ...)"},{"path":"/reference/print.conditionalEffectsBootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print average conditional effects — print.conditionalEffectsBootstrap","text":"x print ACE calculated conditionalEffects ... optional arguments compatibility generic function, function implemented","code":""},{"path":"/reference/print.conditionalEffectsBootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print average conditional effects — print.conditionalEffectsBootstrap","text":"Matrix average conditional effects","code":""},{"path":"/reference/print.summary.citodnn.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for class summary.citodnn — print.summary.citodnn","title":"Print method for class summary.citodnn — print.summary.citodnn","text":"Print method class summary.citodnn","code":""},{"path":"/reference/print.summary.citodnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for class summary.citodnn — print.summary.citodnn","text":"","code":"# S3 method for summary.citodnn print(x, ...)  # S3 method for summary.citodnnBootstrap print(x, ...)"},{"path":"/reference/print.summary.citodnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for class summary.citodnn — print.summary.citodnn","text":"x summary object created summary.citodnn ... additional arguments","code":""},{"path":"/reference/print.summary.citodnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for class summary.citodnn — print.summary.citodnn","text":"List Matrices importance, average CE, absolute sum CE, standard deviation CE","code":""},{"path":"/reference/print.summary.citodnnBootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for class summary.citodnnBootstrap — print.summary.citodnnBootstrap","title":"Print method for class summary.citodnnBootstrap — print.summary.citodnnBootstrap","text":"Print method class summary.citodnnBootstrap","code":""},{"path":"/reference/print.summary.citodnnBootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for class summary.citodnnBootstrap — print.summary.citodnnBootstrap","text":"","code":"# S3 method for summary.citodnnBootstrap print(x, ...)"},{"path":"/reference/print.summary.citodnnBootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for class summary.citodnnBootstrap — print.summary.citodnnBootstrap","text":"x summary object created summary.citodnnBootstrap ... additional arguments","code":""},{"path":"/reference/print.summary.citodnnBootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for class summary.citodnnBootstrap — print.summary.citodnnBootstrap","text":"List Matrices importance, average CE, absolute sum CE, standard deviation CE","code":""},{"path":"/reference/residuals.citodnn.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Model Residuals — residuals.citodnn","title":"Extract Model Residuals — residuals.citodnn","text":"Returns residuals training set.","code":""},{"path":"/reference/residuals.citodnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Model Residuals — residuals.citodnn","text":"","code":"# S3 method for citodnn residuals(object, ...)"},{"path":"/reference/residuals.citodnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Model Residuals — residuals.citodnn","text":"object model created dnn ... additional arguments implemented","code":""},{"path":"/reference/residuals.citodnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Model Residuals — residuals.citodnn","text":"residuals training set","code":""},{"path":"/reference/simulate_shapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Simulation for CNN — simulate_shapes","title":"Data Simulation for CNN — simulate_shapes","text":"generates images rectangles ellipsoids","code":""},{"path":"/reference/simulate_shapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Simulation for CNN — simulate_shapes","text":"","code":"simulate_shapes(n, size, channels = 1)"},{"path":"/reference/simulate_shapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Simulation for CNN — simulate_shapes","text":"n number images size size (quadratic) images channels number channels generated data (channel new rectangle/ellipsoid created)","code":""},{"path":"/reference/simulate_shapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Simulation for CNN — simulate_shapes","text":"array dimension (n, 1, size, size)","code":""},{"path":"/reference/simulate_shapes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data Simulation for CNN — simulate_shapes","text":"function generates simple data demonstrate usage cnn(). generated images centered rectangles ellipsoids random widths heights.","code":""},{"path":"/reference/simulate_shapes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Data Simulation for CNN — simulate_shapes","text":"Armin Schenk","code":""},{"path":"/reference/sumTerms.html","id":null,"dir":"Reference","previous_headings":"","what":"combine a list of formula terms as a sum — sumTerms","title":"combine a list of formula terms as a sum — sumTerms","text":"combine list formula terms sum","code":""},{"path":"/reference/sumTerms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"combine a list of formula terms as a sum — sumTerms","text":"","code":"sumTerms(termList)"},{"path":"/reference/sumTerms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"combine a list of formula terms as a sum — sumTerms","text":"termList list formula terms","code":""},{"path":"/reference/summary.citocnn.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary citocnn — summary.citocnn","title":"Summary citocnn — summary.citocnn","text":"currently print.citocnn method.","code":""},{"path":"/reference/summary.citocnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary citocnn — summary.citocnn","text":"","code":"# S3 method for citocnn summary(object, ...)"},{"path":"/reference/summary.citocnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary citocnn — summary.citocnn","text":"object model created cnn ... additional arguments","code":""},{"path":"/reference/summary.citocnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary citocnn — summary.citocnn","text":"original object x","code":""},{"path":"/reference/summary.citodnn.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Neural Network of class citodnn — summary.citodnn","title":"Summarize Neural Network of class citodnn — summary.citodnn","text":"Performs Feature Importance calculation based Permutations","code":""},{"path":"/reference/summary.citodnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Neural Network of class citodnn — summary.citodnn","text":"","code":"# S3 method for citodnn summary(object, n_permute = NULL, device = NULL, ...)  # S3 method for citodnnBootstrap summary(object, n_permute = NULL, device = NULL, adjust_se = FALSE, ...)"},{"path":"/reference/summary.citodnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Neural Network of class citodnn — summary.citodnn","text":"object model class citodnn created dnn n_permute number permutations performed. Default \\(3 * \\sqrt{n}\\), n euqals number samples training set device calculating variable importance conditional effects ... additional arguments adjust_se adjust standard errors importance (standard errors multiplied 1/sqrt(3) )","code":""},{"path":"/reference/summary.citodnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Neural Network of class citodnn — summary.citodnn","text":"summary.citodnn returns object class \"summary.citodnn\", list components","code":""},{"path":"/reference/summary.citodnn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Neural Network of class citodnn — summary.citodnn","text":"Performs feature importance calculation suggested  Fisher, Rudin, Dominici (2018), mean standard deviation average conditional Effects suggested Pichler & Hartig (2023). Feature importances interpretation similar ANOVA. Main interaction effects absorbed features. Also, feature importances prone collinearity features, .e. two features collinear, importances might overestimated. Average conditional effects (ACE) similar marginal effects approximate linear effects, .e. interpretation similar effects linear regression model. standard deviation ACE informs non-linearity feature effects. Higher values correlate stronger non-linearities. feature n permutation get done original permuted predictive mean squared error (\\(e_{perm}\\) & \\(e_{orig}\\)) get evaluated \\( FI_j= e_{perm}/e_{orig}\\). Based Mean Squared Error.","code":""},{"path":"/reference/summary.citodnnBootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Neural Network of class citodnnBootstrap — summary.citodnnBootstrap","title":"Summarize Neural Network of class citodnnBootstrap — summary.citodnnBootstrap","text":"Performs Feature Importance calculation based Permutations","code":""},{"path":"/reference/summary.citodnnBootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Neural Network of class citodnnBootstrap — summary.citodnnBootstrap","text":"","code":"# S3 method for citodnnBootstrap summary(object, n_permute = NULL, device = NULL, ...)"},{"path":"/reference/summary.citodnnBootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Neural Network of class citodnnBootstrap — summary.citodnnBootstrap","text":"object model class citodnn created dnn bootstrapping n_permute number permutations performed. Default \\(3 * \\sqrt{n}\\), n euqals number samples training set device calculating variable importance conditional effects ... additional arguments","code":""},{"path":"/reference/summary.citodnnBootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Neural Network of class citodnnBootstrap — summary.citodnnBootstrap","text":"summary.citodnnBootstrap returns object class \"summary.citodnn\", list components","code":""},{"path":"/reference/summary.citodnnBootstrap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Neural Network of class citodnnBootstrap — summary.citodnnBootstrap","text":"Performs feature importance calculation suggested  Fisher, Rudin, Dominici (2018), mean standard deviation average conditional Effects suggested Pichler & Hartig (2023). Feature importances interpretation similar ANOVA. Main interaction effects absorbed features. Also, feature importances prone collinearity features, .e. two features collinear, importances might overestimated. Average conditional effects (ACE) similar marginal effects approximate linear effects, .e. interpretation similar effects linear regression model. standard deviation ACE informs non-linearity feature effects. Higher values correlate stronger non-linearities.","code":""},{"path":"/reference/transfer.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer learning — transfer","title":"Transfer learning — transfer","text":"creates 'transfer' 'citolayer' object used create_architecture.","code":""},{"path":"/reference/transfer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transfer learning — transfer","text":"","code":"transfer(   name = c(\"alexnet\", \"inception_v3\", \"mobilenet_v2\", \"resnet101\", \"resnet152\",     \"resnet18\", \"resnet34\", \"resnet50\", \"resnext101_32x8d\", \"resnext50_32x4d\", \"vgg11\",     \"vgg11_bn\", \"vgg13\", \"vgg13_bn\", \"vgg16\", \"vgg16_bn\", \"vgg19\", \"vgg19_bn\",     \"wide_resnet101_2\", \"wide_resnet50_2\"),   pretrained = TRUE,   freeze = TRUE )"},{"path":"/reference/transfer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transfer learning — transfer","text":"name name pretrained model pretrained FALSE, random weights used instead pretrained weights freeze TRUE, weights pretrained model (except \"classifier\" part end) changed training anymore. works pretrained=TRUE","code":""},{"path":"/reference/transfer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transfer learning — transfer","text":"S3 object class \"transfer\" \"citolayer\"","code":""},{"path":"/reference/transfer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transfer learning — transfer","text":"function creates 'transfer' 'citolayer' object passed create_architecture function. object pretrained models available 'torchvision' package can used cito. 'freeze' set TRUE, weights last part network (consisting one linear layers) adjusted training. citolayers transfer citolayer object calling create_architecture. citolayers transfer citolayer, linear classifier part pretrained model replaced specified citolayers.","code":""},{"path":[]},{"path":"/reference/transfer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transfer learning — transfer","text":"Armin Schenk","code":""},{"path":"/reference/tune.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune hyperparameter — tune","title":"Tune hyperparameter — tune","text":"Control hyperparameter tuning","code":""},{"path":"/reference/tune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune hyperparameter — tune","text":"","code":"tune(   lower = NULL,   upper = NULL,   fixed = NULL,   additional = NULL,   values = NULL )"},{"path":"/reference/tune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune hyperparameter — tune","text":"lower numeric, numeric vector, character, lower boundaries tuning space upper numeric, numeric vector, character, upper boundaries tuning space fixed character, used multi-dimensional hyperparameters hidden, dimensions fixed additional numeric, additional control parameter sets value fixed argument values custom values hyperparameters sampled, must matrix hidden layers (first column == nodes, second column == number layers)","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"cito 1.1","text":"hyperparameter tuning (experimental) burnin parameter multivariate probit model X Y support (alternative interface) negative binomial distribution","code":""},{"path":"/news/index.html","id":"minor-changes-1-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"cito 1.1","text":"Improved vignette Improved README","code":""},{"path":"/news/index.html","id":"bug-fixes-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"cito 1.1","text":"dropout turned training (evaluation mode) predict type changed small bug activation functions extended support mps devices","code":""},{"path":"/news/index.html","id":"cito-102","dir":"Changelog","previous_headings":"","what":"cito 1.0.2","title":"cito 1.0.2","text":"CRAN release: 2023-10-06","code":""},{"path":"/news/index.html","id":"new-features-1-0-2","dir":"Changelog","previous_headings":"","what":"New features","title":"cito 1.0.2","text":"conditional Effects (approximate linear effects) uncertainties via bootstrapping (can forwarded functions) summary() can return standard errors p-values xAI metrics improved documentation / several new vignettes baseline loss loss = inf/na captured, training aborted user warned mps (M1/M2 gpu) device now supported","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"cito 1.0.2","text":"early stopping (ignored validation loss) weights saved best last epoch gaussian likelihood works now properly reguarlization loss visualized reduce lr plateau works now validation loss","code":""},{"path":"/news/index.html","id":"cito-101","dir":"Changelog","previous_headings":"","what":"cito 1.0.1","title":"cito 1.0.1","text":"CRAN release: 2023-03-13","code":""},{"path":"/news/index.html","id":"new-features-1-0-1","dir":"Changelog","previous_headings":"","what":"New features","title":"cito 1.0.1","text":"predict function can now return directly class custom loss parameter can now also optimized summary function (importances) now support loss = binomial","code":""},{"path":"/news/index.html","id":"minor-changes-1-0-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"cito 1.0.1","text":"print summary now clear","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"cito 1.0.1","text":"ALE function providing new data work properly Performance improvements new dataloader ALE/PDP work now correctly softmax PDP ICE return now correct curves Early stopping works now lr reducer plateau didn’t reduce lr Predictions now made cuda model stored cuda","code":""}]
